/*************************************************
**
** You're viewing a file in the SMAPI mod dump, which contains a copy of every open-source SMAPI mod
** for queries and analysis.
**
** This is *not* the original file, and not necessarily the latest version.
** Source repository: https://github.com/ameisen/SV-SpriteMaster
**
*************************************************/

		/*
	public class SpriteBatch : GraphicsResource {
		private struct SpriteInfo {
			public Vector4 Source;

			public Vector4 Destination;

			public Vector2 Origin;

			public float Rotation;

			public float Depth;

			public SpriteEffects Effects;

			public Color Color;
		}
		 */


			/*
		private ref struct SpriteInfo {
			private static readonly Type RealType;
			private static readonly FieldInfo SourceInfo;
			private static readonly FieldInfo DestinationInfo;
			private static readonly FieldInfo OriginInfo;
			private static readonly FieldInfo RotationInfo;
			private static readonly FieldInfo DepthInfo;
			private static readonly FieldInfo EffectsInfo;
			private static readonly FieldInfo ColorInfo;

			static SpriteInfo() {
				RealType = typeof(SpriteBatch).GetNestedType("SpriteInfo", BindingFlags.NonPublic);
				FieldInfo GetField(string name) {
					return RealType.GetField(name, BindingFlags.Instance | BindingFlags.Public);
				}
				SourceInfo = GetField("Source");
				DestinationInfo = GetField("Destination");
				OriginInfo = GetField("Origin");
				RotationInfo = GetField("Rotation");
				DepthInfo = GetField("Depth");
				EffectsInfo = GetField("Effects");
				ColorInfo = GetField("Color");
			}

			private readonly object Reference;

			public Vector4 Source {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (Vector4)SourceInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => SourceInfo.SetValue(Reference, value);
			}

			public Vector4 Destination {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (Vector4)DestinationInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => DestinationInfo.SetValue(Reference, value);
			}

			public Vector2 Origin {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (Vector2)OriginInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => OriginInfo.SetValue(Reference, value);
			}

			public float Rotation {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (float)RotationInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => RotationInfo.SetValue(Reference, value);
			}

			public float Depth {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (float)DepthInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => DepthInfo.SetValue(Reference, value);
			}

			public SpriteEffects Effects {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (SpriteEffects)EffectsInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => EffectsInfo.SetValue(Reference, value);
			}

			public Color Color {
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				readonly get => (Color)ColorInfo.GetValue(Reference);
				[MethodImpl(Runtime.MethodImpl.Optimize)]
				set => ColorInfo.SetValue(Reference, value);
			}

			[MethodImpl(Runtime.MethodImpl.Optimize)]
			internal SpriteInfo(object reference) {
				Reference = reference;
			}
		}
		*/