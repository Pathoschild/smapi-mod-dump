/*************************************************
**
** You're viewing a file in the SMAPI mod dump, which contains a copy of every open-source SMAPI mod
** for queries and analysis.
**
** This is *not* the original file, and not necessarily the latest version.
** Source repository: https://github.com/focustense/StardewRadialMenu
**
*************************************************/

namespace RadialMenu.Config;

/// <summary>
/// Configuration for a radial menu item associated with a Generic Mod Config Menu key binding.
/// </summary>
/// <remarks>
/// GMCM bindings will, by default, use the mod name as the <see cref="CustomMenuItemConfiguration.Name"/>
/// and the field name as the <see cref="CustomMenuItemConfiguration.Description"/>. These can be overridden
/// by setting <see cref="UseCustomName"/> to <c>true</c>.
/// </remarks>
public class GmcmAssociation
{
    /// <summary>
    /// The unique identifier of the mod that owns the keybinding associated with this item in
    /// Generic Mod Config Menu.
    /// </summary>
    public string ModId { get; set; } = "";
    /// <summary>
    /// The unique identifier of the keybinding field associated with this item in Generic Mod
    /// Config Menu.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This is populated automatically as a backup in case <see cref="GmcmFieldName"/> fails to
    /// turn up any result, e.g. due to a language change. End users generally will not know
    /// this ID as it is internal to GMCM. If changing the <see cref="GmcmFieldName"/> manually
    /// in <c>config.json</c> instead of using GMCM to configure the menu, clear this field so
    /// that it does not accidentally pick up the old value.
    /// </para>
    /// <para>
    /// One special case is if a mod defines multiple keybindings with the same name, under the
    /// same section title, on the same page. While mods generally shouldn't do this, since it's
    /// confusing, some do anyway, and in these cases the field ID is used in addition to the
    /// field name as a disambiguator during lookups.
    /// </para>
    /// <para>
    /// This property has no utility whatsoever if the mod author does not specify explicit
    /// field IDs, since the autogenerated field IDs are not stable across game launches.
    /// However, in the relatively rare event that the mod author did so, the field ID is a
    /// better choice for fallback/disambiguation than the existing key binding (see comments
    /// on <see cref="FieldName"/>).
    /// </para>
    /// </remarks>
    public string FieldId { get; set; } = "";
    /// <summary>
    /// The visible name of the keybinding field associated with this item in Generic Mod Config
    /// Menu.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Lookups are attempted by name first, then by ID (<see cref="GmcmFieldId"/>), so that
    /// users can change the value in <c>config.json</c> without needing to know the ID. If no
    /// match is found, the <see cref="GmcmFieldId"/> is used as fallback lookup.
    /// </para>
    /// <para>
    /// In many if not most cases, the field ID is not stable because the mod author has not
    /// opted into that feature by providing explicit IDs. Consequently, a final fallback and/or
    /// disambiguation can be performed using the existing <see cref="CustomMenuItemConfiguration.Keybind"/>.
    /// Note, however, that keybinds are not guaranteed to be any more unique than field names,
    /// and it is entirely possible for a mod to support multiple key bindings that are normally
    /// bound to the same key(s), and either use the same name for each setting (requiring
    /// disambiguation) or change the name in a future update (fallback).
    /// </para>
    /// <para>
    /// Matching is always best-effort. This mod will always warn when a match wasn't possible,
    /// and continue to use the last-known <see cref="CustomMenuItemConfiguration.Keybind"/> until the link
    /// is restored by updating the field or binding to one that matches. However, if a target
    /// mod has completely changed its keybinding settings, it may need to be set up again in
    /// the menu.
    /// </para>
    /// </remarks>
    public string FieldName { get; set; } = "";
    /// <summary>
    /// If set, only the <see cref="CustomMenuItemConfiguration.Keybind"/> will track the current setting in
    /// GMCM; <see cref="CustomMenuItemConfiguration.Name"/> and <see cref="CustomMenuItemConfiguration.Description"/>
    /// will retain their current values even if they change in GMCM.
    /// </summary>
    /// <remarks>
    /// Use this to set friendlier names and descriptions when the GMCM page uses names that are
    /// very generic or confusing in the context of a radial menu, e.g. to change a name like
    /// "Keybind" to "Toggle &lt;Feature Name&gt;".
    /// </remarks>
    public bool UseCustomName { get; set; }

    /// <summary>
    /// Creates a copy of this instance.
    /// </summary>
    public GmcmAssociation Clone()
    {
        return new()
        {
            ModId = ModId,
            FieldId = FieldId,
            FieldName = FieldName,
            UseCustomName = UseCustomName
        };
    }
}
