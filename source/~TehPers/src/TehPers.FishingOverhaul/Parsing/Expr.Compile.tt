<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// @generated

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq.Expressions;

namespace TehPers.FishingOverhaul.Parsing
{
	partial record Expr<T> {
<# 
for (var n = 0; n <= 12; n++)
{
    var funcName = $"Func<{string.Concat(Enumerable.Range(0, n).Select(_ => "double, "))}T>";
    var argNames = Enumerable.Range(0, n).Select(n => $"arg{n}").ToList();
#>
		public bool TryCompile(<#= string.Concat(argNames.Select(arg => $"string {arg}, ")) #>[MaybeNullWhen(false)] out Expression<<#= funcName #>> result, [MaybeNullWhen(true)] out HashSet<string> missingVariables)
        {
            var variables = new Dictionary<string, ParameterExpression>();
<#
    foreach (var argName in argNames)
    {
#>
            var <#= argName #>Param = Expression.Parameter(typeof(double), <#= argName #>);
            variables.Add(<#= argName #>, <#= argName #>Param);
<#
    }
#>
            missingVariables = new();
            if (!this.TryCompile(variables, missingVariables, out var body))
            {
                result = default;
                return false;
            }

            result = Expression.Lambda<<#= funcName #>>(body<#= string.Concat(argNames.Select(argName => $", {argName}Param")) #>);
            return true;
        }

<# } #>
	}
}
