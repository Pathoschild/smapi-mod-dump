/*************************************************
**
** You're viewing a file in the SMAPI mod dump, which contains a copy of every open-source SMAPI mod
** for queries and analysis.
**
** This is *not* the original file, and not necessarily the latest version.
** Source repository: https://github.com/ameisen/SV-SpriteMaster
**
*************************************************/

using System;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.CompilerServices;
using System.Numerics;
public static class C {    
    public static unsafe void M_sse41(ushort *source, byte *dest, int count) {
        int index = 0;
        var shuffleMask = Vector128.CreateScalar(0x03020100).AsByte();
        for (; index + 8 <= count; index += 4) {
            var xmm0 = Sse41.ConvertToVector128Int32(source + index).AsUInt32();
            var xmm1 = Sse41.MultiplyLow(xmm0, Vector128.Create(0xFF01U));
            var xmm2 = Sse2.Add(xmm1, Vector128.Create(0x800000U));
            var xmm3 = Sse2.ShiftRightLogical(xmm2, 24);
            var xmm4 = xmm3.AsByte();
            
            var xmmR0 = Ssse3.Shuffle(xmm4, shuffleMask).AsUInt32();
            *(uint*)(dest + index) = xmmR0.ToScalar();
        }
    }
    public static unsafe void M_sse41_nssse3(ushort *source, byte *dest, int count) {
        int index = 0;
        for (; index + 8 <= count; index += 4) {
            var xmm0 = Sse41.ConvertToVector128Int32(source + index).AsUInt32();
            var xmm1 = Sse41.MultiplyLow(xmm0, Vector128.Create(0xFF01U));
            var xmm2 = Sse2.Add(xmm1, Vector128.Create(0x800000U));
            var xmm3 = Sse2.ShiftRightLogical(xmm2, 24);
            var xmm4 = xmm3.AsByte();
            
            byte r0 = Sse41.Extract(xmm4, sizeof(uint) * 0);
            byte r1 = Sse41.Extract(xmm4, sizeof(uint) * 1);
            byte r2 = Sse41.Extract(xmm4, sizeof(uint) * 2);
            byte r3 = Sse41.Extract(xmm4, sizeof(uint) * 3);
            uint rr0 = (uint)r0 | ((uint)r1 << 8) | ((uint)r2 << 16) | ((uint)r3 << 24);
            *(uint*)(dest + index) = rr0;
        }
    }
    
    public static unsafe void M_sse41_nssse3_test(ushort *source, byte *dest, int count) {
        int index = 0;
        var shiftValues = Vector128.Create(0U, 8U, 16U, 24U);
        for (; index + 8 <= count; index += 4) {
            var xmm0 = Sse41.ConvertToVector128Int32(source + index).AsUInt32();
            var xmm1 = Sse41.MultiplyLow(xmm0, Vector128.Create(0xFF01U));
            var xmm2 = Sse2.Add(xmm1, Vector128.Create(0x800000U));
            var xmm3 = Sse2.ShiftRightLogical(xmm2, 24);
            var xmm4 = Sse2.ShiftLeftLogical(xmm3, shiftValues);
            var xmm5 = Sse2.Shuffle(xmm4, 2 | (3 << 2));
            var xmm6 = Sse2.Or(xmm4, xmm5);
            xmm5 = Sse2.Shuffle(xmm6, 1);
            xmm6 = Sse2.Or(xmm5, xmm6);
            Sse2.StoreAligned((uint*)(dest + index), xmm6);
        }
    }
    
    public static unsafe void M_sse2(ushort *source, byte *dest, int count) {
        int index = 0;
        var shiftValues = Vector128.Create(0U, 8U, 16U, 24U);
        var mask = Vector128.Create(0x00FFU, 0x00FFU, 0x00FFU, 0x00FFU);
        var maskLow = Vector128.Create(0x00FFU, 0x00FFU, 0x0000U, 0x0000U);
        var maskHigh = Vector128.Create(0x0000U, 0x0000U, 0x00FFU, 0x00FFU);
        for (; index + 8 <= count; index += 8) {
            var xmm_S0 = Sse2.LoadAlignedVector128(source + index);
            var xmm_SS0 = Sse2.ShuffleLow(xmm_S0, 0 | (0 << 2) | (1 << 4) | (1 << 6)).AsUInt32();
            var xmm_SS1 = Sse2.ShuffleLow(xmm_S0, 2 | (2 << 2) | (3 << 4) | (3 << 6)).AsUInt32();
            var xmm_SS2 = Sse2.ShuffleHigh(xmm_S0, 0 | (0 << 2) | (1 << 4) | (1 << 6)).AsUInt32();
            var xmm_SS3 = Sse2.ShuffleHigh(xmm_S0, 2 | (2 << 2) | (3 << 4) | (3 << 6)).AsUInt32();
            xmm_SS0 = Sse2.And(xmm_SS0, maskLow);
            xmm_SS1 = Sse2.And(xmm_SS1, maskLow);
            xmm_SS2 = Sse2.And(xmm_SS2, maskHigh);
            xmm_SS3 = Sse2.And(xmm_SS3, maskHigh);
            var xmm_SSS0 = Vector128.WithUpper(xmm_SS0, xmm_SS1.GetLower());
            var xmm_SSS1 = Vector128.WithLower(xmm_SS2, xmm_SS3.GetUpper());
            
            // 64-bit results of xmm_SSS0[0, 2]
            var xmm_MulH0 = Sse2.Multiply(xmm_SSS0, Vector128.Create(0xFF01U));
            // 64-bit results of xmm_SSS0[1, 3]
            var xmm_SSS0t = Sse2.Shuffle(xmm_SSS0, 1 | (3 << 4));
            var xmm_MulH1 = Sse2.Multiply(xmm_SSS0t, Vector128.Create(0xFF01U));
            
            // 64-bit results of xmm_SSS1[0, 2]
            var xmm_MulH2 = Sse2.Multiply(xmm_SSS1, Vector128.Create(0xFF01U));
            // 64-bit results of xmm_SSS1[1, 3]
            var xmm_SSS1t = Sse2.Shuffle(xmm_SSS1, 1 | (3 << 4));
            var xmm_MulH3 = Sse2.Multiply(xmm_SSS1t, Vector128.Create(0xFF01U));
            
            // 32-bit results for SSS0
            var xmm_SSS0mr_Lo = Sse2.Shuffle(xmm_MulH0.AsUInt32(), 0 | (2 << 2));
            var xmm_SSS0mr_Hi = Sse2.Shuffle(xmm_MulH1.AsUInt32(), 0 | (2 << 2));
            
            // 32-bit results for SSS1
            var xmm_SSS1mr_Lo = Sse2.Shuffle(xmm_MulH2.AsUInt32(), 0 | (2 << 2));
            var xmm_SSS1mr_Hi = Sse2.Shuffle(xmm_MulH3.AsUInt32(), 0 | (2 << 2));
          
            var xmm_SSS0mr = Vector128.WithUpper(xmm_SSS0mr_Lo, xmm_SSS0mr_Hi.GetLower());
            var xmm_SSS1mr = Vector128.WithUpper(xmm_SSS1mr_Lo, xmm_SSS1mr_Hi.GetLower());
            
            var reg0 = Sse2.Add(xmm_SSS0mr, Vector128.Create(0x800000U));
            var reg1 = Sse2.Add(xmm_SSS1mr, Vector128.Create(0x800000U));

            reg0 = Sse2.ShiftRightLogical(reg0, 24);
            reg1 = Sse2.ShiftRightLogical(reg1, 24);
            
            reg0 = Sse2.ShiftLeftLogical(reg0, shiftValues);
            reg1 = Sse2.ShiftLeftLogical(reg1, shiftValues);
            
            var reg0hi = Sse2.Shuffle(reg0, 2 | (3 << 2));
            var reg1hi = Sse2.Shuffle(reg1, 2 | (3 << 2));
            
            reg0 = Sse2.Or(reg0, reg0hi);
            reg1 = Sse2.Or(reg1, reg1hi);
            
            var reg0lo = Sse2.Shuffle(reg0, 1);
            var reg1lo = Sse2.Shuffle(reg1, 1);
            
            reg0 = Sse2.Or(reg0, reg0lo);
            reg1 = Sse2.Or(reg1, reg1lo);
            
            Sse2.StoreAligned((uint*)(dest + index + 0), reg0);
            Sse2.StoreAligned((uint*)(dest + index + 4), reg1);
        }
    }
}