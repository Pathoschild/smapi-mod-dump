/*************************************************
**
** You're viewing a file in the SMAPI mod dump, which contains a copy of every open-source SMAPI mod
** for queries and analysis.
**
** This is *not* the original file, and not necessarily the latest version.
** Source repository: https://github.com/ameisen/SV-SpriteMaster
**
*************************************************/

using System;
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.CompilerServices;
using System.Numerics;
public static class C {    
    public static unsafe void Mb(byte *source, ushort *dest, int count) {
        for (int i = 0; i < count; ++i) {
            byte inByte = source[i];
            dest[i] = (ushort)((inByte << 8) | inByte);
        }
    }
    
    public static unsafe void M_avx2(byte *source, ushort *dest, int count) {
        int index = 0;
        for (; index + 16 <= count; index += 16) {
            var shortVec = Avx2.ConvertToVector256Int16(source + index).AsUInt16();
            var shortVecShifted = Avx2.ShiftLeftLogical(shortVec, 8);
            var resultVec = Avx2.Or(shortVecShifted, shortVec);
            Avx.StoreAligned(dest + index, resultVec);
        }

        if (index + 8 <= count) {
            var shortVec = Sse41.ConvertToVector128Int16(source + index).AsUInt16();
            var shortVecShifted = Sse2.ShiftLeftLogical(shortVec, 8);
            var resultVec = Sse2.Or(shortVecShifted, shortVec);
            Sse2.StoreAligned(dest + index, resultVec);
            index += 8;
        }
        
        if (index + 4 <= count) {
            var vec = Vector128.CreateScalar(*(uint *)(source + index)).AsByte();
            vec = Sse2.UnpackLow(vec, vec);
            *(ulong *)(dest + index) = Vector128.ToScalar(vec.AsUInt64());
            index += 4;
        }
        
        for (; index < count; ++index) {
            byte inByte = source[index];
            dest[index] = (ushort)((inByte << 8) | inByte);
        }
    }
    
    public static unsafe void M_sse41(byte *source, ushort *dest, int count) {
        int index = 0;
        for (; index + 8 <= count; index += 8) {
            var xmm0 = Sse41.ConvertToVector128Int16(source + index).AsUInt16();
            var xmm1 = Sse2.ShiftLeftLogical(xmm0, 8);
            xmm0 = Sse2.Or(xmm0, xmm1);
            Sse2.StoreAligned(dest + index, xmm0);
        }
        
        if (index + 4 <= count) {
            var vec = Vector128.CreateScalar(*(uint *)(source + index)).AsByte();
            vec = Sse2.UnpackLow(vec, vec);
            *(ulong *)(dest + index) = Vector128.ToScalar(vec.AsUInt64());
            index += 4;
        }
        
        for (; index < count; ++index) {
            byte inByte = source[index];
            dest[index] = (ushort)((inByte << 8) | inByte);
        }
    }
    
    public static unsafe void M_sse2(byte *source, ushort *dest, int count) {
        int index = 0;
        for (; index + 8 <= count; index += 8) {
            var xmm0 = Vector128.CreateScalar(*(ulong *)(source + index)).AsByte();
            var xmm1 = Sse2.UnpackLow(xmm0, xmm0).AsUInt16();
            Sse2.StoreAligned(dest + index, xmm1);
        }
        
        if (index + 4 <= count) {
            var vec = Vector128.CreateScalar(*(uint *)(source + index)).AsByte();
            vec = Sse2.UnpackLow(vec, vec);
            *(ulong *)(dest + index) = Vector128.ToScalar(vec.AsUInt64());
            index += 4;
        }
        
        for (; index < count; ++index) {
            byte inByte = source[index];
            dest[index] = (ushort)((inByte << 8) | inByte);
        }
    }
    
    public static unsafe void M_numeric_vec(byte *source, ushort *dest, int count) {
        int countPerLoop = Vector<ushort>.Count;

        int index = 0;
        for (; index + countPerLoop <= count; index += countPerLoop) {
            var vec0 = Unsafe.ReadUnaligned<Vector<byte>>(source + index);
            Vector.Widen(vec0, out var vec1, out var _);
            var vec2 = Vector.Multiply(vec1, (ushort)0x101);
            Unsafe.Copy(dest + index, ref vec2);
        }

        for (; index < count; ++index) {
            byte inByte = source[index];
            dest[index] = (ushort)((inByte << 8) | inByte);
        }
    }

    public static unsafe void M_numeric_vec2(byte *source, ushort *dest, int count) {
        int halfCountPerLoop = Vector<ushort>.Count;
        int countPerLoop = halfCountPerLoop * 2;

        int index = 0;
        for (; index + countPerLoop <= count; index += countPerLoop) {
            var vec0 = Unsafe.ReadUnaligned<Vector<byte>>(source + index);
            Vector.Widen(vec0, out var vec1, out var vec2);
            var vec1r = Vector.Multiply(vec1, (ushort)0x101);
            var vec2r = Vector.Multiply(vec2, (ushort)0x101);
            Unsafe.Copy(dest + index, ref vec1r);
            Unsafe.Copy(dest + index + halfCountPerLoop, ref vec2r);
        }

        for (; index < count; ++index) {
            byte inByte = source[index];
            dest[index] = (ushort)((inByte << 8) | inByte);
        }
    }

    public static unsafe void M_numeric_vec2_pf(byte *source, ushort *dest, int count) {
        const int DefaultPrefetchDistance = 32 * 4;
        
        int halfCountPerLoop = Vector<ushort>.Count;
        int countPerLoop = halfCountPerLoop * 2;
        
        int index = 0;
        bool prefetch = true;
        for (; index + countPerLoop <= count; index += countPerLoop) {
            var vec0 = Unsafe.ReadUnaligned<Vector<byte>>(source + index);
            Vector.Widen(vec0, out var vec1, out var vec2);
            var vec1r = Vector.Multiply(vec1, (ushort)0x101);
            var vec2r = Vector.Multiply(vec2, (ushort)0x101);
            Unsafe.Copy(dest + index, ref vec1r);
            Unsafe.Copy(dest + index + halfCountPerLoop, ref vec2r);
            // Every other loop instance because a cache line is 64B, not 32B
            if (prefetch) {
                Sse.PrefetchNonTemporal(source + index + DefaultPrefetchDistance);
            }
            prefetch = !prefetch;
        }

        for (; index < count; ++index) {
            byte inByte = source[index];
            dest[index] = (ushort)((inByte << 8) | inByte);
        }
    }
}