<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TehPers.Core.Api</name>
    </assembly>
    <members>
        <member name="T:TehPers.Core.Api.Content.ContentPackAssetProvider">
            <summary>
            Asset provider for a content pack.
            </summary>
            <inheritdoc cref="T:TehPers.Core.Api.Content.IAssetProvider"/>
        </member>
        <member name="M:TehPers.Core.Api.Content.ContentPackAssetProvider.#ctor(StardewModdingAPI.IContentPack)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.Content.ContentPackAssetProvider"/> class.
            </summary>
            <param name="contentPack">The content pack to provide assets for.</param>
        </member>
        <member name="M:TehPers.Core.Api.Content.ContentPackAssetProvider.Load``1(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.Content.ContentPackAssetProvider.Open(System.String,System.IO.FileMode)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.Core.Api.Content.IAssetProvider">
            <summary>
            A provider for game assets. You may use <see cref="T:TehPers.Core.Api.DI.ContentSourceAttribute"/> to specify
            which content source you want to use.<br />
            <br />
            For custom content sources, it is recommended that you create a class that extends
            <see cref="T:Ninject.ConstraintAttribute"/> to identify which one you want to inject into your
            service.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Content.IAssetProvider.Load``1(System.String)">
            <summary>
            Loads an asset from this content source.
            </summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="path">The path to the asset relative to this content source.</param>
            <returns>The loaded asset.</returns>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The asset failed to load.</exception>
        </member>
        <member name="M:TehPers.Core.Api.Content.IAssetProvider.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a file in this content source.
            </summary>
            <param name="path">The path to the file.</param>
            <param name="mode">The mode to open the file in.</param>
            <returns>The file's stream.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="mode"/> was not supported.</exception>
        </member>
        <member name="T:TehPers.Core.Api.DI.BaseModule">
            <summary>
            Base class for modules that automatically tracks bindings.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.BaseModule.Bindings">
            <summary>
            Gets all the bindings registered by this module.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.BaseModule.Kernel">
            <inheritdoc/>
        </member>
        <member name="P:TehPers.Core.Api.DI.BaseModule.Name">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.DI.BaseModule"/> class.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.OnLoad(Ninject.IKernel)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.OnUnload(Ninject.IKernel)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.OnVerifyRequiredModules">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.Unload">
            <summary>
            Unloads the module from the kernel.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.BaseModule.VerifyRequiredModulesAreLoaded">
            <summary>
            Called after loading the modules. A module can verify here if all other required modules are loaded.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.DI.CompoundBindingRoot">
            <summary>
            A binding root that automatically adds global proxy bindings for an additional set of services whenever a service is bound.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.#ctor(Ninject.Syntax.IBindingRoot,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.DI.CompoundBindingRoot"/> class.
            </summary>
            <param name="originalRoot">The binding root to create bindings for.</param>
            <param name="autoServices">The services which will have bindings created automatically for them.</param>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Bind``1">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Bind``2">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Bind``3">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Bind``4">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Bind(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Unbind``1">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Unbind(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Rebind``1">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Rebind``2">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Rebind``3">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Rebind``4">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.Rebind(System.Type[])">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.CompoundBindingRoot.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.Core.Api.DI.ContentSourceAttribute">
            <summary>
            Constrains the source for an injected <see cref="T:TehPers.Core.Api.Content.IAssetProvider"/>.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.ContentSourceAttribute.Source">
            <summary>
            Gets the requested content source.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.ContentSourceAttribute.#ctor(StardewModdingAPI.ContentSource)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.DI.ContentSourceAttribute"/> class.
            </summary>
            <param name="source">The content source that should be used.</param>
        </member>
        <member name="M:TehPers.Core.Api.DI.ContentSourceAttribute.Matches(Ninject.Planning.Bindings.IBindingMetadata)">
            <inheritdoc />
        </member>
        <member name="T:TehPers.Core.Api.DI.GlobalAttribute">
            <summary>
            Forces a <see cref="T:TehPers.Core.Api.DI.IModKernel"/> to inherit a service's implementation from the global <see cref="T:Ninject.IKernel"/>.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.GlobalAttribute.Matches(Ninject.Planning.Bindings.IBindingMetadata)">
            <inheritdoc />
        </member>
        <member name="T:TehPers.Core.Api.DI.GlobalParameter">
            <summary>
            Forces an <see cref="T:TehPers.Core.Api.DI.IModKernel"/> to rely on the global <see cref="T:Ninject.IKernel"/> to resolve a service.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.GlobalParameter.Name">
            <inheritdoc/>
        </member>
        <member name="P:TehPers.Core.Api.DI.GlobalParameter.ShouldInherit">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.GlobalParameter.Equals(Ninject.Parameters.IParameter)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.GlobalParameter.GetValue(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.Core.Api.DI.IDataStore`1">
            <summary>
            A thread-safe store that allows for stateful services.
            </summary>
            <typeparam name="TData">The type of data to store.</typeparam>
        </member>
        <member name="M:TehPers.Core.Api.DI.IDataStore`1.Access``1(System.Func{`0,``0})">
            <summary>
            Accesses the data without allowing any other thread to access the same data at the same time.
            </summary>
            <param name="callback">Callback that processes or modifies the data in this store and returns some value from it.</param>
            <typeparam name="TReturn">The type of value to return.</typeparam>
            <returns>The value returned from the callback.</returns>
        </member>
        <member name="M:TehPers.Core.Api.DI.IDataStore`1.Replace(System.Func{`0,`0})">
            <summary>
            Accesses and replaces the data without allowing any other thread to access the same data at the same time.
            </summary>
            <param name="callback">Callback that processes or modifies the data in this store, then returns a new value to store.</param>
        </member>
        <member name="T:TehPers.Core.Api.DI.IGlobalKernel">
            <summary>
            A factory capable of creating any type of object based on bindings.
            It is the parent of every mod's kernel, however it doesn't automatically know about any bindings in them.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.IGlobalKernel.Proxy(Ninject.Planning.Bindings.IBinding,Ninject.IKernel)">
            <summary>
            Adds a proxied binding to the kernel. The binding will be resolved by making a request to the binding's original parent.
            </summary>
            <param name="binding">The binding to proxy.</param>
            <param name="parent">The binding's parent kernel.</param>
        </member>
        <member name="M:TehPers.Core.Api.DI.IGlobalKernel.Unproxy(Ninject.Planning.Bindings.IBinding)">
            <summary>
            Removes a proxied binding from the kernel.
            </summary>
            <param name="binding">The binding to remove the proxy for.</param>
        </member>
        <member name="M:TehPers.Core.Api.DI.IGlobalKernel.Unproxy(System.Type,Ninject.IKernel)">
            <summary>
            Removes all proxied bindings for a particular service from the kernel.
            </summary>
            <param name="service">The type of service to remove proxies for.</param>
            <param name="parent">The parent kernel for those proxies.</param>
        </member>
        <member name="T:TehPers.Core.Api.DI.IHaveModKernel">
            <summary>
            Indicates that an object has a reference to an <see cref="T:TehPers.Core.Api.DI.IModKernel"/>.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.IHaveModKernel.Kernel">
            <summary>
            Gets the kernel.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.DI.IModBindingRoot">
            <summary>
            Provides a path for mods to register bindings.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.IModBindingRoot.ParentMod">
            <summary>
            Gets the mod which owns this <see cref="T:TehPers.Core.Api.DI.IModBindingRoot"/>.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.IModBindingRoot.ParentFactory">
            <summary>
            Gets the <see cref="T:TehPers.Core.Api.DI.IModKernelFactory"/> that created this <see cref="T:TehPers.Core.Api.DI.IModBindingRoot"/>.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.DI.IModKernel">
            <summary>
            A factory capable of creating any type of object based on bindings.
            It is a child of the global kernel, so any missing bindings will be resolved by the global kernel.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.IModKernel.GlobalKernel">
            <summary>
            Gets the global kernel. Services without bindings in this <see cref="T:TehPers.Core.Api.DI.IModKernel"/> are resolved by the global kernel.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.DI.IModKernelFactory">
            <summary>Factory for creating an <see cref="T:TehPers.Core.Api.DI.IModKernel"/> for a <see cref="T:StardewModdingAPI.IMod"/>.</summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.IModKernelFactory.GlobalServices">
            <summary>
            Gets the global service container. Injected mod APIs can be found here.
            </summary>
            <example>
            To retrieve a mod's injected API:
            
            <code>
            var api = kernelFactory.GlobalKernel.Get&lt;SomeModApi&gt;();
            </code>
            </example>
        </member>
        <member name="M:TehPers.Core.Api.DI.IModKernelFactory.AddKernelProcessor(System.Action{TehPers.Core.Api.DI.IModKernel})">
            <summary>
            Adds a processor for all created <see cref="T:TehPers.Core.Api.DI.IModKernel"/>s. This processor is applied
            to all existing kernels and all kernels created in the future.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="M:TehPers.Core.Api.DI.IModKernelFactory.GetKernel(StardewModdingAPI.IMod)">
            <summary>
            Gets the <see cref="T:TehPers.Core.Api.DI.IModKernel"/> for your <see cref="T:StardewModdingAPI.IMod"/>. This
            <see cref="T:TehPers.Core.Api.DI.IModKernel"/> is specific to your <see cref="T:StardewModdingAPI.IMod"/> and can only see
            dependencies registered to it and the global <see cref="T:Ninject.IKernel"/>. Use
            <see cref="M:Ninject.ResolutionExtensions.Get``1(Ninject.Syntax.IResolutionRoot,Ninject.Parameters.IParameter[])"/> to get a
            service from the <see cref="T:TehPers.Core.Api.DI.IModKernel"/>.
            </summary>
            <param name="owner">The owner of the <see cref="T:TehPers.Core.Api.DI.IModKernel"/>.</param>
            <returns>The <see cref="T:TehPers.Core.Api.DI.IModKernel"/> for your <see cref="T:StardewModdingAPI.IMod"/>.</returns>
        </member>
        <member name="T:TehPers.Core.Api.DI.IModModule">
            <summary>
            A loadable unit that defines bindings for your mod.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.DI.IOptional`1">
            <summary>An object with an optional value.</summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="P:TehPers.Core.Api.DI.IOptional`1.Value">
            <summary>Gets the value of this <see cref="T:TehPers.Core.Api.DI.IOptional`1"/>.</summary>
            <exception cref="T:System.InvalidOperationException">This <see cref="T:TehPers.Core.Api.DI.IOptional`1"/> has no value.</exception>
        </member>
        <member name="P:TehPers.Core.Api.DI.IOptional`1.HasValue">
            <summary>Gets a value indicating whether this <see cref="T:TehPers.Core.Api.DI.IOptional`1"/> has a value.</summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.IOptional`1.TryGetValue(`0@)">
            <summary>Tries to get the value from this <see cref="T:TehPers.Core.Api.DI.IOptional`1"/>.</summary>
            <param name="value">The value if it exists.</param>
            <returns><see langword="true"/> if the value exists, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:TehPers.Core.Api.DI.IProxyBindable">
            <summary>
            Indicates that an object has a proxy root for exposing services.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.IProxyBindable.GlobalProxyRoot">
            <summary>
            Gets an <see cref="T:Ninject.Syntax.IBindingRoot"/> which automatically creates proxy bindings in the global kernel when bindings are created.
            Dependencies registered in it are visible to all mods, however they are resolved by your <see cref="T:TehPers.Core.Api.DI.IModKernel"/>.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.DI.ISimpleFactory`1">
            <summary>
            Simple service factory for lazily retrieving/constructing instances of services.
            </summary>
            <typeparam name="TService">The type of service to retrieve.</typeparam>
        </member>
        <member name="M:TehPers.Core.Api.DI.ISimpleFactory`1.GetSingle">
            <summary>
            Gets a single instance of the service. If more than one binding exists for the service, this throws an <see cref="T:Ninject.ActivationException"/> instead.
            </summary>
            <returns>A single instance of the service.</returns>
        </member>
        <member name="M:TehPers.Core.Api.DI.ISimpleFactory`1.GetAll">
            <summary>
            Gets every instance of the service. Services are activated (if necessary) when the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/> is enumerated.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of every instance of the service.</returns>
        </member>
        <member name="T:TehPers.Core.Api.DI.ModModule">
            <inheritdoc cref="T:TehPers.Core.Api.DI.BaseModule"/>
            <inheritdoc cref="T:TehPers.Core.Api.DI.IModModule"/>
        </member>
        <member name="P:TehPers.Core.Api.DI.ModModule.GlobalProxyRoot">
            <inheritdoc/>
        </member>
        <member name="P:TehPers.Core.Api.DI.ModModule.Kernel">
            <inheritdoc/>
        </member>
        <member name="P:TehPers.Core.Api.DI.ModModule.KernelInstance">
            <inheritdoc/>
        </member>
        <member name="P:TehPers.Core.Api.DI.ModModule.ParentFactory">
            <inheritdoc/>
        </member>
        <member name="P:TehPers.Core.Api.DI.ModModule.ParentMod">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.ModModule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.DI.ModModule"/> class.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.DI.ModModule.Unbind(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.ModModule.OnLoad(Ninject.IKernel)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.DI.ModModule.OnUnload(Ninject.IKernel)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.Core.Api.DI.ModServices">
            <summary>
            The global mod services. This contains the mod kernel factory, for example.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.DI.ModServices.Factory">
            <summary>
            Gets the <see cref="T:TehPers.Core.Api.DI.IModKernelFactory"/> for creating mod kernels. This value is
            guaranteed to be <see langword="null"/> if <c>TehPers.Core</c> has not been loaded yet.
            To ensure that your mod loads after the core mod, add <c>TehPers.Core</c> as a
            dependency in your mod's manifest. If you do not need the core mod to be loaded for
            your mod to function, then you may add it as an optional dependency instead.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Extensions.BindingExtensions">
            <summary>
            Extension methods for binding services.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.BindingExtensions.GetChildParameters(Ninject.Activation.IContext)">
            <summary>
            Gets the inherited parameters from a context.
            </summary>
            <param name="context">The parent context.</param>
            <returns>The inherited parameters.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.BindingExtensions.ToFirst``1(Ninject.Syntax.IBindingToSyntax{``0},System.Type[])">
            <summary>
            Indicates that a service should be bound to the first available implementation.
            </summary>
            <typeparam name="TService">The implementation type.</typeparam>
            <param name="syntax">The fluent syntax.</param>
            <param name="implementationTypes">The implementation types. These should be assignable to <typeparamref name="TService"/>.</param>
            <returns>The fluent syntax.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if an input paramater is null.</exception>
            <exception cref="T:Ninject.ActivationException">Thrown if there was an error activating the service.</exception>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.BindingExtensions.ToFirst``2(Ninject.Syntax.IBindingToSyntax{``0})">
            <summary>
            Indicates that a service should be bound to the first available implementation.
            </summary>
            <typeparam name="TService">The implementation type.</typeparam>
            <typeparam name="T1">The only implementation type to try.</typeparam>
            <param name="syntax">The fluent syntax.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.BindingExtensions.ToFirst``3(Ninject.Syntax.IBindingToSyntax{``0})">
            <summary>
            Indicates that a service should be bound to the first available implementation.
            </summary>
            <typeparam name="TService">The implementation type.</typeparam>
            <typeparam name="T1">The first implementation type to try.</typeparam>
            <typeparam name="T2">The second implementation type to try.</typeparam>
            <param name="syntax">The fluent syntax.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.BindingExtensions.ToFirst``4(Ninject.Syntax.IBindingToSyntax{``0})">
            <summary>
            Indicates that a service should be bound to the first available implementation.
            </summary>
            <typeparam name="TService">The implementation type.</typeparam>
            <typeparam name="T1">The first implementation type to try.</typeparam>
            <typeparam name="T2">The second implementation type to try.</typeparam>
            <typeparam name="T3">The third implementation type to try.</typeparam>
            <param name="syntax">The fluent syntax.</param>
            <returns>The fluent syntax.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.BindingExtensions.BindForeignModApi``1(TehPers.Core.Api.DI.IModBindingRoot,System.String)">
            <summary>
            Binds an API exposed by another mod through SMAPI to your mod's kernel.
            </summary>
            <typeparam name="TApi">The type the mod's API returns, or an interface which matches part of (or all of) its signature.</typeparam>
            <param name="root">The mod's binding root.</param>
            <param name="modId">The foreign mod's ID.</param>
            <returns>The syntax that can be used to configure the binding.</returns>
        </member>
        <member name="T:TehPers.Core.Api.Extensions.EnumerableExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> and some subtypes.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>Shuffles a list.</summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to shuffle.</param>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>Shuffles a list.</summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to shuffle.</param>
            <param name="rand">The <see cref="T:System.Random"/> to use while shuffling.</param>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="TSource">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to create a <see cref="T:System.Collections.Generic.HashSet`1"/> from.</param>
            <param name="comparer">The comparer for the hash set.</param>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains values of type <typeparamref name="TSource"/> selected from the input sequence.</returns>
            <remarks>In framework versions 4.7.2+, this method can be removed.</remarks>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
            <typeparam name="TKey">The type of the keys in the <paramref name="source" />.</typeparam>
            <typeparam name="TValue">The type of the values in the <paramref name="source"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A dictionary containing all the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> entries in the <paramref name="source"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/> using a custom <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</summary>
            <typeparam name="TKey">The type of the keys in the <paramref name="source"/>.</typeparam>
            <typeparam name="TValue">The type of the values in the <paramref name="source"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="comparer">The comparer used to compare keys in the dictionary.</param>
            <returns>A dictionary containing all the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> entries in the <paramref name="source"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Swaps two elements in a list.</summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="source">The list.</param>
            <param name="first">The index of the first element.</param>
            <param name="second">The index of the second element.</param>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.GetDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>Retrieves a value from a <see cref="T:System.Collections.Generic.IDictionary`2"/> with the given fallback value.</summary>
            <typeparam name="TKey">The <see cref="T:System.Collections.Generic.IDictionary`2"/>'s key type.</typeparam>
            <typeparam name="TVal">The <see cref="T:System.Collections.Generic.IDictionary`2"/>'s value type.</typeparam>
            <param name="source">The dictionary to try to retrieve the value from.</param>
            <param name="key">The key of the value to retrieve.</param>
            <param name="fallback">The fallback value if the key doesn't exist in the dictionary.</param>
            <returns>If the key exists in <paramref name="source"/>, the value associated with <paramref name="key"/>, otherwise <paramref name="fallback"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.Window``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Splits an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into several smaller ones, each containing at most a certain number of elements.</summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <param name="size">The number of elements each group should have. The last group may contain fewer elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the elements from <paramref name="source"/> split into groups of at most <paramref name="source"/> elements.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>Tries to get a value out of a dictionary. If it fails, uses a factory function to generate a new value, returning that instead and adding it to the dictionary.</summary>
            <typeparam name="TKey">The type of key.</typeparam>
            <typeparam name="TValue">The type of value.</typeparam>
            <param name="source">The source dictionary.</param>
            <param name="key">The key.</param>
            <param name="factory">A function which returns a value to put in the dictionary if the key doesn't exist.</param>
            <returns>The existing item with the given key in the source dictionary, or the factory-generated value if the key doesn't already exist.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.Repeat(System.String,System.Int32)">
            <summary>Creates a new string containing one string repeated any number of times.</summary>
            <param name="input">The string to repeat.</param>
            <param name="count">How many times to repeat it.</param>
            <returns><paramref name="input"/> repeated <paramref name="count"/> times.</returns>
            <remarks>Based on this SO answer: https://stackoverflow.com/a/3754626. </remarks>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.Yield``1(``0)">
            <summary>Wraps this object instance into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> consisting of a single item.</summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="item">The instance that will be wrapped.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> consisting of a single item.</returns>
            <remarks>Based on this SO question: https://stackoverflow.com/q/1577822. </remarks>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.EnumerableExtensions.WithIndex``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the items in a sequence along with their index in the sequence.
            </summary>
            <typeparam name="T">Type of the object.</typeparam>
            <param name="source">The source items.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the source items and their index in the sequence.</returns>
        </member>
        <member name="T:TehPers.Core.Api.Extensions.FunctionalExtensions">
            <summary>
            Extension methods that allow for more functional programming.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.FunctionalExtensions.Select``2(System.Nullable{``0},System.Func{``0,``1})">
            <summary>
            Projects the value to a new value if it is not null. This is similar to
            <see cref="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})"/>.
            </summary>
            <typeparam name="TSource">The source value type.</typeparam>
            <typeparam name="TResult">The mapped type.</typeparam>
            <param name="source">The source value.</param>
            <param name="f">A function which maps the source to the result.</param>
            <returns>
            The result of mapping the value using <paramref name="f"/>. If
            <paramref name="source"/> is <see langword="null"/>, then the result is also
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.FunctionalExtensions.Where``1(System.Nullable{``0},System.Predicate{``0})">
            <summary>
            Filters a nullable value based on a predicate. This is similar to
            <see cref="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>.
            </summary>
            <typeparam name="T">The source value type.</typeparam>
            <param name="source">The source value.</param>
            <param name="f">A function which determines whether the source value should remain non-null.</param>
            <returns>
            The result of filtering the value using <paramref name="f"/>. If the predicate returned
            <see langword="false"/>, then the result is <see langword="null"/>. If the source was
            already <see langword="null"/>, then it remains unchanged.
            </returns>
        </member>
        <member name="M:TehPers.Core.Api.Extensions.FunctionalExtensions.AsEnumerable``1(System.Nullable{``0})">
            <summary>
            Converts a nullable value to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. If the value was
            <see langword="null"/>, then the resulting sequence is empty. Otherwise, it contains a
            single value containing the <paramref name="source"/>.
            </summary>
            <typeparam name="T">The source value type.</typeparam>
            <param name="source">The source value.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> representing the enumerated source value.
            </returns>
        </member>
        <member name="T:TehPers.Core.Api.Gameplay.Seasons">
            <summary>
            Seasons within the game. Because this is a flags-style enum, multiple seasons can be
            combined.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Seasons.Spring">
            <summary>
            The spring season.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Seasons.Summer">
            <summary>
            The summer season.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Seasons.Fall">
            <summary>
            The fall season.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Seasons.Winter">
            <summary>
            The winter season.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Seasons.None">
            <summary>
            No seasons.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Seasons.All">
            <summary>
            All seasons in the game.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Gameplay.Weathers">
            <summary>
            Weathers within the game. Because this is a flags-style enum, multiple weathers can be
            combined.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Weathers.Sunny">
            <summary>
            Sunny weather.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Weathers.Rainy">
            <summary>
            Rainy weather.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Weathers.None">
            <summary>
            No weathers.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Gameplay.Weathers.All">
            <summary>
            All weathers in the game.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Items.IItemFactory">
            <summary>
            A factory which can create instances of an <see cref="T:StardewValley.Item"/>.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.Items.IItemFactory.ItemType">
            <summary>
            Gets the type of item this factory creates.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Items.IItemFactory.Create">
            <summary>
            Creates an instance of this item. If the item can be stacked, then the stack size
            should be 1.
            </summary>
            <returns>An instance of this item.</returns>
        </member>
        <member name="T:TehPers.Core.Api.Items.INamespaceProvider">
            <summary>
            Provides items within a namespace.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.Items.INamespaceProvider.Name">
            <summary>
            The name of the namespace.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceProvider.TryGetItemFactory(System.String,TehPers.Core.Api.Items.IItemFactory@)">
            <summary>
            Tries to get an item factory for an item with the given key from this item namespace.
            </summary>
            <param name="key">The key of the item local to this namespace.</param>
            <param name="itemFactory">An instance of an item with the given key.</param>
            <returns><see langword="true"/> if the key is valid for an item in this namespace, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceProvider.GetKnownItemKeys">
            <summary>
            Gets all the known, predefined item keys within this namespace. This may not return
            every valid item key in this namespace. For example, dynamically created items may not
            be returned. This should be treated as a guide for mods to know what items are
            available within this namespace.
            </summary>
            <returns>The known item keys.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceProvider.Reload">
            <summary>
            Reloads the namespace provider.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Items.INamespaceRegistry">
            <summary>
            A registry of all registered namespaces. Namespaces are reloaded whenever a save is loaded,
            however they can also be reloaded on demand.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceRegistry.GetRegisteredNamespaces">
            <summary>
            Gets the registered namespaces.
            </summary>
            <returns>The registered namespaces.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceRegistry.TryGetItemFactory(TehPers.Core.Api.Items.NamespacedKey,TehPers.Core.Api.Items.IItemFactory@)">
            <summary>
            Tries to get an <see cref="T:TehPers.Core.Api.Items.IItemFactory"/> for the given <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.
            </summary>
            <param name="key">The key of the item.</param>
            <param name="factory">The item factory</param>
            <returns><see langword="true"/> if the key is valid for an item, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceRegistry.GetKnownItemKeys">
            <summary>
            Gets all the known, predefined item keys within all namespaces. This may not return
            every valid item key. For example, dynamically created items may not be returned. This
            should be treated as a guide for  mods to know what items are available within all
            namespaces.
            </summary>
            <returns>The known item keys.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.INamespaceRegistry.RequestReload">
            <summary>
            Reloads each namespace provider.
            </summary>
        </member>
        <member name="E:TehPers.Core.Api.Items.INamespaceRegistry.OnReload">
            <summary>
            Invoked whenever the namespace provider is reloaded.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Items.ItemTypes">
            <summary>
            Standard <see cref="T:StardewValley.Item"/> type names.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.BigCraftable">
            <summary>
            The type name for craftable items. This is different than the type name for objects
            even though they use the same class.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Boots">
            <summary>
            The type name for boots.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Clothing">
            <summary>
            The type name for clothing.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Flooring">
            <summary>
            The type name for flooring. This is different than the type name for wallpapers even
            though they use the same class.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Furniture">
            <summary>
            The type name for furniture.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Hat">
            <summary>
            The type name for hats.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Object">
            <summary>
            The type name for objects.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Ring">
            <summary>
            The type name for rings.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Tool">
            <summary>
            The type name for tools.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Wallpaper">
            <summary>
            The type name for wallpapers. This is different than the type name for flooring even
            though they use the same class.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Weapon">
            <summary>
            The type name for weapons (both melee and sling shots).
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ItemTypes.Unknown">
            <summary>
            The type name for unknown item types.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Items.NamespacedKey">
            <summary>
            A string key within a specific namespace.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.NamespacedKey.StardewValleyNamespace">
            <summary>
            The namespace for SDV.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.Items.NamespacedKey.Namespace">
            <summary>
            The namespace this key is contained in.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.Items.NamespacedKey.Key">
            <summary>
            The unique key within the namespace.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> class.
            </summary>
            <param name="namespace">The namespace of the key.</param>
            <param name="key">The unique key within the namespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.#ctor(StardewModdingAPI.IManifest,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> class.
            </summary>
            <param name="manifest">The manifest that represents the namespace of the key.</param>
            <param name="key">The unique key within the namespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.Deconstruct(System.String@,System.String@)">
            <summary>
            Deconstructs this <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> into its components.
            </summary>
            <param name="namespace">The namespace of the key.</param>
            <param name="key">The unique key within the namespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.ToString">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.Equals(TehPers.Core.Api.Items.NamespacedKey)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.op_Equality(TehPers.Core.Api.Items.NamespacedKey,TehPers.Core.Api.Items.NamespacedKey)">
            <summary>
            Compares two namespaced keys for equivalency.
            </summary>
            <param name="left">The first <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</param>
            <param name="right">The second <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</param>
            <returns>Whether the keys are equivalent.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.op_Inequality(TehPers.Core.Api.Items.NamespacedKey,TehPers.Core.Api.Items.NamespacedKey)">
            <summary>
            Compares two namespaced keys for inequivalency.
            </summary>
            <param name="left">The first <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</param>
            <param name="right">The second <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</param>
            <returns>Whether the keys are inequivalent.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.TryParse(System.String,TehPers.Core.Api.Items.NamespacedKey@)">
            <summary>
            Tries to parse a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> from a raw string. Strings in the format
            <c>namespace:key</c> are parsed into their components. The key may contain colons, but
            the namespace cannot.
            </summary>
            <param name="raw">The raw string to parse.</param>
            <param name="key">The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>, if any.</param>
            <returns>Whether parsing was successful.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvTool(System.String)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a tool in the SDV namespace.
            </summary>
            <param name="toolType">The tool type.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvTool(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a tool in the SDV namespace.
            </summary>
            <param name="toolType">The tool type.</param>
            <param name="quality">The quality level of the tool.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvClothing(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a clothing item in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the clothing item.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvWallpaper(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a wallpaper item in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the wallpaper item.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvFlooring(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a flooring item in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the flooring item.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvBoots(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for boots in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the boots.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvHat(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a hat in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the hat.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvWeapon(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a weapon in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the weapon.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvFurniture(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a furniture item in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the furniture item.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvBigCraftable(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a craftable item in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the craftable item.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvRing(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a ring in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the ring.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvObject(System.Int32)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for an object in the SDV namespace.
            </summary>
            <param name="parentSheetIndex">The index of the object.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Items.NamespacedKey.SdvCustom(System.String,System.String)">
            <summary>
            Creates a <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/> for a custom item in the SDV namespace.
            </summary>
            <param name="itemType">The item type of the custom item.</param>
            <param name="key">The unique key of the custom item within the namespace and item type.</param>
            <returns>The resulting <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</returns>
        </member>
        <member name="T:TehPers.Core.Api.Items.SimpleItemFactory">
            <summary>
            An item factory for simple items.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.Items.SimpleItemFactory.ItemType">
            <summary>
            The type of item this factory creates.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Items.SimpleItemFactory.#ctor(System.String,System.Func{StardewValley.Item})">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.Core.Api.Items.SimpleItemFactory"/> class.
            </summary>
            <param name="itemType">The type of item this factory creates.</param>
            <param name="createItem">A function that creates an instance of the item.</param>
        </member>
        <member name="M:TehPers.Core.Api.Items.SimpleItemFactory.Create">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.Core.Api.Items.ToolTypes">
            <summary>
            Standard <see cref="T:StardewValley.Tool"/> type names.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.Axe">
            <summary>
            The type name for axes.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.Hoe">
            <summary>
            The type name for hoes.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.Pickaxe">
            <summary>
            The type name for pickaxes.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.WateringCan">
            <summary>
            The type name for watering cans.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.FishingRod">
            <summary>
            The type name for fishing rods.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.MilkPail">
            <summary>
            The type name for milk pails.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.Shears">
            <summary>
            The type name for shears.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.Pan">
            <summary>
            The type name for ore pans.
            </summary>
        </member>
        <member name="F:TehPers.Core.Api.Items.ToolTypes.Wand">
            <summary>
            The type name for wands.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Json.IJsonProvider">
            <summary>
            API for reading and writing JSON files.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.Serialize``1(``0,System.IO.StreamWriter,System.Boolean)">
            <summary>
            Serializes JSON to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TModel">The type of object being written.</typeparam>
            <param name="data">The object being written.</param>
            <param name="outputStream">The <see cref="T:System.IO.StreamWriter"/> to write to.</param>
            <param name="minify">Whether to minify the output. Minifying the output removes all comments and extra whitespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.Serialize``1(``0,System.IO.StreamWriter,System.Action{Newtonsoft.Json.JsonSerializerSettings},System.Boolean)">
            <summary>
            Serializes JSON to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TModel">The type of object being written.</typeparam>
            <param name="data">The object being written.</param>
            <param name="outputStream">The <see cref="T:System.IO.StreamWriter"/> to write to.</param>
            <param name="settings">Callback for configuring the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <param name="minify">Whether to minify the output. Minifying the output removes all comments and extra whitespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.Deserialize``1(System.IO.StreamReader)">
            <summary>
            Deserializes JSON from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="inputStream">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.Deserialize``1(System.IO.StreamReader,System.Action{Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Deserializes JSON from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="inputStream">The <see cref="T:System.IO.StreamReader"/> to read from.</param>
            <param name="settings">Callback for configuring the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.WriteJson``1(``0,System.String,System.Boolean)">
            <summary>
            Writes a JSON file to a specified path.
            </summary>
            <typeparam name="TModel">The type of object being written.</typeparam>
            <param name="data">The object being written.</param>
            <param name="path">The path to the output file.</param>
            <param name="minify">Whether to minify the output. Minifying the output removes all comments and extra whitespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.WriteJson``1(``0,System.String,TehPers.Core.Api.Content.IAssetProvider,System.Action{Newtonsoft.Json.JsonSerializerSettings},System.Boolean)">
            <summary>
            Writes a JSON file to a specified path.
            </summary>
            <typeparam name="TModel">The type of object being written.</typeparam>
            <param name="data">The object being written.</param>
            <param name="path">The path to the output file.</param>
            <param name="assetProvider">The <see cref="T:TehPers.Core.Api.Content.IAssetProvider"/> to write the file to.</param>
            <param name="settings">Callback for configuring the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <param name="minify">Whether to minify the output. Minifying the output removes all comments and extra whitespace.</param>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.ReadJson``1(System.String)">
            <summary>
            Reads JSON from a file.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="path">The path to the file.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.ReadJson``1(System.String,TehPers.Core.Api.Content.IAssetProvider,System.Action{Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Reads JSON from a file.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="path">The path to the file.</param>
            <param name="assetProvider">The <see cref="T:TehPers.Core.Api.Content.IAssetProvider"/> to read the file from.</param>
            <param name="settings">Callback for configuring the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.ReadOrCreate``1(System.String,System.Boolean)">
            <summary>
            Reads JSON from a file, creating the file if it doesn't exist.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="path">The path to the file.</param>
            <param name="minify">Whether to minify the output if the file is created. Minifying the output removes all comments and extra whitespace.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.ReadOrCreate``1(System.String,TehPers.Core.Api.Content.IAssetProvider,System.Action{Newtonsoft.Json.JsonSerializerSettings},System.Boolean)">
            <summary>
            Reads JSON from a file, creating the file if it doesn't exist.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="path">The path to the file.</param>
            <param name="assetProvider">The <see cref="T:TehPers.Core.Api.Content.IAssetProvider"/> to read the file from.</param>
            <param name="settings">Callback for configuring the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <param name="minify">Whether to minify the output if the file is created. Minifying the output removes all comments and extra whitespace.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.ReadOrCreate``1(System.String,System.Func{``0},System.Boolean)">
            <summary>
            Reads JSON from a file, creating the file if it doesn't exist.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="path">The path to the file.</param>
            <param name="dataFactory">Factory method which creates the data to write.</param>
            <param name="minify">Whether to minify the output if the file is created. Minifying the output removes all comments and extra whitespace.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="M:TehPers.Core.Api.Json.IJsonProvider.ReadOrCreate``1(System.String,TehPers.Core.Api.Content.IAssetProvider,System.Action{Newtonsoft.Json.JsonSerializerSettings},System.Func{``0},System.Boolean)">
            <summary>
            Reads JSON from a file, creating the file if it doesn't exist.
            </summary>
            <typeparam name="TModel">The type of object being read.</typeparam>
            <param name="path">The path to the file.</param>
            <param name="assetProvider">The <see cref="T:TehPers.Core.Api.Content.IAssetProvider"/> to read the file from.</param>
            <param name="settings">Callback for configuring the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</param>
            <param name="dataFactory">Factory method which creates the data to write.</param>
            <param name="minify">Whether to minify the output if the file is created. Minifying the output removes all comments and extra whitespace.</param>
            <returns>The deserialized model.</returns>
        </member>
        <member name="T:TehPers.Core.Api.Setup.ISetup">
            <summary>
            A service which requires setup on game launch.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Setup.ISetup.Setup">
            <summary>
            Sets up this service.
            </summary>
        </member>
        <member name="T:TehPers.Core.Api.Setup.Patcher">
            <summary>
            A service that applies Harmony patches.
            </summary>
        </member>
        <member name="P:TehPers.Core.Api.Setup.Patcher.Harmony">
            <summary>
            The harmony instance.
            </summary>
        </member>
        <member name="M:TehPers.Core.Api.Setup.Patcher.#ctor(HarmonyLib.Harmony)">
            <summary>
            Constructs an instance of the <see cref="T:TehPers.Core.Api.Setup.Patcher"/> class.
            </summary>
            <param name="harmony">The harmony instance to use.</param>
        </member>
        <member name="M:TehPers.Core.Api.Setup.Patcher.Setup">
            <inheritdoc cref="M:TehPers.Core.Api.Setup.ISetup.Setup"/>
        </member>
        <member name="M:TehPers.Core.Api.Setup.Patcher.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose" />
        </member>
        <member name="M:TehPers.Core.Api.Setup.Patcher.Patch(System.Reflection.MethodBase,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod,HarmonyLib.HarmonyMethod)">
            <summary>
            Creates a patch for a target method.
            </summary>
            <param name="target">The target method to patch.</param>
            <param name="prefix">The prefix to apply, if any.</param>
            <param name="postfix">The postfix to apply, if any.</param>
            <param name="transpiler">The transpiler to apply, if any.</param>
            <param name="finalizer">The finalizer to apply, if any.</param>
        </member>
    </members>
</doc>
