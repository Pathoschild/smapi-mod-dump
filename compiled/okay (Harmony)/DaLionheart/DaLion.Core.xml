<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DaLion.Core</name>
    </assembly>
    <members>
        <member name="T:DaLion.Core.Commands.InflictStatusCommand">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Commands.InflictStatusCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="M:DaLion.Core.Commands.InflictStatusCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Commands.InflictStatusCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Core.Commands.InflictStatusCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Core.Commands.InflictStatusCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Commands.InflictStatusCommand.CallbackImpl(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.CoreConfig">
            <summary>Config schema for the Core mod.</summary>
        </member>
        <member name="P:DaLion.Core.CoreConfig.CropWitherChance">
            <summary>Gets the chance a crop may wither per day left un-watered.</summary>
        </member>
        <member name="P:DaLion.Core.CoreConfig.DebugKey">
            <summary>Gets the key used to engage Debug Mode.</summary>
        </member>
        <member name="T:DaLion.Core.CoreMod">
            <summary>The mod entry point.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.Instance">
            <summary>Gets the static <see cref="T:DaLion.Core.CoreMod"/> instance.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.Config">
            <summary>Gets or sets the <see cref="T:DaLion.Core.CoreConfig"/> instance.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.PerScreenState">
            <summary>Gets the <see cref="T:StardewModdingAPI.Utilities.PerScreen`1"/> <see cref="T:DaLion.Core.CoreState"/>.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.State">
            <summary>Gets or sets the <see cref="T:DaLion.Core.CoreState"/> of the local player.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.EventManager">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.EventManager"/> instance.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.Data">
            <summary>Gets the <see cref="T:DaLion.Shared.Data.ModDataManager"/> instance.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.Broadcaster">
            <summary>Gets the <see cref="P:DaLion.Core.CoreMod.Broadcaster"/> instance.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.Log">
            <summary>Gets the <see cref="T:DaLion.Shared.Logger"/> instance.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.ModHelper">
            <summary>Gets the <see cref="T:StardewModdingAPI.IModHelper"/> API.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.Manifest">
            <summary>Gets the <see cref="T:StardewModdingAPI.IManifest"/> API.</summary>
        </member>
        <member name="P:DaLion.Core.CoreMod.UniqueId">
            <summary>Gets the unique ID for this mod.</summary>
        </member>
        <member name="M:DaLion.Core.CoreMod.Entry(StardewModdingAPI.IModHelper)">
            <summary>The mod entry point, called after the mod is first loaded.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="T:DaLion.Core.CoreState">
            <summary>Runtime state schema for the Core mod.</summary>
            <remarks>This is public to be used by other mods.</remarks>
        </member>
        <member name="P:DaLion.Core.CoreState.AreEnemiesNearby">
            <summary>Gets a value indicating whether enemies are nearby the player.</summary>
        </member>
        <member name="P:DaLion.Core.CoreState.SecondsOutOfCombat">
            <summary>Gets the number of seconds since the last taking or receiving damage.</summary>
        </member>
        <member name="T:DaLion.Core.Framework.Debuffs.BleedAnimation">
            <summary>The animation that plays above a bleeding <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.BleedAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.BleedAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.BleedAnimation.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws the animation to the specified <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</summary>
            <param name="b">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.BleedAnimation.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>Updates the animation state.</summary>
            <param name="time">The current <see cref="T:Microsoft.Xna.Framework.GameTime"/>.</param>
        </member>
        <member name="T:DaLion.Core.Framework.Debuffs.BurnAnimation">
            <summary>The animation that plays above a burning <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.BurnAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.BurnAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.BurnAnimation.#ctor(StardewValley.Monsters.Serpent,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.BurnAnimation"/> class for a royal <see cref="T:StardewValley.Monsters.Serpent"/>.</summary>
            <param name="royal">The stunned <see cref="T:StardewValley.Monsters.Serpent"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="segmentIndex">The index of the <paramref name="royal"/> <see cref="T:StardewValley.Monsters.Serpent"/> segment to which this instance should be attached.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.BurnAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Debuffs.FreezeAnimation">
            <summary>The animation that plays above a burning <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.FreezeAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32,System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.FreezeAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="offset">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> offset to the animation's position.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.FreezeAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Debuffs.PoisonAnimation">
            <summary>The animation that plays above poisoned <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.PoisonAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.PoisonAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.PoisonAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Debuffs.SlowAnimation">
            <summary>The animation that plays above a slowed <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.SlowAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.SlowAnimation"/> class.</summary>
            <param name="monster">The Slowned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.SlowAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Debuffs.StunAnimation">
            <summary>The animation that plays above a stunned <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.StunAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Debuffs.StunAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Debuffs.StunAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.BleedAnimationRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BleedAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BleedAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BleedAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BleedAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.BleedAnimationUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BleedAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BleedAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BleedAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BleedAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.BurnAnimationRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BurnAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BurnAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BurnAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BurnAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.BurnAnimationUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BurnAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BurnAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.BurnAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.BurnAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.CoreAssetRequestedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreAssetRequestedEvent.Initialize">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreAssetRequestedEvent.EditObjectsData(StardewModdingAPI.IAssetData)">
            <summary>Makes seaweed an algae item.</summary>
        </member>
        <member name="T:DaLion.Core.Framework.Events.CoreDayEndingEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.CoreReturnedToTitleEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreReturnedToTitleEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreReturnedToTitleEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreReturnedToTitleEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreReturnedToTitleEvent.OnReturnedToTitleImpl(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.CoreSaveLoadedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CoreSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CoreSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.CropWitherDayEndingEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CropWitherDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.CropWitherDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.CropWitherDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.CropWitherDayEndingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.CropWitherDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugButtonsChangedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugButtonsChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugButtonsChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugButtonsChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugButtonsChangedEvent.OnButtonsChangedImpl(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugCursorMovedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugCursorMovedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugCursorMovedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugCursorMovedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugCursorMovedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugCursorMovedEvent.OnCursorMovedImpl(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugMenuChangedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugMenuChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugMenuChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugMenuChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugMenuChangedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugMenuChangedEvent.OnMenuChangedImpl(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugModMessageReceivedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugRenderedActiveMenuEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugRenderedActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugRenderedActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugRenderedActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugRenderedActiveMenuEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugRenderedActiveMenuEvent.OnRenderedActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugRenderedHudEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugRenderedHudEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugRenderedWorldEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.Debug.DebugUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.Debug.DebugUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Core.Framework.Events.Debug.DebugUpdateTickedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.Debug.DebugUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.FreezeAnimationRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.FreezeAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.FreezeAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.FreezeAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.FreezeAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.FreezeAnimationUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.FreezeAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.FreezeAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.FreezeAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.FreezeAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Events.OutOfCombatOneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.OutOfCombatWarpedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.OutOfCombatWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.OutOfCombatWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.OutOfCombatWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.OutOfCombatWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.PoisonAnimationRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.PoisonAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.PoisonAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.PoisonAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.PoisonAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.PoisonAnimationUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.PoisonAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.PoisonAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.PoisonAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.PoisonAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.SlimeBallObjectListChangedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.SlimeBallObjectListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.SlimeBallObjectListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.SlimeBallObjectListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.SlimeBallObjectListChangedEvent.OnObjectListChangedImpl(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.SlowAnimationRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.SlowAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.SlowAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.SlowAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.SlowAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.SlowAnimationUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.SlowAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.SlowAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.SlowAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.SlowAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.StunAnimationRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.StunAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.StunAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.StunAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.StunAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.StunAnimationUpdateTickedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.StunAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.StunAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.StunAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.StunAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.TrackMonstersNpcListChangedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.TrackMonstersNpcListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.TrackMonstersNpcListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.TrackMonstersNpcListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.TrackMonstersNpcListChangedEvent.OnNpcListChangedImpl(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Events.TrackMonstersWarpedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.TrackMonstersWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.TrackMonstersWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Events.TrackMonstersWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Events.TrackMonstersWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Core.Framework.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.FarmerExtensions.GetRingItemCount(StardewValley.Farmer,System.String,System.Collections.Generic.IList{StardewValley.Item})">
            <summary>
                Counts the units of a specific <see cref="T:StardewValley.Objects.Ring"/> in the <paramref name="farmer"/>'s inventory, or the
                specified <paramref name="list"/> of items.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="id">The <see cref="T:StardewValley.Objects.Ring"/> id.</param>
            <param name="list">An optional list of items to override the <paramref name="farmer"/>'s inventory.</param>
            <returns>The number of <see cref="T:StardewValley.Objects.Ring"/>s with the specified <paramref name="id"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.FarmerExtensions.ConsumeRing(StardewValley.Farmer,System.String,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Objects.Ring"/> from the <paramref name="farmer"/>'s inventory.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="id">The <see cref="T:StardewValley.Objects.Ring"/> id.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.FarmerExtensions.ConsumeObject(StardewValley.Farmer,System.String,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Object"/> from the <paramref name="farmer"/>'s inventory.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="id">The <see cref="T:StardewValley.Object"/> id.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="T:DaLion.Core.Framework.Extensions.InventoryExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Inventories.IInventory"/> interface.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.InventoryExtensions.ConsumeRing(StardewValley.Inventories.IInventory,System.String,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Objects.Ring"/> from the <paramref name="items"/>'s inventory.</summary>
            <param name="items">The <see cref="T:StardewValley.Inventories.IInventory"/>.</param>
            <param name="id">The <see cref="T:StardewValley.Objects.Ring"/> id.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.InventoryExtensions.ConsumeObject(StardewValley.Inventories.IInventory,System.String,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Object"/> from the <paramref name="items"/>'s inventory.</summary>
            <param name="items">The <see cref="T:StardewValley.Inventories.IInventory"/>.</param>
            <param name="id">The <see cref="T:StardewValley.Object"/> id.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="T:DaLion.Core.Framework.Extensions.MonsterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Monsters.Monster"/> class.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Bleed(StardewValley.Monsters.Monster,StardewValley.Farmer,System.Int32,System.Int32,System.Int32)">
            <summary>Causes bleeding on the <paramref name="monster"/> for the specified <paramref name="duration"/> and with the specified <paramref name="stacks"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="bleeder">The <see cref="T:StardewValley.Farmer"/> who caused the bleeding.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="stacks">The intensity of the bleeding effect (how many stacks).</param>
            <param name="maxStacks">The max number of allowed stacks.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Unbleed(StardewValley.Monsters.Monster)">
            <summary>Removes bleeding from the <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsBleeding(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is bleeding.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero bleeding stacks, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Burn(StardewValley.Monsters.Monster,StardewValley.Farmer,System.Int32)">
            <summary>Burns the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="burner">The <see cref="T:StardewValley.Farmer"/> who inflicted the burn.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Unburn(StardewValley.Monsters.Monster)">
            <summary>Removes burn from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsBurning(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is burning.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero burn timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Chill(StardewValley.Monsters.Monster,System.Int32,System.Single,System.Single,System.Boolean)">
            <summary>Chills the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="intensity">The intensity of the slow effect.</param>
            <param name="freezeThreshold">The required slow intensity total for the target to be considered frozen.</param>
            <param name="playSoundEffect">Whether to play the chill sound effect.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Unchill(StardewValley.Monsters.Monster)">
            <summary>Removes chilled status from the <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsChilled(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is chilled.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns>The <paramref name="monster"/>'s chilled flag.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Fear(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Fears the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Unfear(StardewValley.Monsters.Monster)">
            <summary>Removes fear from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsFeared(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is feared.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero fear timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Freeze(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Freezes the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Defrost(StardewValley.Monsters.Monster)">
            <summary>Removes frozen status from the <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsFrozen(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is frozen.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero freeze stacks, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Poison(StardewValley.Monsters.Monster,StardewValley.Farmer,System.Int32,System.Int32,System.Int32)">
            <summary>Poisons the <paramref name="monster"/> for the specified <paramref name="duration"/> and with the specified <paramref name="stacks"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="poisoner">The <see cref="T:StardewValley.Farmer"/> who inflicted the poison.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="stacks">The intensity of the poison effect (how many stacks).</param>
            <param name="maxStacks">This number of stacks will immediately kill the monster.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Detox(StardewValley.Monsters.Monster)">
            <summary>Removes poison from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsPoisoned(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is poisoned.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero poison stacks, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Slow(StardewValley.Monsters.Monster,System.Int32,System.Single)">
            <summary>Slows the <paramref name="monster"/> for the specified <paramref name="duration"/> and with the specified <paramref name="intensity"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="intensity">The intensity of the slow effect.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Unslow(StardewValley.Monsters.Monster)">
            <summary>Removes slow from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsSlowed(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is slowed.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero slow timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.Stun(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Stuns the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.IsStunned(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is stunned.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero stun timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.MonsterExtensions.GetOverheadOffset(StardewValley.Monsters.Monster)">
            <summary>Checks the pixel offset to clear the <paramref name="monster"/>s head.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns>The X and Y offsets as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="T:DaLion.Core.Framework.Extensions.StringExtensions">
            <summary>Extensions for the <see cref="T:System.Int32"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Extensions.StringExtensions.IsRingId(System.String)">
            <summary>Determines whether the number corresponds to a valid <see cref="T:StardewValley.Objects.Ring"/> index.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> index.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds any <see cref="T:StardewValley.Objects.Ring"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.BuffsDisplayDrawPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.BuffsDisplayDrawPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.BuffsDisplayDrawPatcher.BuffsDisplayDrawPostfix(System.Collections.Generic.Dictionary{StardewValley.Menus.ClickableTextureComponent,StardewValley.Buff},Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Patch to draw stackable buffs.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.CrabPotCheckForActionPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.CrabPotCheckForActionPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.CrabPotCheckForActionPatcher.CrabPotCheckForActionPrefix(StardewValley.Objects.CrabPot@,System.Boolean@,System.Int32@,System.Boolean@,System.Single@,Microsoft.Xna.Framework.Vector2@,System.Single@,StardewValley.Farmer,System.Boolean)">
            <summary>Prevents remote item pickup when harvested by Hopper.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.DebuffingProjectileBehaviorOnCollisionWithMonsterPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.DebuffingProjectileBehaviorOnCollisionWithMonsterPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.DebuffingProjectileBehaviorOnCollisionWithMonsterPatcher.DebuffingProjectileBehaviorOnCollisionWithMonsterPrefix(StardewValley.Projectiles.DebuffingProjectile,StardewValley.NPC)">
            <summary>Replace vanilla freeze with a better one.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.FarmerTakeDamagePatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.FarmerTakeDamagePatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamagePostfix(StardewValley.Farmer)">
            <summary>Reset seconds-out-of-combat.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.GameLocationExplodePatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.GameLocationExplodePatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.GameLocationExplodePatcher.GameLocationExplodePostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,System.Int32,StardewValley.Farmer)">
            <summary>Patch for Blaster double coal chance + Demolitionist speed burst.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterShouldActuallyMoveAwayFromPlayerPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.MonsterShouldActuallyMoveAwayFromPlayerPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterShouldActuallyMoveAwayFromPlayerPatcher.MonsterShouldActuallyMoveAwayFromPlayerPrefix(StardewValley.Monsters.Monster,System.Boolean@)">
            <summary>Implement fear status.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterTakeDamagePatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.MonsterTakeDamagePatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterTakeDamagePatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterTakeDamagePatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterTakeDamagePatcher.MonsterTakeDamagePrefix(StardewValley.Monsters.Monster,System.Int32@)">
            <summary>Frozen effect.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterTakeDamagePatcher.MonsterTakeDamagePostfix(StardewValley.Farmer)">
            <summary>Reset seconds out of combat.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterUpdatePatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.MonsterUpdatePatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.MonsterUpdatePatcher.MonsterUpdatePrefix(StardewValley.Monsters.Monster,Microsoft.Xna.Framework.GameTime)">
            <summary>Slow and damage-over-time effects.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectCheckForActionOnMachinePatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.ObjectCheckForActionOnMachinePatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectCheckForActionOnMachinePatcher.ObjectCheckForActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Prevents remote item pickup when harvested by Hopper.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectDrawPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.ObjectDrawPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectDrawPatcher.ObjectDrawPrefix(StardewValley.Object,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32,System.Single)">
            <summary>Patch to draw colored Slime Balls.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectOnReadyForHarvestPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.ObjectOnReadyForHarvestPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectOnReadyForHarvestPatcher.ObjectOnReadyForHarvestPostfix(StardewValley.Object)">
            <summary>Patch to make Hopper actually useful.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectPlacementActionPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.ObjectPlacementActionPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.ObjectPlacementActionPatcher.ObjectPlacementActionPostfix(StardewValley.Object)">
            <summary>Patch to make Hopper actually useful.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.SlimeHutchDayUpdatePatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.Patchers.SlimeHutchDayUpdatePatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="M:DaLion.Core.Framework.Patchers.SlimeHutchDayUpdatePatcher.SlimeHutchDayUpdatePostfix(StardewValley.SlimeHutch)">
            <summary>Patch to color Slime Balls.</summary>
        </member>
        <member name="T:DaLion.Core.Framework.SoundBox">
            <summary>A custom <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/> that can be played through the game's <see cref="T:Microsoft.Xna.Framework.Audio.SoundBank"/>.</summary>
        </member>
        <member name="F:DaLion.Core.Framework.SoundBox.Chill">
            <summary>The <see cref="T:DaLion.Core.Framework.SoundBox"/> played when an enemy is chilled.</summary>
        </member>
        <member name="F:DaLion.Core.Framework.SoundBox.Freeze">
            <summary>The <see cref="T:DaLion.Core.Framework.SoundBox"/> played when an enemy is frozen.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.SoundBox.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Core.Framework.SoundBox"/> class.</summary>
            <param name="name">The sound effect name.</param>
        </member>
        <member name="P:DaLion.Core.Framework.SoundBox.Name">
            <summary>Gets the name of the effect.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.SoundBox.PlayLocal(StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32})">
            <summary>Play a game sound for the local player.</summary>
            <param name="location">The location in which the sound is playing, if applicable.</param>
            <param name="position">The tile position from which the sound is playing, or <see langword="null"/> if it's playing throughout the location. Ignored in location is <see langword="null"/>.</param>
            <param name="pitch">The pitch modifier to apply, or <see langword="null"/> for the default pitch.</param>
        </member>
        <member name="M:DaLion.Core.Framework.SoundBox.PlayAll(StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{System.Int32})">
            <summary>Play a game sound for all players who can hear it.</summary>
            <param name="location">The location in which the sound is playing.</param>
            <param name="position">The tile position from which the sound is playing, or <c>null</c> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or <c>null</c> for the default pitch.</param>
        </member>
        <member name="M:DaLion.Core.Framework.SoundBox.PlayAfterDelay(System.Int32,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Int32)">
            <summary>Plays the corresponding <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/> after the specified delay.</summary>
            <param name="delay">The desired delay, in milliseconds.</param>
            <param name="location">The location in which the sound is playing, if applicable.</param>
            <param name="position">The tile position from which the sound is playing, or <see langword="null"/> if it's playing throughout the location.</param>
            <param name="pitch">The pitch modifier to apply, or -1 for the default pitch.</param>
        </member>
        <member name="T:DaLion.Core.Framework.StackableBuff">
            <summary>A <see cref="T:StardewValley.Buff"/> that can be stacked and displays a corresponding counter.</summary>
        </member>
        <member name="M:DaLion.Core.Framework.StackableBuff.#ctor(System.String,System.Func{System.Int32},System.Int32,System.String,System.String,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,StardewValley.Buffs.BuffEffects,System.Boolean,System.String,System.Func{System.Int32,System.String})">
            <inheritdoc cref="T:StardewValley.Buff"/>
        </member>
        <member name="P:DaLion.Core.Framework.StackableBuff.Stacks">
            <summary>Gets the current number of stacks.</summary>
        </member>
        <member name="P:DaLion.Core.Framework.StackableBuff.MaxStacks">
            <summary>Gets the maximum number of stacks for this buff.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.DebugAttribute">
            <summary>Indicates that an implicitly-used marked symbol should only be available in debug mode.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.ImplicitIgnoreAttribute">
            <summary>Indicates that an implicitly-used marked symbol should be ignored unless explicitly instantiated.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.ModConflictAttribute">
            <summary>Indicates to a factory that the implicitly-used marked symbol should not be instantiated when a specified third-party mod is installed.</summary>
        </member>
        <member name="M:DaLion.Shared.Attributes.ModConflictAttribute.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Attributes.ModConflictAttribute"/> class.</summary>
            <param name="uniqueId">The required mod's unique ID.</param>
            <param name="name">A human-readable name for the mod.</param>
        </member>
        <member name="P:DaLion.Shared.Attributes.ModConflictAttribute.UniqueId">
            <summary>Gets the required mod's unique ID.</summary>
        </member>
        <member name="P:DaLion.Shared.Attributes.ModConflictAttribute.Name">
            <summary>Gets the human-readable name of the mod.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.ModRequirementAttribute">
            <summary>Indicates to a factory that the implicitly-used marked symbol should only be instantiated when a third-party mod is installed, or adds third-party mod metadata to an explicitly-instantiated class.</summary>
        </member>
        <member name="M:DaLion.Shared.Attributes.ModRequirementAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Attributes.ModRequirementAttribute"/> class.</summary>
            <param name="uniqueId">The required mod's unique ID.</param>
            <param name="name">A human-readable name for the mod.</param>
            <param name="version">The minimum required version.</param>
        </member>
        <member name="P:DaLion.Shared.Attributes.ModRequirementAttribute.UniqueId">
            <summary>Gets the required mod's unique ID.</summary>
        </member>
        <member name="P:DaLion.Shared.Attributes.ModRequirementAttribute.Name">
            <summary>Gets the human-readable name of the mod.</summary>
        </member>
        <member name="P:DaLion.Shared.Attributes.ModRequirementAttribute.Version">
            <summary>Gets the minimum required version.</summary>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.NpcExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Character"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.NpcExtensions.SetMovingTowardTile(StardewValley.NPC,Microsoft.Xna.Framework.Vector2)">
            <summary>Sets the <paramref name="npc"/> in motion in the direction of the specified <paramref name="tile"/>.</summary>
            <param name="npc">The <see cref="T:StardewValley.NPC"/>.</param>
            <param name="tile">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> tile.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.NpcExtensions.SetMovingTowardTile(StardewValley.NPC,Microsoft.Xna.Framework.Point)">
            <summary>Sets the <paramref name="npc"/> in motion in the direction of the specified <paramref name="tile"/>.</summary>
            <param name="npc">The <see cref="T:StardewValley.NPC"/>.</param>
            <param name="tile">The <see cref="T:Microsoft.Xna.Framework.Point"/> tile.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.NpcExtensions.SetMoving(StardewValley.NPC,DaLion.Shared.Enums.FacingDirection)">
            <summary>Sets the <paramref name="npc"/> in motion in the specified <paramref name="direction"/>.</summary>
            <param name="npc">The <see cref="T:StardewValley.NPC"/>.</param>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.SeasonExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Season"/> enum.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SeasonExtensions.Previous(StardewValley.Season)">
            <summary>Gets the <see cref="T:StardewValley.Season"/> before <paramref name="season"/>.</summary>
            <param name="season">The <see cref="T:StardewValley.Season"/>.</param>
            <returns>The <see cref="T:StardewValley.Season"/> before <paramref name="season"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SeasonExtensions.Next(StardewValley.Season)">
            <summary>Gets the <see cref="T:StardewValley.Season"/> after <paramref name="season"/>.</summary>
            <param name="season">The <see cref="T:StardewValley.Season"/>.</param>
            <returns>The <see cref="T:StardewValley.Season"/> after <paramref name="season"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.BuildingExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Buildings.Building"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetOwner(StardewValley.Buildings.Building)">
            <summary>Gets the <see cref="T:StardewValley.Farmer"/> instance who owns this <paramref name="building"/>.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who constructed the <paramref name="building"/>, or the host of the game session if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.IsOwnedBy(StardewValley.Buildings.Building,StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="building"/> is owned by the specified <see cref="T:StardewValley.Farmer"/>.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="building"/>'s owned value is equal to the unique ID of the <paramref name="farmer"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.SquaredPixelDistance(StardewValley.Buildings.Building,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared pixel distance between this <paramref name="building"/> and the target <paramref name="position"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="position">The target position.</param>
            <returns>The squared pixel distance between <paramref name="building"/> and the <paramref name="position"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.SquaredTileDistance(StardewValley.Buildings.Building,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared tile distance between this <paramref name="building"/> and the target <paramref name="tile"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="tile">The target tile.</param>
            <returns>The squared tile distance between <paramref name="building"/> and the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestTile(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Finds the closest tile from among the specified <paramref name="candidates"/> to this
                <paramref name="building"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Buildings.Building"/>s, if already available.</param>
            <returns>The closest tile from among the specified <paramref name="candidates"/> to this <paramref name="building"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosest``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,Microsoft.Xna.Framework.Vector2},System.Single@,System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest target from among the specified <paramref name="candidates"/> to this
                <paramref name="building"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="!:T"/>s, if already available.</param>
            <param name="getPosition">A delegate to retrieve the tile coordinates of <typeparamref name="T"/>.</param>
            <param name="distance">The actual tile distance to the closest candidate found.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The closest target from among the specified <paramref name="candidates"/> to this <paramref name="building"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestBuilding``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Buildings.Building"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of the
                specified subtype.
            </summary>
            <typeparam name="TBuilding">A subtype of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="!:TBuilding"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestCharacter``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Character"/> of subtype <typeparamref name="TCharacter"/> to this
                <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TCharacter">A subtype of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="!:TCharacter"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestFarmer(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Character"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
                This version is required as <see cref="T:StardewValley.Farmer"/> references are stored in a different field of <see cref="T:StardewValley.GameLocation"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestObject``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Object"/> of subtype <typeparamref name="TObject"/> to this
                <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TObject">A subtype of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="!:TObject"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestTerrainFeature``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of subtype <typeparamref name="TTerrainFeature"/> to this
                <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TTerrainFeature">A subtype of <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="!:TTerrainFeature"/>, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.CharacterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Character"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.SquaredPixelDistance(StardewValley.Character,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared pixel distance between this <paramref name="character"/> and the target <paramref name="position"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="position">The target position.</param>
            <returns>The squared pixel distance between <paramref name="character"/> and the <paramref name="position"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.SquaredTileDistance(StardewValley.Character,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared tile distance between this <paramref name="character"/> and the target <paramref name="tile"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="tile">The target tile.</param>
            <returns>The squared tile distance between <paramref name="character"/> and the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestTile(StardewValley.Character,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Finds the closest tile from among the specified <paramref name="candidates"/> to this
                <paramref name="character"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Buildings.Building"/>s, if already available.</param>
            <returns>The closest tile from among the specified <paramref name="candidates"/> to this <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosest``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,Microsoft.Xna.Framework.Vector2},System.Single@,System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest target from among the specified <paramref name="candidates"/> to this
                <paramref name="character"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="!:T"/>s, if already available.</param>
            <param name="getPosition">A delegate to retrieve the pixel coordinates of <typeparamref name="T"/>.</param>
            <param name="distance">The actual tile distance to the closest candidate found.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The closest target from among the specified <paramref name="candidates"/> to this <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestBuilding``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Buildings.Building"/> of subtype <typeparamref name="TBuilding"/> to this
                <paramref name="character"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TBuilding">A subtype of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="!:TBuilding"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestCharacter``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Character"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of the
                specified subtype.
            </summary>
            <typeparam name="TCharacter">A subtype of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="!:TCharacter"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestFarmer(StardewValley.Character,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="character"/> in the current
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Farmer"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="character"/>.</returns>
            <remarks>This version is required as <see cref="T:StardewValley.Farmer"/> references are stored in a different field of <see cref="T:StardewValley.GameLocation"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestObject``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Object"/> of subtype <typeparamref name="TObject"/> to this
                <paramref name="character"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TObject">A subtype of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="!:TObject"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestTerrainFeature``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of subtype <typeparamref name="TTerrainFeature"/> to this
                <paramref name="character"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TTerrainFeature">A subtype of <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="!:TTerrainFeature"/>s if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.FishPondExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Buildings.FishPond"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FishPondExtensions.HasUnlockedFinalPopulationGate(StardewValley.Buildings.FishPond)">
            <summary>Determines whether the <paramref name="pond"/>'s population has been fully unlocked.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns><see langword="true"/> if the last unlocked population gate matches the last gate in the <see cref="T:StardewValley.GameData.FishPonds.FishPondData"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.Game1Extensions">
            <summary>Extensions for the <see cref="T:StardewValley.Game1"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.GetCurrentDateNumber(StardewValley.Game1)">
            <summary>Gets a representation of the current date as a single number.</summary>
            <param name="game1">The current <see cref="T:StardewValley.Game1"/> session.</param>
            <returns>A number representation of the current in-game day.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.IsCommunityCenterComplete(StardewValley.Game1)">
            <summary>Determines whether the Community Center has been completed in the current save.</summary>
            <param name="game1">The current <see cref="T:StardewValley.Game1"/> session.</param>
            <returns><see langword="true"/> if the Community Center is complete, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.ShouldTimePass(StardewValley.Game1)">
            <summary>Determines whether the game is active and time should pass.</summary>
            <param name="game1">The current <see cref="T:StardewValley.Game1"/> session.</param>
            <returns><see langword="true"/> if the game is active and time should pass, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.GetTotalSoldByPlayer(StardewValley.Game1,StardewValley.Farmer)">
            <summary>Gets the total value of shipped items by the specified <paramref name="farmer"/> during the current game day.</summary>
            <param name="game1">The current <see cref="T:StardewValley.Game1"/> session.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The total value of shipped items by the <paramref name="farmer"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.GetLocalizedCharacterName(StardewValley.Game1,System.String)">
            <summary>Gets the localized display name of the <see cref="T:StardewValley.NPC"/> with the specified <paramref name="name"/>.</summary>
            <param name="game1">The current <see cref="T:StardewValley.Game1"/> session.</param>
            <param name="name">The public name of an <see cref="T:StardewValley.NPC"/>.</param>
            <returns>The localized display name of the <see cref="T:StardewValley.NPC"/> with the specified <paramref name="name"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.GameLocationExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.IsEnemyArea(StardewValley.GameLocation)">
            <summary>Determines whether this <paramref name="location"/> is a dungeon.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <returns><see langword="true"/> if the <paramref name="location"/> is a <see cref="T:StardewValley.Locations.MineShaft"/> or one of several recognized dungeon locations, otherwise <see langword="false"/>.</returns>
            <remarks>Includes locations from Stardew Valley Expanded, Ridgeside Village and Moon Misadventures.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.IsActionableTile(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer)">
            <summary>Determines whether there is anything to interact with in the specified <paramref name="tile"></paramref>.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="tile">The tile's position as <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="tile"/> has action properties or contains any actionable object or actor, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.ItemExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Item"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsArtisanGood(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is an artisan good.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is created by an artisan machine, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsWildBerry(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is Salmonberry or Blackberry.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is Salmonberry or Blackberry, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsMushroom(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a mushroom.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a mushroom, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsSyrup(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a syrup.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a syrup, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsFish(StardewValley.Item)">
            <summary>
                Determines whether the <paramref name="item"/> is a fish typically caught with a
                <see cref="T:StardewValley.Tools.FishingRod"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is any fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsTrapFish(StardewValley.Item)">
            <summary>
                Determines whether the <paramref name="item"/> is a fish typically caught with a
                <see cref="T:StardewValley.Objects.CrabPot"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a <see cref="T:StardewValley.Objects.CrabPot"/> fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsBossFish(StardewValley.Item)">
            <summary>
                Determines whether the <paramref name="item"/> is a legendary fish.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a legendary fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsTrash(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is trash.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is any trash item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsAlgae(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is algae or seaweed.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is any of the three algae, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsGemOrMineral(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a gem or mineral.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a gem or mineral, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsForagedMineral(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a foraged mineral.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a Quartz, Fire Quartz, Frozen Tear or Earth Crystal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsBeachForage(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a forage item typically found at the beach.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a forage item typically found at the beach, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsStone(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a simple Stone.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is a mining node not containing only stone, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsTwig(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a twig.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is twig, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.IsWeed(StardewValley.Item)">
            <summary>Determines whether the <paramref name="item"/> is a weed.</summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <returns><see langword="true"/> if the <paramref name="item"/> is weed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawFarmingTooltip(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.String)">
            <summary>Draws the Farming buff icon and text.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
            <param name="value">The magnitude of the buff.</param>
            <param name="overrideText">Optional <see cref="T:System.String"/> with which to override the vanilla tooltip text.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawFishingIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws the Fishing buff icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawAttackIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws attack icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawDefenseIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws defense icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawWeightIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws weight icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawCritChanceIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws critical hit chance icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawCritPowerIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws critical hit power icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawSpeedIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws attack speed icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawImmunityIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws immunity icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawMagnetismIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws magnetism icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SpriteBatchExtensions.DrawEnchantmentIcon(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws magnetism icon.</summary>
            <param name="batch">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="position">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> position.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.StringExtensions">
            <summary>Extensions for the <see cref="T:System.Int32"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsWildBerryId(System.String)">
            <summary>Determines whether <paramref name="id"/> corresponds to Salmonberry or Blackberry.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to Salmonberry or Blackberry, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsMushroomId(System.String)">
            <summary>Determines whether <paramref name="id"/> corresponds to a mushroom item.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to a mushroom item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsSyrupId(System.String)">
            <summary>Determines whether <paramref name="id"/> corresponds to a syrup item.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to a syrup item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsAlgaeId(System.String)">
            <summary>Determines whether the <paramref name="id"/> corresponds to an algae or seaweed.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to an algae or seaweed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsTrashId(System.String)">
            <summary>Determines whether the object <paramref name="id"/> corresponds to a trash id.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>s
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds any trash id, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsTrapFishId(System.String)">
            <summary>
                Determines whether object <paramref name="id"/> corresponds to a fish id usually caught with a
                <see cref="T:StardewValley.Objects.CrabPot"/>.
            </summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to a <see cref="T:StardewValley.Objects.CrabPot"/> fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsBossFishId(System.String)">
            <summary>
                Determines whether object <paramref name="id"/> corresponds to a legendary fish id.
            </summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to a legendary fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.StringExtensions.IsOreId(System.String)">
            <summary>Determines whether the object <paramref name="id"/> corresponds to any metallic ore.</summary>
            <param name="id">A <see cref="T:StardewValley.Item"/> ID.</param>
            <returns><see langword="true"/> if the <paramref name="id"/> corresponds to either copper, iron, gold, iridium or radioactive ore, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.FarmAnimalExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.FarmAnimal"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmAnimalExtensions.GetOwner(StardewValley.FarmAnimal)">
            <summary>Gets the <see cref="T:StardewValley.Farmer"/> instance who owns this <paramref name="animal"/>.</summary>
            <param name="animal">The <see cref="T:StardewValley.FarmAnimal"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who purchased or owned the parent of the <paramref name="animal"/>, or the host of the game session if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmAnimalExtensions.IsOwnedBy(StardewValley.FarmAnimal,StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="animal"/> is owned by the specified <see cref="T:StardewValley.Farmer"/>.</summary>
            <param name="animal">The <see cref="T:StardewValley.FarmAnimal"/>.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="animal"/>'s owner ID  value is equal to the unique ID of the <paramref name="farmer"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.GetFacingTile(StardewValley.Farmer)">
            <summary>Gets the tile immediately in front of the <paramref name="farmer"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Vector2"/> coordinates of the tile immediately in front of the <paramref name="farmer"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.FaceTowardsTile(StardewValley.Farmer,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Changes the <paramref name="farmer"/>'s <see cref="T:DaLion.Shared.Enums.FacingDirection"/> in order to face the desired
                <paramref name="tile"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="tile">The tile to face.</param>
            <returns>The new <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.NumMonsterSlayerQuestsCompleted(StardewValley.Farmer)">
            <summary>Counts the number of completed Monster Eradication goals.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The number of completed Monster Eradication goals.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.MeleeWeaponExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Tools.MeleeWeapon"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MeleeWeaponExtensions.IsDagger(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/> is a dagger.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a dagger, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MeleeWeaponExtensions.IsClub(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/> is a club.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a club, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.VolcanoDungeonExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Locations.VolcanoDungeon"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.VolcanoDungeonExtensions.IsTreasureOrSafeRoom(StardewValley.Locations.VolcanoDungeon)">
            <summary>Determines whether the current mine level is a safe level; i.e. shouldn't spawn any monsters.</summary>
            <param name="volcano">The <see cref="T:StardewValley.Locations.VolcanoDungeon"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="volcano"/>'s level is 5 (Dwarf shop) or 10 (Forge summit), otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.MineShaftExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Locations.MineShaft"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MineShaftExtensions.IsTreasureOrSafeRoom(StardewValley.Locations.MineShaft)">
            <summary>Determines whether the current mine level is a safe level; i.e. shouldn't spawn any monsters.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="shaft"/>'s level is a regular mine level multiple of 10 or a skull cavern level with either a Qi event or the treasure net flag, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MineShaftExtensions.GetLadderTiles(StardewValley.Locations.MineShaft)">
            <summary>Finds all tiles in a mine map containing either a ladder or sink-hole.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/> instance.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the <see cref="T:Microsoft.Xna.Framework.Vector2"/> tiles that contain a ladder or sink-hole.</returns>
            <remarks>Credit to <c>pomepome</c>.</remarks>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.MonsterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Monsters.Monster"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsSlime(StardewValley.Monsters.Monster)">
            <summary>
                Determines whether the <paramref name="monster"/> is an instance of <see cref="T:StardewValley.Monsters.GreenSlime"/> or
                <see cref="T:StardewValley.Monsters.BigSlime"/>.
            </summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is a <see cref="T:StardewValley.Monsters.GreenSlime"/> or <see cref="T:StardewValley.Monsters.BigSlime"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsUndead(StardewValley.Monsters.Monster)">
            <summary>Determines whether the <paramref name="monster"/> is an undead being or void spirit.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is an undead being or void spirit, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsGlider(StardewValley.Monsters.Monster)">
            <summary>Determines whether the <paramref name="monster"/> is a flying enemy (i.e., glider).</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has the <c>isGlider</c> flag or is a <see cref="T:StardewValley.Monsters.Ghost"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.CanBeDamaged(StardewValley.Monsters.Monster)">
            <summary>Determines whether the <paramref name="monster"/> is in a state that allows it to suffer damager.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is not in an invincible state, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsArmored(StardewValley.Monsters.Monster)">
            <summary>Determines whether the <paramref name="monster"/> is in a state that allows it to suffer damager.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is not in an invincible state, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsCharacterWithinThreshold(StardewValley.Monsters.Monster,StardewValley.Character)">
            <summary>Determines whether the specified <paramref name="character"/> is within the moving threshold of this <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="other">The target <see cref="T:StardewValley.Character"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/>'s distance to the <paramref name="other"/> is less than it's aggro threshold, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.Die(StardewValley.Monsters.Monster,StardewValley.Farmer)">
            <summary>Causes the <paramref name="monster"/> to die, triggering item drops and quest completion checks as appropriate.</summary>
            <param name="monster">The poor <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="killer">The murderous <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.SquaredPixelDistance(StardewValley.TerrainFeatures.TerrainFeature,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared pixel distance between this <paramref name="terrainFeature"/> and the target <paramref name="position"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="position">The target tile.</param>
            <returns>The squared pixel distance between <paramref name="terrainFeature"/> and the <paramref name="position"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.SquaredTileDistance(StardewValley.TerrainFeatures.TerrainFeature,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared tile distance between this <paramref name="terrainFeature"/> and the target <paramref name="tile"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="tile">The target tile.</param>
            <returns>The squared tile distance between <paramref name="terrainFeature"/> and the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestTile(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Finds the closest tile from among the specified <paramref name="candidates"/> to this
                <paramref name="terrainFeature"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>s, if already available.</param>
            <returns>The closest tile from among the specified <paramref name="candidates"/> to this <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosest``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,Microsoft.Xna.Framework.Vector2},System.Single@,System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest target from among the specified <paramref name="candidates"/> to this
                <paramref name="terrainFeature"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="!:T"/>s, if already available.</param>
            <param name="getPosition">A delegate to retrieve the tile coordinates of <typeparamref name="T"/>.</param>
            <param name="distance">The actual tile distance to the closest candidate found.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The closest target from among the specified <paramref name="candidates"/> to this <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestBuilding``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Buildings.Building"/> of subtype <typeparamref name="TBuilding"/> to this
                <paramref name="terrainFeature"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TBuilding">A subtype of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="!:TBuilding"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestCharacter``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.NPC"/> of subtype <typeparamref name="TCharacter"/> to this
                <paramref name="terrainFeature"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TCharacter">A subtype of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="!:TCharacter"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestFarmer(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="terrainFeature"/> in the current
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Farmer"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestObject``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Object"/> of subtype <typeparamref name="TObject"/> to this
                <paramref name="terrainFeature"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TObject">A subtype of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="!:TObject"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestTerrainFeature``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of
                the specified subtype.
            </summary>
            <typeparam name="TTerrainFeature">A subtype of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="!:TTerrainFeature"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.SObjectExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsForage(StardewValley.Object)">
            <summary>Checks whether the <paramref name="object"/> is a spawned forageable item.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a forage item and is a spawned object, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetOwner(StardewValley.Object)">
            <summary>Gets the <see cref="T:StardewValley.Farmer"/> instance who owns this <paramref name="object"/>.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who purchased, found or crafted the <paramref name="object"/>, or the host of the game session if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsOwnedBy(StardewValley.Object,StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="object"/> is owned by the specified <see cref="T:StardewValley.Farmer"/>.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/>'s owner value is equal to the unique ID of the <paramref name="farmer"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.SquaredPixelDistance(StardewValley.Object,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared pixel distance between this <paramref name="object"/> and the target <paramref name="position"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="position">The target tile.</param>
            <returns>The squared pixel distance between <paramref name="object"/> and the <paramref name="position"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.SquaredTileDistance(StardewValley.Object,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets the squared tile distance between this <paramref name="object"/> and the target <paramref name="tile"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="tile">The target tile.</param>
            <returns>The squared tile distance between <paramref name="object"/> and the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestTile(StardewValley.Object,System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Vector2})">
            <summary>
                Finds the closest tile from among the specified <paramref name="candidates"/> to this
                <paramref name="object"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Object"/>s, if already available.</param>
            <returns>The closest tile from among the specified <paramref name="candidates"/> to this <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosest``1(StardewValley.Object,System.Collections.Generic.IEnumerable{``0},System.Func{``0,Microsoft.Xna.Framework.Vector2},System.Single@,System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest target from among the specified <paramref name="candidates"/> to this
                <paramref name="object"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="!:T"/>s, if already available.</param>
            <param name="getPosition">A delegate to retrieve the tile coordinates of <typeparamref name="T"/>.</param>
            <param name="distance">The actual tile distance to the closest candidate found.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The closest target from among the specified <paramref name="candidates"/> to this <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestBuilding``1(StardewValley.Object,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Buildings.Building"/> of subtype <typeparamref name="TBuilding"/> to this
                <paramref name="object"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TBuilding">A subtype of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="!:TBuilding"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestCharacter``1(StardewValley.Object,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Character"/> of subtype <typeparamref name="TCharacter"/> to this <paramref name="object"/>
                in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TCharacter">A subtype of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="!:TCharacter"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestFarmer(StardewValley.Object,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="object"/> in the current
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Farmer"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="object"/>.</returns>
            <remarks>This version is required as <see cref="T:StardewValley.Farmer"/> references are stored in a different field of <see cref="T:StardewValley.GameLocation"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestObject``1(StardewValley.Object,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Object"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of the
                specified subtype.
            </summary>
            <typeparam name="TObject">A subtype of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="!:TObject"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestTerrainFeature``1(StardewValley.Object,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of subtype <typeparamref name="TTerrainFeature"/> to this
                <paramref name="object"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TTerrainFeature">A subtype of <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="candidates">The candidate <see cref="!:TTerrainFeature"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.RectangleExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.RectangleExtensions.GetInnerTiles(Microsoft.Xna.Framework.Rectangle)">
            <summary>Enumerates all the tiles within the <paramref name="rectangle"/>.</summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> represent the coordinates of tiles contained by the <paramref name="rectangle"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.RectangleExtensions.Highlight(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Vector2})">
            <summary>Highlights the <paramref name="rectangle"/> with the specified <paramref name="color"/>.</summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="color">Border color.</param>
            <param name="batch"><see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="offset">An optional offset.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.RectangleExtensions.DrawBorder(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32)">
            <summary>Draws the <paramref name="rectangle"/>'s border.</summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="color">Border color.</param>
            <param name="batch"><see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="thickness">Border thickness.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.ToolExtensions">
            <summary>Extensions for <see cref="T:StardewValley.Tool"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ToolExtensions.IsScythe(StardewValley.Tool)">
            <summary>Determines whether the specified <paramref name="tool"/> is a scythe.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <returns><see langword="true"/> if the <paramref name="tool"/> is a scythe, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ToolExtensions.HasAnyEnchantmentOf(StardewValley.Tool,System.Type[])">
            <summary>Determines whether the specified <paramref name="tool"/> contains any <see cref="T:StardewValley.Enchantments.BaseEnchantment"/> of the specified <paramref name="enchantmentTypes"/>.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <param name="enchantmentTypes">The candidate <see cref="T:StardewValley.Enchantments.BaseEnchantment"/> types to search for.</param>
            <returns><see langword="true"/> if the <paramref name="tool"/> contains at least one enchantment of the specified <paramref name="enchantmentTypes"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.Vector2Extensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Vector2"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetPixelPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the <paramref name="tile"/>'s pixel position relative to the top-left corner of the map.</summary>
            <param name="tile">The tile.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> which represents the <c>X</c> and <c>Y</c> coordinates of the <paramref name="tile"/>'s pixel position.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetAbsoluteTileArea(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing the area in absolute pixels from the map's origin to the
                <paramref name="tile"/>.
            </summary>
            <param name="tile">The tile.</param>
            <returns>A square <see cref="T:Microsoft.Xna.Framework.Rectangle"/> of side-length <see cref="F:StardewValley.Game1.tileSize"/> which represents the area of one game tile and originating at the <paramref name="tile"/>'s pixel position.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetNextTile(Microsoft.Xna.Framework.Vector2,DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the next tile in the specified <paramref name="direction"/>.</summary>
            <param name="tile">The tile.</param>
            <param name="direction">A <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The next tile in the <paramref name="direction"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetNextTile(Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>Gets the next tile in the specified <paramref name="facingDirection"/>.</summary>
            <param name="tile">The tile.</param>
            <param name="facingDirection">An integer facing direction.</param>
            <returns>The next tile in the <paramref name="facingDirection"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetNextTile(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the next tile in the specified <paramref name="direction"/>.</summary>
            <param name="tile">The tile.</param>
            <param name="direction">A <see cref="T:Microsoft.Xna.Framework.Vector2"/> direction.</param>
            <returns>The next tile in the <paramref name="direction"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.ToFacingDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the general <see cref="T:DaLion.Shared.Enums.FacingDirection"/> pointed by the <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The corresponding <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.DoubleExtensions">
            <summary>Extensions for the primitive <see cref="T:System.Double"/> type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.DoubleExtensions.Approx(System.Double,System.Double,System.Nullable{System.Double})">
            <summary>Determines whether the <paramref name="a"/> and <paramref name="b"/> are approximately equal, with uncertainty <paramref name="eps"/>.</summary>
            <param name="a">The first <see cref="T:System.Double"/> value.</param>
            <param name="b">The second <see cref="T:System.Double"/> value.</param>
            <param name="eps">The uncertainty.</param>
            <returns><see langword="true"/> if the difference between <paramref name="a"/> and <paramref name="b"/> is less than a factor of <c>1E-15</c>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.FloatExtensions">
            <summary>Extensions for the primitive <see cref="T:System.Single"/> type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.FloatExtensions.Approx(System.Single,System.Single,System.Nullable{System.Single})">
            <summary>Determines whether the <paramref name="a"/> and <paramref name="b"/> are approximately equal, with uncertainty <paramref name="eps"/>.</summary>
            <param name="a">The first <see cref="T:System.Single"/> value.</param>
            <param name="b">The second <see cref="T:System.Single"/> value.</param>
            <param name="eps">The uncertainty.</param>
            <returns><see langword="true"/> if the difference between <paramref name="a"/> and <paramref name="b"/> is less than a factor of <c>1E-6</c>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.CollectionExtensions">
            <summary>Extensions for generic collections of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Determines whether the <paramref name="collection"/> contains any of the specified <paramref name="items"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains at least one of the specified <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the <paramref name="collection"/> contains any of the enumerated <paramref name="items"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains at least one of the specified <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Determines whether the <paramref name="collection"/> contains all of the specified <paramref name="items"/>.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains all <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the <paramref name="collection"/> contains all of the enumerated <paramref name="items"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains all <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsType``1(System.Collections.Generic.ICollection{``0},System.Type)">
            <summary>Determines whether a <paramref name="collection"/> contains any instance of the given type.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="type">The type to search for. Should be a sub-type of <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains at least one element of the specified <paramref name="type"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.TryRemoveType``1(System.Collections.Generic.ICollection{``0},System.Type,``0@)">
            <summary>Removes the first instance of a given type from a <paramref name="collection"/>.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="type">The type to search for.</param>
            <param name="removed">The removed instance.</param>
            <returns><see langword="true"/> if an instance was successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.RemoveTypes``1(System.Collections.Generic.ICollection{``0},System.Type[])">
            <summary>
                Removes the first instance of each of the given <paramref name="types"/> from a
                <paramref name="collection"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="types">The types to search for.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.AddOrReplace``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Adds the specified <paramref name="item"/> to the <paramref name="collection"/>, or moves it to the top
                if already contained.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="item">The item to add.</param>
            <returns>
                <see langword="true"/> if the <paramref name="collection"/> did not yet contain the <paramref name="item"/>,
                otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.AreAllEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Determines whether all elements in the <paramref name="collection"/> are equal.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>, which should implements <see cref="T:System.IEquatable`1"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="comparer">Optional <see cref="T:System.Collections.Generic.IComparer`1"/> object to define the equality between elements in the <paramref name="collection"/>.</param>
            <returns><see langword="true"/> if all elements in the <paramref name="collection"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.DictionaryExtensions">
            <summary>Extensions for the <see cref="T:System.Collections.Generic.Dictionary`2"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.TryGetValueAs``3(System.Collections.Generic.IDictionary{``0,``1},``0,``2@)">
            <inheritdoc cref="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.Stringify``2(System.Collections.Generic.Dictionary{``0,``1},System.Char,System.Char)">
            <summary>Flattens pairs in the <paramref name="dictionary"/> into a single string.</summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="keyValueSeparator">The <see cref="T:System.String"/> with which to separate keys and values.</param>
            <param name="pairSeparator">The <see cref="T:System.String"/> with which to separate <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.</param>
            <returns>The entire contents of the <paramref name="dictionary"/> as one <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            <summary>
                Adds the <paramref name="value"/> to the <paramref name="dictionary"/> if the corresponding
                <paramref name="key"/> is not yet present, or update the current value according to the some
                <paramref name="aggregator"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="key">The key.</param>
            <param name="value">They value.</param>
            <param name="aggregator">A function that defines how items should be aggregated in case the key does exit.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1},System.Func{``1,``1,``1})">
            <summary>
                Adds the <paramref name="pair"/> to the <paramref name="dictionary"/> if its key is not yet present, or
                update the current value according to the specified <paramref name="aggregator"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="pair">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <param name="aggregator">A function that defines how items should be aggregated in case the pair's key does exit.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.MaxKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Gets the key with the highest value in the <paramref name="dictionary"/>.</summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>The key corresponding to the highest value in the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.MinKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Gets the key with the lowest value in the <paramref name="dictionary"/>.</summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>, which should implement <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>The key corresponding to the lowest value in the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.EnumerableExtensions">
            <summary>Extensions for generic enumerations of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Applies an <paramref name="action"/> to each item in the <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">An action to apply.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.ArgMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Finds the item which maximizes the given <paramref name="predicate"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <typeparam name="TComparable">The type returned by the <paramref name="predicate"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="predicate">A predicate which must return <see cref="T:System.IComparable"/>.</param>
            <returns>The <typeparamref name="T"/> item in the enumerable which yields the highest <typeparamref name="TComparable"/> predicate result.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.ArgMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Finds the item which minimizes the given <paramref name="predicate"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <typeparam name="TComparable">The type returned by the <paramref name="predicate"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="predicate">A predicate which must return <see cref="T:System.IComparable"/>.</param>
            <returns>The <typeparamref name="T"/> item in the enumerable which yields the lowest <typeparamref name="TComparable"/> predicate result.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Filters out <see langword="null"/> references from the <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains only the non-null references of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>Filters out <see langword="null"/> values from the <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains only the non-null values of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.Choose``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>Selects a random value from amongst the specified <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
            <returns>A random <typeparamref name="T"/> element from within <paramref name="enumerable"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Calculates the standard deviation of the <paramref name="values"/>.</summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Calculates the standard deviation of the <paramref name="values"/>.</summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Single"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Calculates the standard deviation of the <paramref name="values"/>.</summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Double"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Calculates the standard deviation the <paramref name="values"/>.</summary>
            <typeparam name="TEnum">A type of <see cref="T:System.Enum"/>.</typeparam>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.ListExtensions">
            <summary>Extensions for generic lists of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.SortDescending``1(System.Collections.Generic.List{``0})">
            <summary>Sorts the <paramref name="list"/> in reverse order.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>. <paramref name="T"/> must be <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="list">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.IComparable`1"/>s.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IsIndexInBounds``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Determines whether the specified <paramref name="index"/> is within the bounds of the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="index">The <see cref="T:System.Int32"/> index.</param>
            <returns><see langword="true"/> if <paramref name="index"/> is greater than or equal to zero, and less than the size of the <paramref name="list"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IndexOfMax``1(System.Collections.Generic.IList{``0})">
            <summary>Finds the index of the highest-valued item in the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The integer index of the element in the <paramref name="list"/> wit the highest value.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IndexOfMin``1(System.Collections.Generic.IList{``0})">
            <summary>Finds the index of the lowest-valued item in the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The integer index of the element in the <paramref name="list"/> wit the lowest value.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Move``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Moves the item at position <paramref name="oldIndex"/> to position <paramref name="newIndex"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="oldIndex">The current position.</param>
            <param name="newIndex">The new position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Move``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>Moves the specified <paramref name="item"/> to position <paramref name="newIndex"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="item">The item to be moved.</param>
            <param name="newIndex">The new position.</param>
            <returns><see langword="true"/> if a matching item was found and moved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Move``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Moves the first item in the list that matches the <paramref name="predicate"/> to position
                <paramref name="newIndex"/>.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="predicate">A delegate that identifies the item to be moved.</param>
            <param name="newIndex">The new position.</param>
            <returns><see langword="true"/> if a matching item was moved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Swaps the items at the specified positions.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="firstIndex">The index of the first item to be swapped.</param>
            <param name="secondIndex">The index of the second item to be swapped.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>Swap the positions of the specified items.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="first">The first item to be swapped.</param>
            <param name="second">The second item to be swapped.</param>
            <exception cref="T:System.InvalidOperationException">If either <paramref name="first"/> or <paramref name="second"/> are not found in the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftRight``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Shifts all items <paramref name="count"/> units to the right.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftLeft``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Shifts all items <paramref name="count"/> units to the left.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftUntilEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Shifts the elements in <paramref name="list"/> to the left until they match the specified
                <paramref name="pattern"/>.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="pattern">A pattern of elements to match.</param>
            <returns>The number of left shifts that were performed.</returns>
            <exception cref="T:System.InvalidOperationException">If the specified <paramref name="pattern"/> does not contain the exact same elements as the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftUntilStartsWith``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Shifts the elements in <paramref name="list"/> to the left until the specified <paramref name="element"/> is
                at index zero.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="element">The element to be placed at index zero.</param>
            <returns>The number of left shifts that were performed.</returns>
            <exception cref="T:System.InvalidOperationException">If the specified <paramref name="element"/> is not found in the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IsPermutationOf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>Determines whether the <paramref name="list"/> is a permutation of some <paramref name="other"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">Some other list.</param>
            <returns><see langword="true"/> if both <paramref name="list"/> and <paramref name="other"/> contain the exact same elements in any order, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Choose``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>Chooses a random element from the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
            <returns>A random element from the <paramref name="list"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>Shuffles the elements in the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Functional.DelegateExtensions">
            <summary>Extensions for <see cref="T:System.Func`1"/> and <see cref="T:System.Action"/> delegates.</summary>
        </member>
        <member name="T:DaLion.Shared.Extensions.Memory.MemoryExtensions">
            <summary>Extensions for <see langword="ref struct"/> instances like <see cref="T:System.Memory`1"/> and <see cref="T:System.Span`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.MemoryExtensions.Split(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>Splits a <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/> into its constituent slices based on the specified <paramref name="splitter"/> <see cref="T:System.Char"/>.</summary>
            <param name="span">A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.</param>
            <param name="splitter">A <see cref="T:System.Char"/>s that will be used to split the <paramref name="span"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> object that can be used to iterate through the substrings within the <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Memory.SpanSplitter">
            <summary>Used for enumerating and accessing slices of <see cref="T:System.ReadOnlySpan`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.#ctor(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> struct.</summary>
            <param name="span">A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.</param>
            <param name="splitter">A <see cref="T:System.Char"/>s that will be used to split the <paramref name="span"/>.</param>
        </member>
        <member name="P:DaLion.Shared.Extensions.Memory.SpanSplitter.Current">
            <summary>Gets the slice in the <see cref="T:System.ReadOnlySpan`1"/> at the current position of the enumerator.</summary>
        </member>
        <member name="P:DaLion.Shared.Extensions.Memory.SpanSplitter.Length">
            <summary>Gets the number of Slices in the <see cref="T:System.ReadOnlySpan`1"/>.</summary>
        </member>
        <member name="P:DaLion.Shared.Extensions.Memory.SpanSplitter.Item(System.Int32)">
            <summary>Gets the slice at the specified <paramref name="index"/>.</summary>
            <param name="index">A <see cref="T:System.Int32"/> index.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.</summary>
            <returns>A <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> object that can be used to iterate through the substrings within the <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.MoveNext(System.Int32)">
            <summary>Advances the enumerator by <paramref name="count"/> elements.</summary>
            <param name="count">The number of advancements to perform.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Memory.SpanExtensions">
            <summary>Extensions for the <see cref="T:System.ReadOnlySpan`1"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanExtensions.IndexOfWhitespace(System.ReadOnlySpan{System.Char})">
            <summary>Gets the index of the first whitespace character.</summary>
            <param name="span">A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>.</param>
            <returns>The index of the first whitespace character, or -1 if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanExtensions.Reverse``1(System.ReadOnlySpan{``0})">
            <summary>Reverses the sequence of the elements in the entire span.</summary>
            <typeparam name="T">The type contained in the span.</typeparam>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.RandomExtensions">
            <summary>Extensions for the <see cref="T:System.Random"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>Returns a random <see cref="T:System.Single"/> value that is greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A <see cref="T:System.Single"/> that is greater than or equal to minValue and less than maxValue.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>Returns a random <see cref="T:System.Double"/> value that is greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A <see cref="T:System.Double"/> that is greater than or equal to minValue and less than maxValue.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>Generates a random boolean value with the the specified probability of success.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="p">The p of success (i.e., <see langword="true"/>).</param>
            <returns><see langword="true"/> or <see langword="false"/> values with a Binomial distribution and success probability <paramref name="p"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>Samples a random decimal value from a Gaussian distribution with specified <paramref name="mean"/> and <paramref name="stddev"/> using the Box-Muller Transform.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="mean">The mean of the Gaussian distribution.</param>
            <param name="stddev">The standard deviation of the Gaussian distribution.</param>
            <returns>A sample from the resulting Gaussian distribution.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.Choose``1(System.Random,``0[])">
            <summary>Selects a random <typeparamref name="T"/> object from the available <paramref name="choices"/>.</summary>
            <typeparam name="T">The type of the objects to choose from.</typeparam>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="choices">The available choices.</param>
            <returns>A <typeparamref name="T"/> value from the available <paramref name="choices"/>, selected at random.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.AssemblyExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.Assembly"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.AssemblyExtensions.IsDebugBuild(System.Reflection.Assembly)">
            <summary>Checks whether the <paramref name="assembly"/> was built in Debug mode.</summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/>.</param>
            <returns><see langword="true"/> if the <paramref name="assembly"/> contains the 'IsJITTrackingEnabled' attribute, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.AssemblyExtensions.CalculateMd5(System.Reflection.Assembly)">
            <summary>Calculate MD5 checksum for the <paramref name="assembly"/>.</summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/>.</param>
            <returns>The <paramref name="assembly"/>'s MD5 checksum as <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.FieldInfo"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.GetFullName(System.Reflection.FieldInfo)">
            <summary>The full name of the <paramref name="field"/>, including the declaring type.</summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.String"/> representation of the <paramref name="field"/>'s qualified full name.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileUnboundFieldGetterDelegate``2(System.Reflection.FieldInfo)">
            <summary>
                Creates a <see cref="T:System.Func`2"/> delegate for the specified unbound instance
                <paramref name="field"/> getter, performing type conversions if necessary.
            </summary>
            <typeparam name="TInstance">The type of the instance that will be received by the delegate, which should match a type assignable to the declaring type of the <paramref name="field"/>.</typeparam>
            <typeparam name="TField">The type that will be returned by the delegate, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Func`2"/> delegate which takes in an instance of type <typeparamref name="TInstance"/> and returns the <typeparamref name="TField"/> value of the corresponding <paramref name="field"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
            <exception cref="T:System.InvalidOperationException">If <typeparamref name="TInstance"/> does not match the declaring type of the <paramref name="field"/>.</exception>
            <exception cref="T:System.InvalidOperationException">If <typeparamref name="TField"/> does not match the type of the <paramref name="field"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileStaticFieldGetterDelegate``1(System.Reflection.FieldInfo)">
            <summary>Creates a <see cref="T:System.Func`1"/> delegate for the specified static <paramref name="field"/> getter, performing type conversions if necessary.</summary>
            <typeparam name="TField">The type that will be returned by the delegate, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Func`1"/> delegate which returns the <typeparamref name="TField"/> value of the static <paramref name="field"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileUnboundFieldSetterDelegate``2(System.Reflection.FieldInfo)">
            <summary>
                Creates an <see cref="T:System.Action`2"/> delegate for the specified unbound instance
                <paramref name="field"/> setter, performing type conversions if necessary.
            </summary>
            <typeparam name="TInstance">The type of the instance that will be received by the delegate, which should be a type assignable to the declaring type of the <paramref name="field"/>.</typeparam>
            <typeparam name="TField">The type that will be received by the <paramref name="field"/>, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Action`2"/> delegate which takes in an instance of type <typeparamref name="TInstance"/> and a value of type <typeparamref name="TField"/>, and assigns the latter to the corresponding <paramref name="field"/> in the former.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileStaticFieldSetterDelegate``1(System.Reflection.FieldInfo)">
            <summary>
                Creates an <see cref="T:System.Action`1"/> delegate for the specified static <paramref name="field"/>
                setter, performing type conversions if necessary.
            </summary>
            <typeparam name="TField">The type that will be received by the field, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Action`1"/> delegate which takes in value of type <typeparamref name="TField"/> and assigns it to the static <paramref name="field"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.MethodBase"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetFullName(System.Reflection.MethodBase)">
            <summary>The full name of the method, including the declaring type.</summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <returns>A <see cref="T:System.String"/> representation of the <paramref name="method"/>'s qualified full name.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPatches(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> and that optionally
                satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPrefixes(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyPrefix"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyPrefix"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPostfixes(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyPostfix"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyPostfix"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedTranspilers(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyTranspiler"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyTranspiler"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedFinalizers(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyFinalizer"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyFinalizer"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPatchesById(System.Reflection.MethodBase,System.String)">
            <summary>
                Gets the <see cref="T:HarmonyLib.Patch"/> instances applied to this method with the specified <paramref name="uniqueId"/>
                .
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="uniqueId">A unique ID to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> by the mod with the specified <paramref name="uniqueId"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.MethodInfo"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.IsOverride(System.Reflection.MethodInfo)">
            <summary>Determines whether the <paramref name="method"/> is overriding a base class definition.</summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns><see langword="true"/> if the <paramref name="method"/> is not equal its own base definition, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.ToHarmonyMethod(System.Reflection.MethodInfo)">
            <summary>Constructs a <see cref="T:HarmonyLib.HarmonyMethod"/> instance from a <see cref="T:System.Reflection.MethodInfo"/> object.</summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>
                A <see cref="T:HarmonyLib.HarmonyMethod"/> instance if <paramref name="method"/> is not null, or <see langword="null"/>
                otherwise.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.CompileUnboundDelegate``1(System.Reflection.MethodInfo)">
            <summary>Creates a delegate of type <typeparamref name="TDelegate"/> for the given instance <paramref name="method"/>.</summary>
            <typeparam name="TDelegate">
                A delegate type which mirrors the desired <paramref name="method"/> signature and accepts the target
                instance type as the first parameter.
            </typeparam>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> which takes in an instance of an object and calls the corresponding <paramref name="method"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.CompileStaticDelegate``1(System.Reflection.MethodInfo)">
            <summary>Creates a delegate of type <typeparamref name="TDelegate"/> for the given static <paramref name="method"/>.</summary>
            <typeparam name="TDelegate">A delegate type which mirrors the desired <paramref name="method"/> signature.</typeparam>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> which calls the static <paramref name="method"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.StringExtensions">
            <summary>Extensions for the <see cref="T:System.String"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.StringExtensions.ToType(System.String)">
            <summary>Gets a type in the assembly by <paramref name="name"/> and asserts that it was found.</summary>
            <param name="name">The name of some type in any executing assembly.</param>
            <returns>The corresponding <see cref="T:System.Type"/>, if found.</returns>
            <exception cref="T:DaLion.Shared.Exceptions.MissingTypeException">If the requested type is not found.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.TypeExtensions">
            <summary>Provides extensions for simplified reflection on C# types.</summary>
            <remarks>Original code by <see href="https://github.com/pardeike">Pardeike</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.IsAssignableToAnyOf(System.Type,System.Type[])">
            <summary>Determines whether the <paramref name="type"/> can be assigned to any of the <paramref name="candidates"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="candidates">The candidate types.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is assignable to at least one of the <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.IsAssignableFromAnyOf(System.Type,System.Type[])">
            <summary>Determines whether any of the <paramref name="candidates"/> can be assigned to the <paramref name="type"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="candidates">The candidate types.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is assignable from at least one of the <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetDerivedTypes(System.Type)">
            <summary>Enumerates all the types which derive from <paramref name="type"/>.</summary>
            <param name="type">The base <see cref="T:System.Type"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all types assignable to <paramref name="type"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.OverridesMethod(System.Type,System.String)">
            <summary>Determines whether the <paramref name="type"/> is overriding the base class definition of the specified method.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="methodName">The name of the method to check.</param>
            <returns><see langword="true"/> if the <paramref name="type"/>'s definition of <paramref name="methodName"/> exists and is different from its base class definition, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.HasAttribute(System.Type,System.Type)">
            <summary>Determines whether the <paramref name="type"/> is decorated with an <see cref="T:System.Attribute"/> of the the specified <paramref name="attributeType"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="attributeType">An <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is decorated with <paramref name="attributeType"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.HasAttribute``1(System.Type)">
            <summary>Determines whether the <paramref name="type"/> is decorated with <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> <see cref="T:System.Type"/>.</typeparam>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is decorated with <typeparamref name="TAttribute"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.HasAnyAttributeOf(System.Type,System.Type[])">
            <summary>Determines whether the <paramref name="type"/> is decorated with any <see cref="T:System.Attribute"/> of the the specified <paramref name="attributeTypes"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="attributeTypes">The candidate <see cref="T:System.Attribute"/> types to search for.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is decorated with at least one of the specified <paramref name="attributeTypes"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetMethodInfoFromDelegateType(System.Type)">
            <summary>Gets the <see cref="T:System.Reflection.MethodInfo"/> for the <paramref name="delegateType"/>.</summary>
            <param name="delegateType">The delegate <see cref="T:System.Type"/>.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireConstructor(System.Type)">
            <summary>Gets a constructor and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>The corresponding <see cref="T:System.Reflection.ConstructorInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a constructor is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireConstructor(System.Type,System.Type[])">
            <summary>Gets a constructor with the specified <paramref name="parameters"/> and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="parameters">The method parameter types, or <see langword="null"/> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.ConstructorInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching constructor is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireConstructor(System.Type,System.Int32)">
            <summary>Gets a constructor and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="parameterCount">The the number of parameters in the overload signature.</param>
            <returns>The first constructor that matches the specified parameter count.</returns>
            <remarks>Useful when there's no compile-time access to one or more parameter types.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>Gets a method and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The method name.</param>
            <param name="parameters">The method parameter types, or <see langword="null"/> if it's not overloaded.</param>
            <param name="generics">The method generic types, if any.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching method is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireField(System.Type,System.String)">
            <summary>Gets a field and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The field name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.FieldInfo"/>, if found.</returns>
            <exception cref="T:System.MissingFieldException">If a matching field is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequirePropertyGetter(System.Type,System.String)">
            <summary>Gets a property getter and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The property name.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> corresponding to the getter of the property, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching property is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequirePropertySetter(System.Type,System.String)">
            <summary>Gets a property setter and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The property name.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> corresponding to the setter of the property, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching property is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetAllInnerTypes(System.Type)">
            <summary>Gets all inner types of <paramref name="parent"/>.</summary>
            <param name="parent">The parent <see cref="T:System.Type"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the inner <see cref="T:System.Type"/>s of <paramref name="parent"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetInnerMethodsContaining(System.Type,System.String)">
            <summary>Gets all inner methods whose names contain the given <paramref name="substring"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="substring">A substring to filter by, or "*" to get all methods.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the inner <see cref="T:System.Reflection.MethodInfo"/>s of <paramref name="type"/> containing the <paramref name="substring"/>.</returns>
            <exception cref="T:System.MissingMethodException">If a matching method is not found.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.AssetNameExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IAssetName"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.AssetNameExtensions.IsEquivalentToAnyOf(StardewModdingAPI.IAssetName,System.String[])">
            <summary>Determines whether the given asset name is equivalent to any of the specified <paramref name="candidates"/>.</summary>
            <param name="name">The <see cref="T:StardewModdingAPI.IAssetName"/>.</param>
            <param name="candidates">An array of candidate <see cref="T:System.String"/>s.</param>
            <returns><see langword="true"/> if the asset name is equivalent to at least one of the <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.ModExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.Mod"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModExtensions.ValidateMultiplayer(StardewModdingAPI.Mod)">
            <summary>Compares the local <see cref="T:StardewModdingAPI.IManifest"/> to that of the host.</summary>
            <param name="mod">The <see cref="T:StardewModdingAPI.Mod"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.GameContentHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IModHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.GameContentHelperExtensions.InvalidateCacheAndLocalized(StardewModdingAPI.IGameContentHelper,System.String)">
            <summary>Invalidates the cache for the current asset in English or the current game language.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IGameContentHelper"/> API of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="assetName">The asset name without extension.</param>
            <returns><see langword="true"/> if the corresponding asset was invalidated and re-cached, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.KeybindListExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.Utilities.KeybindList"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.KeybindListExtensions.HasCommonKeybind(StardewModdingAPI.Utilities.KeybindList,StardewModdingAPI.Utilities.KeybindList)">
            <summary>Determines whether the <paramref name="keybindList"/>/> shares any <see cref="T:StardewModdingAPI.Utilities.Keybind"/>s with <paramref name="other"/>.</summary>
            <param name="keybindList">The <see cref="T:StardewModdingAPI.Utilities.KeybindList"/>.</param>
            <param name="other">Some other <see cref="T:StardewModdingAPI.Utilities.KeybindList"/> to compare with.</param>
            <returns><see langword="true"/> if <paramref name="keybindList"/> and <paramref name="other"/> share at least one <see cref="T:StardewModdingAPI.Utilities.Keybind"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.DataHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IDataHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.DataHelperExtensions.GetJsonSerializerSettings(StardewModdingAPI.IDataHelper)">
            <summary>Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> from the data <paramref name="helper"/> instance.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <returns>The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IModHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions.GetModEntryFor(StardewModdingAPI.IModHelper,System.String)">
            <summary>Gets the <see cref="T:StardewModdingAPI.IMod"/> interface for the external mod identified by <paramref name="uniqueId"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="uniqueId">The unique ID of the external mod.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the contents of the config.</returns>
            <remarks>Will only for mods that implement <see cref="T:StardewModdingAPI.IMod"/>; i.e., will not work for content packs.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions.ReadConfigExt(StardewModdingAPI.IModHelper,System.String)">
            <summary>Reads the configuration file of the mod with the specified <paramref name="uniqueId"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="uniqueId">The unique ID of the external mod.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the contents of the config.</returns>
            <remarks>Will only for mods that implement <see cref="T:StardewModdingAPI.IMod"/>; i.e., will not work for content packs.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions.ReadContentPackConfig(StardewModdingAPI.IModHelper,System.String)">
            <summary>Reads the configuration file of the content pack with the specified <paramref name="uniqueId"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="uniqueId">The unique ID of the content pack.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the contents of the config.</returns>
            <remarks>Should work for any mod, but best reserved for content packs.</remarks>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.TranslationHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.ITranslationHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.TranslationHelperExtensions.Contains(StardewModdingAPI.ITranslationHelper,System.String,System.Object)">
            <summary>Checks whether a translation exists for the given <paramref name="key"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ITranslationHelper"/>.</param>
            <param name="key">A <see cref="T:System.String"/> key to search for.</param>
            <param name="tokens">Optional tokens to substitute into the translation.</param>
            <returns><see langword="true"/> if a translation exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.TranslationHelperExtensions.TryGet(StardewModdingAPI.ITranslationHelper,System.String,StardewModdingAPI.Translation@)">
            <summary>Gets a translation for the given <paramref name="key"/> and return whether it was found.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ITranslationHelper"/>.</param>
            <param name="key">A <see cref="T:System.String"/> key to search for.</param>
            <param name="translation">The <see cref="T:StardewModdingAPI.Translation"/>, if found.</param>
            <returns><see langword="true"/> if a translation exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.TranslationHelperExtensions.TryGet(StardewModdingAPI.ITranslationHelper,System.String,System.Object,StardewModdingAPI.Translation@)">
            <summary>Gets a translation for the given <paramref name="key"/> and return whether it was found.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ITranslationHelper"/>.</param>
            <param name="key">A <see cref="T:System.String"/> key to search for.</param>
            <param name="tokens">Optional tokens to substitute into the translation.</param>
            <param name="translation">The <see cref="T:StardewModdingAPI.Translation"/>, if found.</param>
            <returns><see langword="true"/> if a translation exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.ColorExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Color"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.Add(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Produces a new <see cref="T:Microsoft.Xna.Framework.Color"/> by adding the RGBA values of an<paramref name="other"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="other">A <see cref="T:Microsoft.Xna.Framework.Color"/> to add.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> structure whose color values are the results of the addition operation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.Subtract(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Produces a new <see cref="T:Microsoft.Xna.Framework.Color"/> by subtracting the RGBA values of an<paramref name="color"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="other">A <see cref="T:Microsoft.Xna.Framework.Color"/> to subtract.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> structure whose color values are the results of the subtraction operation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ToPackedValue(Microsoft.Xna.Framework.Color)">
            <summary>Obtains a packed ARGB representation of the <paramref name="color"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>A 32-bit <see cref="T:System.UInt32"/> value representing the packed ARGB bytes of <paramref name="color"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.Inverse(Microsoft.Xna.Framework.Color)">
            <summary>Gets the complementary <see cref="T:Microsoft.Xna.Framework.Color"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> created by inverting the RGB values of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ShiftHue(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>Performs a hue rotation by <paramref name="degrees"/> degrees.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="degrees">The number of degrees to rotate by.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> with the adjusted Hue.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ChangeSaturation(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>Multiplies the <paramref name="color"/>'s saturation by the specified <paramref name="factor"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="factor">The factor to multiply by. Should be a positive decimal.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> with the adjusted Saturation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ChangeValue(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>Multiplies the <paramref name="color"/>'s value by the specified <paramref name="factor"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="factor">A factor to multiply by. Should be a positive decimal.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> with the adjusted Value.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.L1Distance(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Calculates the L1 (Manhattan) distance between two colors.</summary>
            <param name="first">The first <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="second">The second <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>The <see cref="T:System.Int32"/> distance between <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.L2Distance(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Calculates the L2 (Euclidean) distance between two colors.</summary>
            <param name="first">The first <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="second">The second <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>The <see cref="T:System.Int32"/> distance between <paramref name="first"/> and <paramref name="second"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ToHsv(Microsoft.Xna.Framework.Color)">
            <summary>Converts RGB color values to HSV representation.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>A <see cref="T:System.Tuple"/> of three <see cref="T:System.Single"/> values which represent the <paramref name="color"/>'s HSV components.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.FromHsv(Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>Initializes the <paramref name="color"/> using the specified HSV values.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="hue">The color's hue.</param>
            <param name="saturation">The color's saturation.</param>
            <param name="value">The color's value.</param>
            <returns>The same <paramref name="color"/> instance, initialized from the specified HSV values.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ToHtml(Microsoft.Xna.Framework.Color)">
            <summary>Converts RGB color values to an HTML string.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>An HTML string which represents the <paramref name="color"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.FromHtml(Microsoft.Xna.Framework.Color,System.String)">
            <summary>Initializes the <paramref name="color"/> using the specified HTML string.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="html">An HTML color string.</param>
            <returns>The same <paramref name="color"/> instance, initialized from the specified HTML string.</returns>
            <exception cref="T:System.InvalidOperationException">If the input html string is invalid.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.PointExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Point"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.ManhattanDistance(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Finds the Manhattan (taxicab) distance between two points.</summary>
            <param name="self">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="other">Some other <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <returns>The Manhattan distance.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.ChessboardDistance(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Finds the chessboard (Chebyshev) distance between two points.</summary>
            <param name="self">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="other">Some other <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <returns>The Chessboard distance.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.Midpoint(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Finds the midpoint between two points.</summary>
            <param name="self">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="other">Some other <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <returns>The midpoint coordinates as <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.DrawBorder(Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws a border of specified height and width starting at the <paramref name="point"/>.</summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="height">The height of the border.</param>
            <param name="width">The width of the border.</param>
            <param name="pixel">The border pixel texture.</param>
            <param name="thickness">The border thickness.</param>
            <param name="color">The border <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="batch">A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.DrawBorder(Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws a border of specified height and width starting at the <paramref name="point"/>.</summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="height">The height of the border.</param>
            <param name="width">The width of the border.</param>
            <param name="pixel">The border pixel texture.</param>
            <param name="thickness">The border thickness.</param>
            <param name="color">The border <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="batch">A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="offset">An offset that should be applied to the point's position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.GetFourNeighbors(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>Gets the 4-connected neighboring tiles in a given region.</summary>
            <param name="tile">The tile as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the four-connected neighbors of the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.GetEightNeighbors(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>Gets the 8-connected neighboring tiles in a given region.</summary>
            <param name="vector">The tile as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the eight-connected neighbors of the <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.FloodFill(Microsoft.Xna.Framework.Point,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,System.Boolean})">
            <summary>Searches for region boundaries using a Flood Fill algorithm.</summary>
            <param name="origin">The starting point for the fill, as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <param name="boundary">The boundary condition.</param>
            <returns>The list of <see cref="T:Microsoft.Xna.Framework.Point"/>s belonging to the enclosed region.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.StringExtensions">
            <summary>Extensions for the <see cref="T:System.String"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.ParsePoint(System.String,System.Char)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting two components into
                a <see cref="T:Microsoft.Xna.Framework.Point"/>.
            </summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed <see cref="T:Microsoft.Xna.Framework.Point"/>, or the default value if empty.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.TryParsePoint(System.String,System.Nullable{Microsoft.Xna.Framework.Point}@,System.Char)">
            <summary>Safely attempts to parse the string to a <see cref="T:Microsoft.Xna.Framework.Point"/>, and returns whether the parse was successful.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="result">The parsed value if successful, or <see langword="null"/> otherwise.</param>
            <param name="separator">The element separator.</param>
            <returns><see langword="true"/> if the parse was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.ParseVector2(System.String,System.Char)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting two components into
                a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.
            </summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed <see cref="T:Microsoft.Xna.Framework.Vector2"/>, or the default value if empty.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.TryParseVector2(System.String,System.Nullable{Microsoft.Xna.Framework.Vector2}@,System.Char)">
            <summary>Safely attempts to parse the string to a <see cref="T:Microsoft.Xna.Framework.Vector2"/>, and returns whether the parse was successful.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="result">The parsed value if successful, or <see langword="null"/> otherwise.</param>
            <param name="separator">The element separator.</param>
            <returns><see langword="true"/> if the parse was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.TryParseColor(System.String,Microsoft.Xna.Framework.Color@,System.Char)">
            <summary>Safely attempts to parse the string to a <see cref="T:Microsoft.Xna.Framework.Color"/>, and returns whether the parse was successful.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="result">The parsed value if successful, or <see langword="null"/> otherwise.</param>
            <param name="separator">The element separator.</param>
            <returns><see langword="true"/> if the parse was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.TryParseFromHtml(System.String,Microsoft.Xna.Framework.Color@)">
            <summary>Attempts to parse an HTML color string to a <see cref="T:Microsoft.Xna.Framework.Color"/>.</summary>
            <param name="html">An HTML color string.</param>
            <param name="result">The parsed <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns><see langword="true"/> if the HTML string was valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.TryParseFromRgba(System.String,Microsoft.Xna.Framework.Color@,System.Char)">
            <summary>Attempts to parse a RGBA color string to a <see cref="T:Microsoft.Xna.Framework.Color"/>.</summary>
            <param name="rgba">A RGBA color string.</param>
            <param name="result">The parsed <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="separator">The channel separator.</param>
            <returns><see langword="true"/> if the RGBA string was valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.Vector2Extensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Vector2"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.AngleWithHorizontal(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the angle between this <paramref name="vector"/> and the horizontal, in degrees.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The angle between the <paramref name="vector"/> and a horizontal line, in degrees.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.AngleWith(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the angle between this <paramref name="self"/> and <paramref name="other"/>, in degrees.</summary>
            <param name="self">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="other">Some other <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The angle between <paramref name="self"/> and <paramref name="other"/>, in degrees.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.Perpendicular(Microsoft.Xna.Framework.Vector2)">
            <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that is perpendicular to this one.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector2"/> obtained by a 90-degree anti-clockwise rotation of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.Rotate(Microsoft.Xna.Framework.Vector2,System.Double)">
            <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> by rotating this <paramref name="vector"/> by the specified <paramref name="angle"/>, in degrees.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="angle">An angle, in degrees, to rotate by.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector2"/> obtained by the specified rotation of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetFourNeighbors(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>Gets the 4-connected neighboring tiles.</summary>
            <param name="tile">The tile as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the four-connected neighbors of the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetEightNeighbors(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>Gets the 8-connected neighboring tiles.</summary>
            <param name="tile">The tile as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the eight-connected neighbors of the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetTwentyFourNeighbors(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>Gets the 24-connected neighboring tiles.</summary>
            <param name="tile">The tile as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the eight-connected neighbors of the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetUnitComponents(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the horizontal and vertical unit vector projections of this <paramref name="vector"></paramref>.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>Two unit vectors which point in the same direction as the components of <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.FloodFill(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Vector2,System.Boolean},System.Int32,System.Int32)">
            <summary>Searches for region boundaries using a Flood Fill algorithm.</summary>
            <param name="origin">The starting point for the fill, as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <param name="boundary">The boundary condition.</param>
            <param name="minDistance">The shortest Chebyshev distance acceptable from the origin.</param>
            <param name="maxDistance">The largest Chebyshev distance acceptable from the origin.</param>
            <returns>The list of <see cref="T:Microsoft.Xna.Framework.Vector2"/>s belonging to the enclosed region.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.ArrayExtensions">
            <summary>Extensions for generic arrays of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.SortDescending``1(``0[])">
            <summary>Sorts the <paramref name="array"/> in reverse order.</summary>
            <typeparam name="T">The type of elements in the <paramref name="array"/>. <paramref name="T"/> must be <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="array">An array of <see cref="T:System.IComparable`1"/>s.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.IsIndexInBounds``1(``0[],System.Int32)">
            <summary>Determines whether the specified <paramref name="index"/> is within the bounds of the <paramref name="array"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="array"/>.</typeparam>
            <param name="array">The array.</param>
            <param name="index">The <see cref="T:System.Int32"/> index.</param>
            <returns><see langword="true"/> if <paramref name="index"/> is greater than or equal to zero, and less than the size of the <paramref name="array"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>Gets a sub-array of <paramref name="length"/> starting at <paramref name="offset"/>.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The starting index.</param>
            <param name="length">The length of the sub-array.</param>
            <returns>A new array formed by taking <paramref name="length"/> elements of the original after skipping <paramref name="offset"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftRight``1(``0[])">
            <summary>Shifts all elements of the <paramref name="array"/> one unit to the right.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <remarks>The last element of the original array becomes the first element of the shifted array.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftRight``1(``0[],System.Int32)">
            <summary>Shifts all elements of the <paramref name="array"/> <paramref name="count"/> units to the right.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftLeft``1(``0[])">
            <summary>Shifts all elements of the <paramref name="array"/> one unit to the left.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftLeft``1(``0[],System.Int32)">
            <summary>Shifts all elements of the <paramref name="array"/> <paramref name="count"/> units to the left.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.Choose``1(``0[],System.Random)">
            <summary>Chooses a random element from the <paramref name="array"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="array">The array.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
            <returns>A random element from the <paramref name="array"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If <paramref name="array"/> is empty.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.GenericExtensions">
            <summary>Extensions for generic objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.Compare``1(``0,``0)">
            <summary>Determines whether the <paramref name="value"/> is equal to an<paramref name="other"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="other">Some other value with which to compare.</param>
            <returns><see langword="true"/> if <paramref name="value"/> and <paramref name="other"/> are equal with respect to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.IsAnyOf``1(``0,``0[])">
            <summary>Determines whether the <paramref name="value"/> is equal to any of the <paramref name="candidates"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="candidates">Some candidates to check.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is equal to at least one of the <paramref name="candidates"/> with respect to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>Determines whether <paramref name="value"/> is equal to any of the enumerated <paramref name="candidates"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="candidates">The candidates to check.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is equal to at least one of the <paramref name="candidates"/> with respect to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.Collect``1(``0,``0[])">
            <summary>Enumerates the <paramref name="value"/> and <paramref name="others"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="others">Some other objects to collect.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> combining <paramref name="value"/> and <paramref name="others"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.Collect``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>Enumerates the <paramref name="value"/> along with the enumerated <paramref name="others"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="others">Some other enumeration to collect.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> combining <paramref name="value"/> and <paramref name="others"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.IsNullOrDefault``1(``0)">
            <summary>Determines whether the <paramref name="object"/> is <see langwor="null"/> or equal to the default for type <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of the <paramref name="object"/>.</typeparam>
            <param name="object">The object.</param>
            <returns><see langword="true"/> if <paramref name="object"/> is <see langword="null"/> or <see langword="default"/>, otherwise <see langword="false"/>.</returns>
            <remarks>Adapted from https://stackoverflow.com/a/6553276/1889720.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.GenericAdd``1(``0,``0)">
            <summary>Calculates the sum of two generic values.</summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="a">The first summand.</param>
            <param name="b">The second summand.</param>
            <returns>a+b</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Int32Extensions">
            <summary>Extensions for the primitive <see cref="T:System.Int32"/> type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Int32Extensions.IsIn(System.Int32,System.Range)">
            <summary>Determines whether the <paramref name="value"/> is contained by the closed set defined by the specified <paramref name="range"/>.</summary>
            <param name="value">The value to check.</param>
            <param name="range">A range of integers.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is greater than or equal to the <paramref name="range"/> start value and less than or equal to the end value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Int32Extensions.FirstOrDefault(System.Collections.Generic.ICollection{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>Finds the first common <see cref="T:System.Int32"/>eger between the <paramref name="collection"/> and the specified <paramref name="candidates"/>. If none are found, returns the specified <paramref name="default"/> value.</summary>
            <param name="collection">A <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.Int32"/>egers.</param>
            <param name="candidates">The candidate <see cref="T:System.Int32"/>egers.</param>
            <param name="default">The default value in case no match is found.</param>
            <returns>The first common <see cref="T:System.Int32"/>eger between <paramref name="collection"/> and <paramref name="candidates"/>, or <paramref name="default"/> if none are found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Int32Extensions.AddWithoutOverflow(System.Int32[])">
            <summary>Adds the specified <paramref name="values"/> ensuring that the result does not overflow.</summary>
            <param name="values">The <see cref="T:System.Int32"/> values to be added.</param>
            <returns>The sum of <paramref name="values"/>, or <see cref="F:System.Int32.MaxValue"/> is that sum would be greater than <see cref="F:System.Int32.MaxValue"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.RangeExtensions">
            <summary>Extensions for the <see cref="T:System.Range"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.RangeExtensions.GetEnumerator(System.Range)">
            <summary>Returns an enumerator that iterates through the specified <paramref name="range"/> of <see cref="T:System.Int32"/>s.</summary>
            <param name="range">A range that has start and end indices.</param>
            <returns>A new instance of <see cref="T:DaLion.Shared.Extensions.CustomIntEnumerator"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.CustomIntEnumerator">
            <summary>Allows enumerating <see cref="T:System.Int32"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.CustomIntEnumerator.#ctor(System.Range)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Extensions.CustomIntEnumerator"/> struct.</summary>
            <param name="range">A range that has start and end indices.</param>
        </member>
        <member name="P:DaLion.Shared.Extensions.CustomIntEnumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.CustomIntEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.StringExtensions">
            <summary>Extensions for the <see cref="T:System.String"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ReplaceAt(System.String,System.Int32,System.String)">
            <summary>Replaces the <see cref="T:System.Char"/>s starting at the specified <paramref name="position"/> with those from the specified <paramref name="newValue"/>.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="position">The <see cref="T:System.Char"/> index.</param>
            <param name="newValue">A replacement <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> where the <c>N</c> <see cref="T:System.Char"/>s starting at <paramref name="position"/> are replaced with <paramref name="newValue"/>, where <c>N</c> is the length of <paramref name="newValue"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ContainsAnyOf(System.String,System.String[])">
            <summary>Determines whether the string contains any of the specified sub-strings.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="candidates">The sub-strings to search for.</param>
            <returns><see langword="true"/> if <paramref name="string"/> contains at least one of the <see cref="T:System.String"/>s in <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ContainsAllOf(System.String,System.String[])">
            <summary>Determines whether the string contains all of the specified sub-strings.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="candidates">The sub-strings to search for.</param>
            <returns><see langword="true"/> if <paramref name="string"/> contains all of the <see cref="T:System.String"/>s in <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.StartsWithAnyOf(System.String,System.String[])">
            <summary>Determines whether the string starts with any of the specified sub-strings.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="candidates">The sub-strings to check.</param>
            <returns><see langword="true"/> if <paramref name="string"/> begins with at least one of the <see cref="T:System.String"/>s in <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32,System.Int32)">
            <summary>Finds the index of the <paramref name="n"/>th occurrence of the character <paramref name="ch"/> in the string.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="ch">The <see cref="T:System.Char"/> to find.</param>
            <param name="n">The occurrence number.</param>
            <param name="start">The starting index for the search within the string.</param>
            <returns>The integer index of the <paramref name="n"/>th occurrence of the character <paramref name="ch"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.FirstCharToUpper(System.String)">
            <summary>Capitalizes the first character in the string.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> with a capitalized first character.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.IndexOfWhitespace(System.String)">
            <summary>Gets the index of the first whitespace character.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>The index of the first whitespace character, or -1 if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.RemoveInvalidFileNameOrPathChars(System.String)">
            <summary>Removes invalid file name or path characters from the string.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> formed by filtering any invalid file name or path characters from the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>Splits a <c>camelCase</c> or <c>PascalCase</c> token into an array of its constituent words.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>An array of <see cref="T:System.String"/>s pertaining to the individual words in <paramref name="string"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseCamelCase(System.String)">
            <summary>Inserts spaces in between words in a <c>camelCase</c> or <c>PascalCase</c> token.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>The token parsed into words.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.CamelToSnakeCase(System.String)">
            <summary>Convert the <c>camelCase</c> or <c>PascalCase</c> token into a <c>snake_case</c> token.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>The <c>camelCase</c> token parsed into words.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.TrimAll(System.String)">
            <summary>Trims all whitespace from the string.</summary>
            <param name="str">The <see cref="T:System.String"/>.</param>
            <returns>The original <see cref="T:System.String"/> trimmed of any whitespace characters.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>Truncates the string to the specified <paramref name="maxLength"/> if necessary, appending the desired <paramref name="truncationSuffix"/>.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="maxLength">The desired maximum length of the resulting <see cref="T:System.String"/>.</param>
            <param name="truncationSuffix">A <see cref="T:System.String"/> to be appended to the result to signify that truncation has taken place (by default ellipses).</param>
            <returns>The original <see cref="T:System.String"/> if it is shorter than <paramref name="maxLength"/>, or truncated after <paramref name="maxLength"/> characters and appended with <paramref name="truncationSuffix"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.Parse``1(System.String)">
            <summary>Parses the string to a generic type.</summary>
            <typeparam name="T">The expected type. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A value of type <typeparamref name="T"/> converted from <paramref name="string"/>, or <see langword="default"/>(<typeparamref name="T"/>) if empty.</returns>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.TryParse``1(System.String,``0@)">
            <summary>Safely attempts to parse the string to a generic type, and returns whether the parse was successful.</summary>
            <typeparam name="T">The expected type. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="result">The parsed value if successful, or default otherwise.</param>
            <returns><see langword="true"/> if the parse was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseTuple``2(System.String,System.Char)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting two components into
                different types.
            </summary>
            <typeparam name="T1">The expected type of the first component. This should most likely be a primitive.</typeparam>
            <typeparam name="T2">The expected type of the second component. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed components of <paramref name="string"/>, or the default values if empty.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseTuple``3(System.String,System.Char)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting three components into
                different types.
            </summary>
            <typeparam name="T1">The expected type of the first component. This should most likely be a primitive.</typeparam>
            <typeparam name="T2">The expected type of the second component. This should most likely be a primitive.</typeparam>
            <typeparam name="T3">The expected type of the third component. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed components of <paramref name="string"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseTuple``4(System.String,System.Char)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting four components into
                different types.
            </summary>
            <typeparam name="T1">The expected type of the first component. This should most likely be a primitive.</typeparam>
            <typeparam name="T2">The expected type of the second component. This should most likely be a primitive.</typeparam>
            <typeparam name="T3">The expected type of the third component. This should most likely be a primitive.</typeparam>
            <typeparam name="T4">The expected type of the fourth component. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed components of <paramref name="string"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseList``1(System.String,System.Char)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting elements into a
                <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The expected type of the elements. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the parsed elements of <paramref name="string"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseDictionary``2(System.String,System.Char,System.Char)">
            <summary>Parses a flattened string of key-value pairs back into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
            <typeparam name="TKey">The expected type of the dictionary keys. This should most likely be a primitive.</typeparam>
            <typeparam name="TValue">The expected type of the dictionary values. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="keyValueSeparator">The sub-string that separates keys and values.</param>
            <param name="pairSeparator">The sub-string that separates key-value pairs.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the parsed <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="keyValueSeparator"/> and <paramref name="pairSeparator"/> are equal.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.SplitWithoutAllocation(System.String,System.Char)">
            <summary>Splits a <see cref="T:System.String"/> into its constituent substrings based on the specified <paramref name="splitter"/>, without additional memory allocation.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="splitter">A <see cref="T:System.Char"/>s that will be used to split the <paramref name="string"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> object that can be used to iterate through and access the substrings within the <paramref name="string"/>, without additional memory allocation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.GetDeterministicHashCode(System.String)">
            <summary>Converts the string into a hash code that is reliable across different executions.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A reproducible <see cref="T:System.Int32"/> hash of <paramref name="string"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.XmlElementExtensions">
            <summary>Extensions for reading data from <see cref="T:System.Xml.XmlElement"/> instance.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.TryRead(System.Xml.XmlElement,System.String,System.String@)">
            <summary>Attempts to read the specified node in the <paramref name="xml"/> element as <see cref="T:System.String"/>.</summary>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <param name="innerText">The inner text of the node if it exists, otherwise <see cref="F:System.String.Empty"/>.</param>
            <returns><see langword="true"/> if the node exists and is non-empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.Read(System.Xml.XmlElement,System.String)">
            <summary>Reads the specified node in the <paramref name="xml"/> element as <see cref="T:System.String"/>.</summary>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <returns>The inner text of the node if it exists, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.TryReadAs``1(System.Xml.XmlElement,System.String,``0@)">
            <summary>Attempts to read the specified node in the <paramref name="xml"/> element.</summary>
            <typeparam name="T">The expected type with which to parse the node's inner text.</typeparam>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <param name="result">The parsed value if successful, otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if the node exists and can be parsed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.Read``1(System.Xml.XmlElement,System.String)">
            <summary>Reads the specified node in the <paramref name="xml"/> element and parses it to a generic type.</summary>
            <typeparam name="T">The expected type with which to parse the node's inner text.</typeparam>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <returns>The parsed value if successful, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Pathfinding.PathfinderRenderedWorldEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.PathfinderRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.PathfinderRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.PathfinderRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.PathfinderRenderedWorldEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.PathfinderRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Pathfinding.MTDStarLite">
            <summary>Implementation of Moving Target D* Lite pathfinding algorithm for a 2D grid based on a <see cref="T:StardewValley.GameLocation"/>.</summary>
            <remarks>Reference paper: <see href="http://idm-lab.org/bib/abstracts/papers/aamas10a.pdf"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.#ctor(StardewValley.GameLocation,System.Func{StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite"/> class.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="isWalkable">A function to determine whether a <see cref="T:Microsoft.Xna.Framework.Vector2"/> tile in the <paramref name="location"/>> is walkable.</param>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.Start">
            <summary>Gets the current start state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.Goal">
            <summary>Gets the current goal state.</summary>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Step(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Gets the next step in the optimal path from <paramref name="start"/> to <paramref name="goal"/>.</summary>
            <param name="start">The starting position, as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="goal">The goal position, as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <returns>The <see cref="T:Microsoft.Xna.Framework.Point"/> next position in the optimal path from <paramref name="start"/> to <paramref name="goal"/>, or <see langword="null"/> if no path was found.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.UpdateEdges(StardewValley.GameLocation,Microsoft.Xna.Framework.Point)">
            <summary>Updates the edges which connect to the <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> at the specified <paramref name="position"/>.</summary>
            <param name="position">The <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/>'s position as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Initialize(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Initializes the search from <paramref name="start"/> to <paramref name="goal"/>.</summary>
            <param name="start">The starting position, as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="goal">The goal position, as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.ComputeCostMinimalPath">
            <summary>Computes the shortest path between the initialized start and goal states.</summary>
            <returns><see langword="true"/> if a path was found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.UpdateState(DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <summary>Updates the specified <paramref name="state"/>'s priority in the queue if necessary.</summary>
            <param name="state">The <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.BasicDeletion(DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <summary>Corrects the Search Tree to account for a moving hunter and target.</summary>
            <param name="oldStart">The <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> at the root of the previous Search Tree.</param>
            <remarks>Basic version, which simply resets the <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.RHS"/> cost of <paramref name="oldStart"/> and inserts it back in the <see cref="F:DaLion.Shared.Pathfinding.MTDStarLite._open"/> set.</remarks>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.OptimizedDeletion(DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <summary>Corrects the Search Tree to account for a moving hunter and target.</summary>
            <param name="oldStart">The <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> at the root of the previous Search Tree.</param>
            <remarks>The optimized version, which pre-emptively resets all affected states which would have been expanded by the new Search Tree.</remarks>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.ReconstructPath">
            <summary>Reconstructs the optimal poth from <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.Start"/> to <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.Goal"/>.</summary>
            <returns>The reconstructed path as a <see cref="!:Stack&lt;T"/> of <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</returns>
        </member>
        <member name="T:DaLion.Shared.Pathfinding.MTDStarLite.Key">
            <summary>Represents a two-value priority key.</summary>
            <param name="k1">The first key value.</param>
            <param name="k2">The second key value.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.#ctor(System.Single,System.Single)">
            <summary>Represents a two-value priority key.</summary>
            <param name="k1">The first key value.</param>
            <param name="k2">The second key value.</param>
        </member>
        <member name="F:DaLion.Shared.Pathfinding.MTDStarLite.Key.K1">
            <summary>The first key value.</summary>
        </member>
        <member name="F:DaLion.Shared.Pathfinding.MTDStarLite.Key.K2">
            <summary>The second key value.</summary>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.op_LessThan(DaLion.Shared.Pathfinding.MTDStarLite.Key,DaLion.Shared.Pathfinding.MTDStarLite.Key)">
            <summary>Compares whether the <paramref name="left"/> <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance is less than the <paramref name="right"/> <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the left of the less-than sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the right of the less-than sign.</param>
            <returns><see langword="true"/> if the <paramref name="left"/> instance is less than the <paramref name="right"/>; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.op_GreaterThan(DaLion.Shared.Pathfinding.MTDStarLite.Key,DaLion.Shared.Pathfinding.MTDStarLite.Key)">
            <summary>Compares whether the  <paramref name="left"/> <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance is greater than the <paramref name="right"/> <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the left of the greater-than sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the right of the greater-than sign.</param>
            <returns><see langword="true"/> if the <paramref name="left"/> instance is greater than the <paramref name="right"/>; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.op_Equality(DaLion.Shared.Pathfinding.MTDStarLite.Key,DaLion.Shared.Pathfinding.MTDStarLite.Key)">
            <summary>Compares whether two <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instances are equal.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the right of the equal sign.</param>
            <returns><see langword="true"/> if the instances are equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.op_Inequality(DaLion.Shared.Pathfinding.MTDStarLite.Key,DaLion.Shared.Pathfinding.MTDStarLite.Key)">
            <summary>Compares whether two <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instances are not equal.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the right of the not equal sign.</param>
            <returns><see langword="true"/> if the instances are not equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.CompareTo(DaLion.Shared.Pathfinding.MTDStarLite.Key)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.Key.ToString">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Pathfinding.MTDStarLite.State">
            <summary>Represents a state in a path.</summary>
            <remarks>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> class.</remarks>
            <param name="position">The state's coordinates as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.#ctor(Microsoft.Xna.Framework.Point)">
            <summary>Represents a state in a path.</summary>
            <remarks>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> class.</remarks>
            <param name="position">The state's coordinates as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> class.</summary>
            <param name="x">The state's X coordinate.</param>
            <param name="y">The state's Y coordinate.</param>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.Cost">
            <summary>Gets or sets the cost function, which takes as input two state positions and returns the cost of a path between them.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.Heuristic">
            <summary>Gets or sets the heuristic function, which takes as input a state's position and returns the cost of a path from that state to the target state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.Position">
            <summary>Gets the total cost of a path from the starting state to this state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.C">
            <summary>Gets the cost function for traveling from this state to some other state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.H">
            <summary>Gets the heuristic cost of a path from this state to the starting state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.G">
            <summary>Gets or sets the total cost of a path from the goal state to this state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.RHS">
            <summary>Gets or sets the right-hand side value, which estimates this state's <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.G"/> based on that of its neighbors.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.Parent">
            <summary>Gets or sets the parent <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> of this instance; i.e., the previous state in the optimal path which passes through this instance.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.Children">
            <summary>Gets the children <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> of this instance; i.e., the states which have this instance as their <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.Parent"/>.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.CachedKey">
            <summary>Gets the last <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> value calculated for this state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.IsStart">
            <summary>Gets a value indicating whether this state is the start state.</summary>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.MTDStarLite.State.IsGoal">
            <summary>Gets a value indicating whether this state is the end state.</summary>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.op_Equality(DaLion.Shared.Pathfinding.MTDStarLite.State,DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <summary>Compares whether two <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State" /> instances are equal.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State" /> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State" /> instance on the right of the equal sign.</param>
            <returns><see langword="true"/> if the instances are equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.op_Inequality(DaLion.Shared.Pathfinding.MTDStarLite.State,DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <summary>Compares whether two <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State" /> instances are equal.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State" /> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State" /> instance on the right of the equal sign.</param>
            <returns><see langword="true"/> if the instances are equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.op_Addition(DaLion.Shared.Pathfinding.MTDStarLite.State,DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <summary>Calculates the total cost to reach the <paramref name="right"/> <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> when traveling from the <paramref name="left"/> <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/>, which is equal to the sum of the <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.G"/> cost of <paramref name="left"/> and the <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.C"/> cost from <paramref name="left"/> to <paramref name="right"/>.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the left of the plus sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/> instance on the right of the plus sign.</param>
            <returns>The sum of the <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.G"/> cost of <paramref name="left"/> and the <see cref="P:DaLion.Shared.Pathfinding.MTDStarLite.State.C"/> cost from <paramref name="left"/> to <paramref name="right"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.CalculateKey(System.Int32)">
            <summary>Calculates the key value, which is used to prioritize <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances for the pathfinding algorithm.</summary>
            <param name="km">The key modifier.</param>
            <returns>The <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.Key"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.GetNeighbors(DaLion.Shared.Pathfinding.MTDStarLite.State[0:,0:])">
            <summary>Gets the 4-connected neighbors to this state.</summary>
            <param name="grid">The grid of <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the (up to) four neighboring <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</returns>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.Predecessors(DaLion.Shared.Pathfinding.MTDStarLite.State[0:,0:])">
            <summary>Gets the 4-connected neighbors which connect to this state.</summary>
            <param name="grid">The grid of <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the (up to) four neighboring <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</returns>
            <remarks>This is only used for parity with the original paper.</remarks>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.Successors(DaLion.Shared.Pathfinding.MTDStarLite.State[0:,0:])">
            <summary>Gets the 4-connected neighbors this state is connected to.</summary>
            <param name="grid">The grid of <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the (up to) four neighboring <see cref="T:DaLion.Shared.Pathfinding.MTDStarLite.State"/> instances.</returns>
            <remarks>This is only used for parity with the original paper.</remarks>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.Equals(DaLion.Shared.Pathfinding.MTDStarLite.State)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.MTDStarLite.State.ToString">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Pathfinding.PathfinderObjectListChangedEvent">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.PathfinderObjectListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Pathfinding.PathfinderObjectListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Pathfinding.PathfinderObjectListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Pathfinding.PathfinderObjectListChangedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Pathfinding.PathfinderObjectListChangedEvent.OnObjectListChangedImpl(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Classes.BiMap`2">
            <summary>Represents a collection of forward/reverse key pairs with bidirectional mapping.</summary>
            <typeparam name="TForward">The forward mapping key type.</typeparam>
            <typeparam name="TReverse">The reverse mapping key type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> class by copying <see cref="T:System.Collections.Generic.KeyValuePair" />s from a one-way <see cref="T:System.Collections.IDictionary"/>.</summary>
            <param name="oneWayMap">A one-way <see cref="T:System.Collections.IDictionary" />.</param>
            <remarks>Throws <see cref="T:System.ArgumentException" /> if <paramref name="oneWayMap" /> contains repeated values.</remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Add(`0,`1)">
            <summary>Adds the specified set of <typeparamref name="TForward"/> and <typeparamref name="TReverse"/> values to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="forward">A <typeparamref name="TForward"/> value.</param>
            <param name="reverse">A <typeparamref name="TReverse"/> value.</param>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="forward" /> or <paramref name="reverse" /> already exists in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</exception>>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="pair">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if either the key or value already exists in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</exception>>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryAdd(`0,`1)">
            <summary>Tries to add the specified set of <typeparamref name="TForward"/> and <typeparamref name="TReverse"/> values to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="forward">A <typeparamref name="TForward"/> value.</param>
            <param name="reverse">A <typeparamref name="TReverse"/> value.</param>
            <returns><see langword="true"/> if successfully added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Try Adds the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="pair">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <returns><see langword="true"/> if successfully added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.RemoveForward(`0)">
            <summary>Removes a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> entry from the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="forward">A <typeparamref name="TForward"/> value.</param>
            <returns><see langword="true"/> if successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.RemoveReverse(`1)">
            <summary>Removes a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> entry from the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="reverse">A <typeparamref name="TReverse"/> value.</param>
            <returns><see langword="true"/> if successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.ContainsForward(`0)">
            <summary>Checks if a <typeparamref name="TForward"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="key">The <typeparamref name="TForward"/> object to check.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> exists.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.ContainsReverse(`1)">
            <summary>Checks if a <typeparamref name="TReverse"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="key">The <typeparamref name="TReverse"/> object to check.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> exists.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryGetForward(`0,`1@)">
            <summary>
                Checks if a <typeparamref name="TForward"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> and returns the corresponding
                <typeparamref name="TReverse"/> value.
            </summary>
            <param name="forward">The <typeparamref name="TForward" /> object to check.</param>
            <param name="reverse">The corresponding <typeparamref name="TReverse"/>, if any.</param>
            <returns><see langword="true"/> if a value was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryGetReverse(`1,`0@)">
            <summary>
                Checks if a <typeparamref name="TReverse"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> and returns the corresponding
                <typeparamref name="TForward"/> value.
            </summary>
            <param name="reverse">The <typeparamref name="TReverse"/> object to check.</param>
            <param name="forward">The corresponding <typeparamref name="TForward"/>, if any.</param>
            <returns><see langword="true"/> if a value was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Clear">
            <summary>Clears the instance of all entries.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Count">
            <summary>Gets the number of entries in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <returns>The number of entries in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Classes.BiMapExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMapExtensions.Remove``1(DaLion.Shared.Classes.BiMap{``0,``0},``0)">
            <summary>Removes the given key if it is present in either direction of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <typeparam name="T">The type of both the key and paired value in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</typeparam>
            <param name="map">A <see cref="T:DaLion.Shared.Classes.BiMap`2"/> from  <typeparamref name="T"/> to  <typeparamref name="T"/>.</param>
            <param name="key">The <typeparamref name="T"/> key.</param>
            <returns><see langword="true"/> if successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMapExtensions.Contains``1(DaLion.Shared.Classes.BiMap{``0,``0},``0)">
            <summary>
                Checks if the given key is present in either direction of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.
            </summary>
            <typeparam name="T">The type of both the key and paired value in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</typeparam>
            <param name="map">A <see cref="T:DaLion.Shared.Classes.BiMap`2"/> from  <typeparamref name="T"/> to  <typeparamref name="T"/>.</param>
            <param name="key">The <typeparamref name="T"/> key.</param>
            <returns><see langword="true"/> if a value was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMapExtensions.TryGet``1(DaLion.Shared.Classes.BiMap{``0,``0},``0,``0@)">
            <summary>
                Checks if a the given key is present in either direction of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> and returns the corresponding
                value.
            </summary>
            <typeparam name="T">The type of both the key and paired value in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</typeparam>
            <param name="map">A <see cref="T:DaLion.Shared.Classes.BiMap`2"/> from <typeparamref name="T"/> to <typeparamref name="T"/>.</param>
            <param name="key">The <typeparamref name="T"/> key.</param>
            <param name="pair">The corresponding <typeparamref name="T"/> pair, if any.</param>
            <returns><see langword="true"/> if a value was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Classes.CircleTileGrid">
            <summary>Represents a circular grid of tiles.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.#ctor(Microsoft.Xna.Framework.Vector2,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.CircleTileGrid"/> class.</summary>
            <param name="origin">The center tile of the circle in the world reference.</param>
            <param name="radius">The radius of the circle in tile units.</param>
        </member>
        <member name="P:DaLion.Shared.Classes.CircleTileGrid.Origin">
            <summary>Gets the tile at the origin of the circle.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.CircleTileGrid.Radius">
            <summary>Gets the radius of the circle.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.CircleTileGrid.Tiles">
            <summary>Enumerates all the tiles in the grid.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.CircleTileGrid.Outline">
            <summary>Enumerates only the outline tiles of the grid.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.op_Subtraction(DaLion.Shared.Classes.CircleTileGrid,DaLion.Shared.Classes.CircleTileGrid)">
            <summary>Produces the set difference between <paramref name="left"/> and <paramref name="right"/>.</summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the tiles in <paramref name="left"/> which are not in <paramref name="right"/>.</returns>
            <remarks><paramref name="left"/> must be larger than <paramref name="right"/> and both must have the same origin.</remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.Contains(Microsoft.Xna.Framework.Point)">
            <summary>Determines whether a point is contained within the circle by using ray casting.</summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Point"/>> to be tested.</param>
            <returns><see langword="true"/> if the <paramref name="point"/> is within the bounds of the circle, otherwise <see langword="false"/>.</returns>
            <remarks>Remember that the center of the circle is located at (_radius, _radius).</remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.Contains(Microsoft.Xna.Framework.Vector2)">
            <summary>Determines whether a vector is contained within the circle by using ray casting.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>> to be tested.</param>
            <returns><see langword="true"/> if the <paramref name="vector"/> is within the bounds of the circle, otherwise <see langword="false"/>.</returns>
            <remarks>Remember that the center of the circle is located at (Radius, Radius).</remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.ToString">
            <summary>Gets a <see cref="T:System.String"/> representation of the circle grid.</summary>
            <returns>A <see cref="T:System.String"/> representation of the circle grid.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.GetOutline">
            <summary>Creates the circle's outline as a <see cref="T:System.Boolean"/> array.</summary>
            <returns>An array of <see cref="T:System.Boolean"/> values, where <see langword="true"/> indicates that the circle's outline crosses over the corresponding tile.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.SetDifference(DaLion.Shared.Classes.CircleTileGrid)">
            <summary>Enumerates only the tiles between this grid and <paramref name="other"/>.</summary>
            <param name="other">Some other, larger <see cref="T:DaLion.Shared.Classes.CircleTileGrid"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the <see cref="T:Microsoft.Xna.Framework.Vector2"/> tiles that are contained within <paramref name="other"/> but not <see langword="this"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Classes.ColorRange">
            <summary>Represents a range of color.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.ColorRange.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.ColorRange"/> class.</summary>
            <param name="r">The red channel range.</param>
            <param name="g">The green channel range.</param>
            <param name="b">The blue channel range.</param>
        </member>
        <member name="P:DaLion.Shared.Classes.ColorRange.Red">
            <summary>Gets or sets the red channel range.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.ColorRange.Green">
            <summary>Gets or sets the green channel range.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.ColorRange.Blue">
            <summary>Gets or sets the blue channel range.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.ColorRange.Contains(Microsoft.Xna.Framework.Color)">
            <summary>Determines whether the specified color is contained within the <see cref="T:DaLion.Shared.Classes.ColorRange"/>.</summary>
            <param name="c">A <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns><see langword="true"/> if all channels of <paramref name="c"/> are contained within the respective inclusive ranges in the <see cref="T:DaLion.Shared.Classes.ColorRange"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Classes.Countdown">
            <summary>Counts down from a baseline value.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.Countdown.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.Countdown"/> class.</summary>
            <param name="initial">The initial value from which to count down.</param>
        </member>
        <member name="P:DaLion.Shared.Classes.Countdown.Initial">
            <summary>Gets the initial value from which to count down.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.Countdown.Current">
            <summary>Gets the current value.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.Countdown.Decrement">
            <summary>Reduces the current value by one.</summary>
            <returns>Returns whether the value was decremented (i.e. wasn't already zero).</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.Countdown.Reset">
            <summary>Restarts the countdown.</summary>
        </member>
        <member name="T:DaLion.Shared.Classes.Quadtree`1">
            <summary>
                Provides a tree data structure in which each internal (non-leaf) node has exactly four children, useful
                for 2D spatial information queries.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.#ctor(Microsoft.Xna.Framework.Rectangle,System.Func{`0,Microsoft.Xna.Framework.Rectangle})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.Quadtree`1"/> class.</summary>
            <param name="regionBounds">The bounding <see cref="T:Microsoft.Xna.Framework.Rectangle"/> of the region that this <see cref="T:DaLion.Shared.Classes.Quadtree`1"/>'s contents occupy.</param>
            <param name="getEntityBounds">A delegate for getting the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> bounds of a <typeparamref name="TSpatialEntity"/>.</param>
            <remarks>
                This initializes the <see cref="T:DaLion.Shared.Classes.Quadtree`1"/> instance with a default bucket capacity of <c>32</c> and a default maximum
                node depth of <c>5</c>, which are reasonable general-purpose values for these settings.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.#ctor(Microsoft.Xna.Framework.Rectangle,System.Func{`0,Microsoft.Xna.Framework.Rectangle},System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.Quadtree`1"/> class.</summary>
            <param name="regionBounds">The bounding rectangle of the region that this QuadTree's contents occupy.</param>
            <param name="getEntityBounds">A delegate for getting the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> bounds of a <typeparamref name="TSpatialEntity"/>.</param>
            <param name="bucketCapacity">The maximum number of items allowed in this node before it gets quartered.</param>
            <param name="maxDepth">The maximum number of levels of child nodes allowed across the entire quad tree.</param>
        </member>
        <member name="P:DaLion.Shared.Classes.Quadtree`1.Bounds">
            <summary>Gets the bounding rectangle of the region that this <see cref="T:DaLion.Shared.Classes.Quadtree`1"/>'s contents occupy.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.Quadtree`1.Level">
            <summary>
                Gets the level of this node within the overall <see cref="T:DaLion.Shared.Classes.Quadtree`1"/>; that is, the number of edges on the path from this
                node to the root node.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Classes.Quadtree`1.IsLeaf">
            <summary>Gets a value indicating whether this node is a terminal node for the tree (i.e., it has no children).</summary>
            <remarks>
                The majority of spatial elements reside in leaf nodes, the only exceptions being elements whose bounds overlap
                multiple split node boundaries.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.Insert(`0)">
            <summary>Inserts the specified <paramref name="entity"/> into the <see cref="T:DaLion.Shared.Classes.Quadtree`1"/> at the appropriate node.</summary>
            <param name="entity">The <typeparamref name="TSpatialEntity"/> to be inserted>.</param>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.Remove(`0)">
            <summary>Removes the specified <paramref name="entity"/> from the <see cref="T:DaLion.Shared.Classes.Quadtree`1"/> and whichever node it's been assigned to.</summary>
            <param name="entity">The <typeparamref name="TSpatialEntity"/> to be removed.</param>
            <returns><see langword="true"/> if the <paramref name="entity"/> is successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.Update">
            <summary>Updates the positions of every <typeparamref name="TSpatialEntity"/> in the <see cref="T:DaLion.Shared.Classes.Quadtree`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.NearestNeighbors(`0)">
            <summary>Gets the nearest neighbors of the specified <paramref name="entity"/>.</summary>
            <param name="entity">The spatial element to find collisions for.</param>
            <returns>All spatial elements that collide with <c>element</c>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.CountEntities">
            <summary>Gets the total number of entities belonging to this and all descending nodes.</summary>
            <returns>The total number of entities belong to this and all descending nodes.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.Quadtree`1.GetEntities">
            <summary>Retrieves the entities belonging to this and all descendant nodes.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the <typeparamref name="TSpatialEntity"/>'s belonging to this and all descendant nodes.</returns>
        </member>
        <member name="T:DaLion.Shared.Commands.ConsoleCommand">
            <summary>Base implementation of a console command for a mod.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.ConsoleCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Commands.ConsoleCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Shared.Commands.ConsoleCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Commands.ConsoleCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Commands.ConsoleCommand.Handler">
            <summary>Gets the <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.ConsoleCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Commands.ConsoleCommand.CallbackImpl(System.String,System.String[])">
            <inheritdoc cref="M:DaLion.Shared.Commands.ConsoleCommand.Callback(System.String,System.String[])"/>
            <returns><see lamngword="true"/> if the command ran successfully, or <see langword="false"/> if the user should be shown usage instructions.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.ConsoleCommand.GetUsage">
            <summary>Gets the usage documentation for the command.</summary>
            <returns>A formatted <see cref="T:System.String"/> with the usage documentation of the command.</returns>
        </member>
        <member name="T:DaLion.Shared.Commands.CommandHandler">
            <summary>Handles mod-provided <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</summary>
        </member>
        <member name="F:DaLion.Shared.Commands.CommandHandler._commandHelper">
            <inheritdoc cref="T:StardewModdingAPI.ICommandHelper"/>
        </member>
        <member name="F:DaLion.Shared.Commands.CommandHandler._handledCommands">
            <summary>Cache of handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> instances.</summary>
        </member>
        <member name="F:DaLion.Shared.Commands.CommandHandler._conditional">
            <summary>An optional conditional expression that prevents the entry command from being executed.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.#ctor(StardewModdingAPI.ICommandHelper,DaLion.Shared.Logger)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Commands.CommandHandler"/> class.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
        </member>
        <member name="P:DaLion.Shared.Commands.CommandHandler.Log">
            <inheritdoc cref="T:DaLion.Shared.Logger"/>
        </member>
        <member name="P:DaLion.Shared.Commands.CommandHandler.EntryCommand">
            <summary>Gets the <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</summary>
        </member>
        <member name="P:DaLion.Shared.Commands.CommandHandler.Mod">
            <summary>Gets the human-readable name of the providing mod.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleAll(System.Reflection.Assembly,StardewModdingAPI.ICommandHelper,DaLion.Shared.Logger,System.String,System.String,System.Func{System.Boolean})">
            <summary>Implicitly registers all <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types in the specified <paramref name="assembly"/> using reflection.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleFromNamespace(System.Reflection.Assembly,System.String,StardewModdingAPI.ICommandHelper,DaLion.Shared.Logger,System.String,System.String,System.Func{System.Boolean})">
            <summary>Implicitly registers only the <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types iin the specified <paramref name="assembly"/> which are also within the specified <paramref name="namespace"/>.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <param name="namespace">The desired namespace.</param>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleWithAttribute``1(System.Reflection.Assembly,StardewModdingAPI.ICommandHelper,DaLion.Shared.Logger,System.String,System.String,System.Func{System.Boolean})">
            <summary>Implicitly registers only the <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types in the specified <paramref name="assembly"/> which are also decorated with <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <param name="assembly">The assembly containing the types.</param>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.Handle(DaLion.Shared.Commands.IConsoleCommand)">
            <summary>Handles the specified <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> instance.</summary>
            <param name="command">A <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.Handle``1">
            <summary>Handles the specified <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> instance.</summary>
            <typeparam name="TCommand">A type which implements <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>.</typeparam>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.Register(System.String,System.String,System.Func{System.Boolean})">
            <summary>Registers the entry command and name for this handler.</summary>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.Entry(System.String,System.String[])">
            <summary>Handles the entry command for this module, delegating to the appropriate <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>.</summary>
            <param name="command">The entry command.</param>
            <param name="args">The supplied arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleImplicitly(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>Implicitly handles <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types using reflection.</summary>
            <param name="assembly">The assembly to search within.</param>
            <param name="predicate">An optional condition with which to limit the scope of handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
        </member>
        <member name="T:DaLion.Shared.Commands.IConsoleCommand">
            <summary>Interface for a console command for a mod.</summary>
        </member>
        <member name="P:DaLion.Shared.Commands.IConsoleCommand.Triggers">
            <summary>Gets the statement that triggers this command.</summary>
        </member>
        <member name="P:DaLion.Shared.Commands.IConsoleCommand.Documentation">
            <summary>Gets the human-readable documentation shown when the player runs the 'help' command.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.IConsoleCommand.Callback(System.String,System.String[])">
            <summary>The action that will be executed.</summary>
            <param name="trigger">The trigger word.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="T:DaLion.Shared.Constants.MathConstants">
            <summary>Provides generally useful mathematical constants.</summary>
        </member>
        <member name="F:DaLion.Shared.Constants.MathConstants.SQRT2">
            <summary>The square-root of 2.</summary>
        </member>
        <member name="F:DaLion.Shared.Constants.MathConstants.PHI">
            <summary>The golden ratio.</summary>
        </member>
        <member name="T:DaLion.Shared.Content.AssetEditor">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.AssetEditor"/> record.</summary>
            <param name="Apply">A delegate callback for applying edits to the content asset.</param>
            <param name="Priority">The priority for an asset edit when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.AssetEditor.#ctor(System.Action{StardewModdingAPI.IAssetData},StardewModdingAPI.Events.AssetEditPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.AssetEditor"/> record.</summary>
            <param name="Apply">A delegate callback for applying edits to the content asset.</param>
            <param name="Priority">The priority for an asset edit when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.AssetEditor.Apply">
            <summary>A delegate callback for applying edits to the content asset.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.AssetEditor.Priority">
            <summary>The priority for an asset edit when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.AssetEditor.Edit(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.DictionaryProvider`2">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.DictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.DictionaryProvider`2.#ctor(System.Func{System.Collections.Generic.Dictionary{`0,`1}},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.DictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.DictionaryProvider`2.Load">
            <summary>A delegate callback for loading the initial instance of the content asset.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.DictionaryProvider`2.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.DictionaryProvider`2.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.IAssetEditor">
            <summary>Interface for a class which edits an asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.IAssetEditor.Edit(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <summary>Edits the asset.</summary>
            <param name="e">Event arguments for an <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/> event.</param>
        </member>
        <member name="T:DaLion.Shared.Content.IAssetProvider">
            <summary>Interface for a class which provides an asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.IAssetProvider.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <summary>Provides the asset.</summary>
            <param name="e">Event arguments for an <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/> event.</param>
        </member>
        <member name="T:DaLion.Shared.Content.ModDictionaryProvider`2">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModDictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="GetPath">A delegate which returns the relative path to the JSON dictionary inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.ModDictionaryProvider`2.#ctor(System.Func{System.String},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModDictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="GetPath">A delegate which returns the relative path to the JSON dictionary inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.ModDictionaryProvider`2.GetPath">
            <summary>A delegate which returns the relative path to the JSON dictionary inside the mod folder.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.ModDictionaryProvider`2.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.ModDictionaryProvider`2.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.ModTextureProvider">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModTextureProvider"/> record.</summary>
            <param name="GetPath">A delegate which returns the relative path to the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.ModTextureProvider.#ctor(System.Func{System.String},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModTextureProvider"/> record.</summary>
            <param name="GetPath">A delegate which returns the relative path to the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.ModTextureProvider.GetPath">
            <summary>A delegate which returns the relative path to the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> inside the mod folder.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.ModTextureProvider.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.ModTextureProvider.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.TextureProvider">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.TextureProvider"/> record.</summary>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.TextureProvider.#ctor(System.Func{Microsoft.Xna.Framework.Graphics.Texture2D},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.TextureProvider"/> record.</summary>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.TextureProvider.Load">
            <summary>A delegate callback for loading the initial instance of the content asset.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.TextureProvider.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.TextureProvider.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Enums.Buff">
            <summary>A named <see cref="T:StardewValley.Buff"/> applied on a <see cref="T:StardewValley.Farmer"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Burnt">
            <summary>The Burnt debuff, caused by being hit by a Magma Sparker.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Full">
            <summary>Full. Implementation unknown.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Quenched">
            <summary>Burnt. Implementation unknown.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Tipsy">
            <summary>The Tipsy debuff, caused by consuming alcohol.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Slimed">
            <summary>The Slimed debuff, causing by being hit by a Slime.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Spooked">
            <summary>The Spooked debuff. Implementation unknown.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Jinxed">
            <summary>The Jinxed debuff, caused by being hit by a Shadow Shaman's fireball.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Frozen">
            <summary>The Frozen debuff, caused by being hit by a Skeleton Mage.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.WarriorEnergy">
            <summary>The Warrior Energy buff, granted by killing an enemy while wearing a Warrior Ring.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.YobasBlessing">
            <summary>The Yoba's Blessing buff, granted by being hit while wearing a Ring of Yoba.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.AdrenalineRush">
            <summary>The Adrenaline Rush buff, granted by killing an enemy while wearing a Savage Ring.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.OilOfGarlic">
            <summary>The Oil Of Garlic buff, granted by consuming Oil of Garlic.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.MonsterMusk">
            <summary>The Monster Musk buff, granted by consuming Monster Musk.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Nauseated">
            <summary>The Nauseated debuff, caused by being hit by a Putrid Ghost.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Darkness">
            <summary>The Darkness debuff, caused by being hit by a Shadow Sniper.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.Weakness">
            <summary>The Weakness debuff, caused by being hit by a Blue Squid's orb.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Buff.SquidInkRavioli">
            <summary>The Squid Ink Raviola buff, granted by consuming Squid Ink Ravioli.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.ObjectCategory">
            <summary>A <see cref="T:StardewValley.Object"/> category.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Gems">
            <summary>The category for gemstones.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Fish">
            <summary>The category for fish.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Eggs">
            <summary>The category for eggs.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Milk">
            <summary>The category for milk.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Cooking">
            <summary>The category for cooking ingredients.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Crafting">
            <summary>The category for crafting materials.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Minerals">
            <summary>The category for minerals.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Meats">
            <summary>The category for meats (unused in vanilla).</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Metals">
            <summary>The category for metal ores and bars.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.AnimalGoods">
            <summary>The category for animal goods.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Junk">
            <summary>The category for junk items.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.ArtisanGoods">
            <summary>The category for artisan goods.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Syrups">
            <summary>The category for saps and syrups.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.MonsterLoot">
            <summary>The category for monster loot.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Seeds">
            <summary>The category for seeds.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Vegetables">
            <summary>The category for vegetables.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Fruits">
            <summary>The category for fruits.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Flowers">
            <summary>The category for flowers.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Greens">
            <summary>The category for foraged goods.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Rings">
            <summary>The category for rings.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectCategory.Artifacts">
            <summary>Special case category for artifacts.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.FacingDirection">
            <summary>The direction which a <see cref="T:StardewValley.Character"/> is facing.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Up">
            <summary>The up direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Right">
            <summary>The right direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Down">
            <summary>The down direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Left">
            <summary>The left direction.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.FacingDirectionExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> enum.</summary>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.IsHorizontal(DaLion.Shared.Enums.FacingDirection)">
            <summary>Checks whether the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> is left or right.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns><see langword="true"/> if <paramref name="direction"/> is left or right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.IsVertical(DaLion.Shared.Enums.FacingDirection)">
            <summary>Checks whether the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> is up or down.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns><see langword="true"/> if <paramref name="direction"/> is up or down, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.Opposite(DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the opposite <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.NextClockwise(DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the opposite <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.NextAntiClockwise(DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the opposite <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.AngleWith(DaLion.Shared.Enums.FacingDirection,DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the angle between two <see cref="T:DaLion.Shared.Enums.FacingDirection"/>s.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <param name="other">Another <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The angle between the two directions, in degrees.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.ToVector(DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets a unit vector which points in the specified direction.</summary>
            <param name="direction">A <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing towards <paramref name="direction"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Enums.ObjectQuality">
            <summary>The star quality of an <see cref="T:StardewValley.Object"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectQuality.Regular">
            <summary>Regular quality.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectQuality.Silver">
            <summary>Silver quality.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectQuality.Gold">
            <summary>Gold quality.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.ObjectQuality.Iridium">
            <summary>Iridium quality.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.QualityExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Enums.ObjectQuality"/> enum.</summary>
        </member>
        <member name="M:DaLion.Shared.Enums.QualityExtensions.Increment(DaLion.Shared.Enums.ObjectQuality)">
            <summary>Improves a <see cref="T:DaLion.Shared.Enums.ObjectQuality"/> level by one stage.</summary>
            <param name="quality">The <see cref="T:DaLion.Shared.Enums.ObjectQuality"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Enums.ObjectQuality"/> one stage higher than <paramref name="quality"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.QualityExtensions.Decrement(DaLion.Shared.Enums.ObjectQuality)">
            <summary>Lowers a <see cref="T:DaLion.Shared.Enums.ObjectQuality"/> level by one stage.</summary>
            <param name="quality">The <see cref="T:DaLion.Shared.Enums.ObjectQuality"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Enums.ObjectQuality"/> one stage lower than <paramref name="quality"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Enums.WeaponType">
            <summary>The actual type of <see cref="T:StardewValley.Tools.MeleeWeapon"/> or <see cref="T:StardewValley.Tools.Slingshot"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.WeaponType.StabbingSword">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.stabbingSword"/> type.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.WeaponType.Dagger">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.dagger"/> type.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.WeaponType.Club">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.club"/> type.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.WeaponType.DefenseSword">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.defenseSword"/> type.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.WeaponType.Slingshot">
            <summary>The <see cref="F:DaLion.Shared.Enums.WeaponType.Slingshot"/> type.</summary>
        </member>
        <member name="T:DaLion.Shared.Data.ModDataManager">
            <summary>Handles reading from and writing to the <see cref="T:StardewValley.Mods.ModDataDictionary"/> of different objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.#ctor(System.String,DaLion.Shared.Logger)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Data.ModDataManager"/> class.</summary>
            <param name="id">The ID of the parent <see cref="T:StardewModdingAPI.Mod"/>.</param>
            <param name="logger">Reference to a <see cref="T:DaLion.Shared.Logger"/> instance.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.RegisterReadCallback(System.String,System.Action{System.String})">
            <summary>Adds the specified <paramref name="callback"/> to be triggered when reading from the specified <paramref name="key"/>.</summary>
            <param name="key">The data key.</param>
            <param name="callback">A <see cref="T:System.Action"/> to invoke.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="key"/> already has an associated callback.</exception>
            <remarks>Does not distinguish between object types; i.e., data keys must be universally unique.</remarks>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.RegisterWriteCallback(System.String,System.Action{System.String,System.String})">
            <summary>Adds the specified <paramref name="callback"/> to be triggered when writing to the specified <paramref name="key"/>.</summary>
            <param name="key">The data key.</param>
            <param name="callback">A <see cref="T:System.Action"/> to invoke.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="key"/> already has an associated callback.</exception>
            <remarks>Does not distinguish between object types; i.e., data keys must be universally unique.</remarks>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.Farmer,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/> as
                <see cref="T:System.String"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.Farmer,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/> as
                <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.Farmer,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or
                removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> or empty to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.Farmer,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> or empty to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.Farmer,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the <paramref name="farmer"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with that <paramref name="value"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.Farmer,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="farmer"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.Farmer,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="farmer"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by 1.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>
                as <see cref="T:System.String"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.Buildings.Building,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>
                as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                or removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if data was written, or <see langword="false"/> if the key already existed.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.Buildings.Building,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the
                <paramref name="building"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.Buildings.Building,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="building"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.Buildings.Building,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the building's <see cref="T:StardewValley.Mods.ModDataDictionary"/>
                by 1.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.Character,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> from the <paramref name="character"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.Character,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> from the <paramref name="character"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.Character,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="character"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                or removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> or empty to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.Character,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="character"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> or empty to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.Character,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the
                <paramref name="character"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.Character,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="character"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.Character,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="character"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by 1.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.GameLocation,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> from the <paramref name="location"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.GameLocation,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> from the <paramref name="location"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.GameLocation,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="location"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                or removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.GameLocation,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="location"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.GameLocation,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the
                <paramref name="location"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with the that
                <paramref name="value"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.GameLocation,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="location"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.GameLocation,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="location"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by 1.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.Item,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/> as
                <see cref="T:System.String"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.Item,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/> as
                <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.Item,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or
                removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.Item,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, only
                if it doesn't yet have a value.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.Item,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the <paramref name="item"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with that <paramref name="value"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.Item,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="item"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.Item,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="item"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by 1.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name = "terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/>, only if it doesn't yet have a value.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> was written to, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the
                <paramref name="terrainFeature"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by 1.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Read(StardewValley.Crop,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="crop"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.ReadAs``1(StardewValley.Crop,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="key"/> in the <paramref name="crop"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="key"/>'s value. This should most likely be a primitive.</typeparam>
            <param name = "crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="key"/> does not exist.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns>The value of the <paramref name="key"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Write(StardewValley.Crop,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="crop"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or removes it if supplied a null or empty <paramref name="newValue"/>.
            </summary>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="newValue">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.WriteIfNotExists(StardewValley.Crop,System.String,System.String,System.String)">
            <summary>
                Writes to a <paramref name="key"/> in the <paramref name="crop"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/>, only if it doesn't yet have a value.
            </summary>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="key"/>.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> was written to, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Append(StardewValley.Crop,System.String,System.String,System.Char,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="key"/> in the
                <paramref name="crop"/>'s <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment``1(StardewValley.Crop,System.String,``0,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="crop"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="key"/>. This should most likely be an integer type.</typeparam>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataManager.Increment(StardewValley.Crop,System.String,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="key"/> in the <paramref name="crop"/>'s
                <see cref="T:StardewValley.Mods.ModDataDictionary"/> by 1.
            </summary>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <param name="key">The key to update.</param>
            <param name="modId">The unique ID of the owner mod, to be used as an identifier.</param>
        </member>
        <member name="T:DaLion.Shared.Data.ModDataDictionaryExtensions">
            <summary>Provides extension methods for reading and writing values in the <see cref="T:StardewValley.Mods.ModDataDictionary"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataDictionaryExtensions.Read(StardewValley.Mods.ModDataDictionary,System.String,System.String)">
            <summary>Reads a value from the <see cref="T:StardewValley.Mods.ModDataDictionary"/> as a <see cref="T:System.String"/>.</summary>
            <param name="data">The <see cref="T:StardewValley.Mods.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to read from.</param>
            <param name="defaultValue">The default value to return if the <paramref name="key"/> does not exist.</param>
            <returns>The value of the specified <paramref name="key"/> if it exists, or <paramref name="defaultValue"/> value if it doesn't.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataDictionaryExtensions.Read``1(StardewValley.Mods.ModDataDictionary,System.String,``0)">
            <summary>
                Reads a value from the <see cref="T:StardewValley.Mods.ModDataDictionary"/> and tries to parse it as type
                <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="data">The <see cref="T:StardewValley.Mods.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to read from.</param>
            <param name="defaultValue">The default value to return if the key does not exist.</param>
            <returns>
                The value of the specified <paramref name="key"/> if it exists, parsed as type <typeparamref name="T"/>, or <paramref name="defaultValue"/> if
                the <paramref name="key"/> doesn't exist or fails to parse.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataDictionaryExtensions.Write(StardewValley.Mods.ModDataDictionary,System.String,System.String)">
            <summary>
                Writes a <see cref="T:System.String"/> <paramref name="value"/> to the <see cref="T:StardewValley.Mods.ModDataDictionary"/>, or removes the
                corresponding <paramref name="key"/> if the <paramref name="value"/> is null or empty.
            </summary>
            <param name="data">The <see cref="T:StardewValley.Mods.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the key.</param>
            <returns>The interface to <paramref name="data"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Data.ModDataDictionaryExtensions.ToDebugString(StardewValley.Mods.ModDataDictionary,System.Func{System.String,System.Boolean})">
            <summary>Gets a <see cref="T:System.String"/> representation of the <see cref="T:StardewValley.Mods.ModDataDictionary"/>.</summary>
            <param name="data">The <see cref="T:StardewValley.Mods.ModDataDictionary"/>.</param>
            <param name="predicate">An optional condition with which to filter out data entry keys.</param>
            <returns>A <see cref="T:System.String"/> representation of the <see cref="T:StardewValley.Mods.ModDataDictionary"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Events.AssetReadyEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetReady"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.AssetReadyEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.OnAssetReady(System.Object,StardewModdingAPI.Events.AssetReadyEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.AssetReady"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.OnAssetReadyImpl(System.Object,StardewModdingAPI.Events.AssetReadyEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.AssetReadyEvent.OnAssetReady(System.Object,StardewModdingAPI.Events.AssetReadyEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.AssetRequestedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.AssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.OnAssetRequested(System.Object,StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.OnAssetRequestedImpl(System.Object,StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.AssetRequestedEvent.OnAssetRequested(System.Object,StardewModdingAPI.Events.AssetRequestedEventArgs)"/>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Initialize">
            <summary>Initializes editors and providers.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Edit(System.String,DaLion.Shared.Content.IAssetEditor)">
            <summary>Caches the specified <paramref name="editor"/> for the asset with the specified <paramref name="name"/>.</summary>
            <param name="name">The name of the asset.</param>
            <param name="editor">The <see cref="T:DaLion.Shared.Content.AssetEditor"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Provide(System.String,DaLion.Shared.Content.IAssetProvider)">
            <summary>Caches the specified <paramref name="provider"/> for the asset with the specified <paramref name="name"/>.</summary>
            <param name="name">The name of the asset.</param>
            <param name="provider">The <see cref="T:DaLion.Shared.Content.IAssetProvider"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Events.AssetsInvalidatedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetsInvalidated"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.AssetsInvalidatedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.OnAssetsInvalidated(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.AssetsInvalidated"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.OnAssetsInvalidatedImpl(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.AssetsInvalidatedEvent.OnAssetsInvalidated(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LocaleChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.LocaleChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LocaleChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.OnLocaleChanged(System.Object,StardewModdingAPI.Events.LocaleChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.LocaleChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.OnLocaleChangedImpl(System.Object,StardewModdingAPI.Events.LocaleChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LocaleChangedEvent.OnLocaleChanged(System.Object,StardewModdingAPI.Events.LocaleChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.AlwaysEnabledEventAttribute">
            <summary>Specifies that a <see cref="T:DaLion.Shared.Events.IManagedEvent"/> should ignore its <see cref="P:DaLion.Shared.Events.IManagedEvent.IsEnabled"/> flag.</summary>
        </member>
        <member name="T:DaLion.Shared.Events.SecondSecondUpdateTickedEvent">
            <summary>Wrapper for a <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/> which executes exactly once, after two seconds of game time has elapsed.</summary>
            <remarks>Useful for set-up code which requires third-party mod integrations to be registered.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SecondSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.OnSecondSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.OnSecondSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.OnSecondSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)"/>
        </member>
        <member name="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SecondSecondUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Events.FirstSecondUpdateTickedEvent">
            <summary>Wrapper for a <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/> which executes exactly once, after one second of game time has elapsed.</summary>
            <remarks>Useful for set-up code which requires third-party mod integrations to be registered.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.FirstSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.OnFirstSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.OnFirstSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.OnFirstSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ButtonReleasedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.ButtonReleased"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ButtonReleasedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.OnButtonReleased(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.ButtonReleased"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.OnButtonReleasedImpl(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ButtonReleasedEvent.OnButtonReleased(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ButtonPressedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.ButtonPressed"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.OnButtonPressed(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.ButtonPressed"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ButtonPressedEvent.OnButtonPressed(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ButtonsChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.ButtonsChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ButtonsChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.OnButtonsChanged(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.ButtonsChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.OnButtonsChangedImpl(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ButtonsChangedEvent.OnButtonsChanged(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.MouseWheelScrolledEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.MouseWheelScrolled"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.MouseWheelScrolledEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.OnMouseWheelScrolled(System.Object,StardewModdingAPI.Events.MouseWheelScrolledEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.MouseWheelScrolled"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.OnMouseWheelScrolledImpl(System.Object,StardewModdingAPI.Events.MouseWheelScrolledEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.MouseWheelScrolledEvent.OnMouseWheelScrolled(System.Object,StardewModdingAPI.Events.MouseWheelScrolledEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.CursorMovedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.CursorMoved"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.CursorMovedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.OnCursorMoved(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.CursorMoved"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.OnCursorMovedImpl(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.CursorMovedEvent.OnCursorMoved(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.MenuChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.MenuChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.MenuChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.OnMenuChanged(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.MenuChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.OnMenuChangedImpl(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.MenuChangedEvent.OnMenuChanged(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedActiveMenuEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedActiveMenu"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.OnRenderedActiveMenu(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedActiveMenu"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.OnRenderedActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedActiveMenuEvent.OnRenderedActiveMenu(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendered"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.OnRendered(System.Object,StardewModdingAPI.Events.RenderedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendered"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.OnRenderedImpl(System.Object,StardewModdingAPI.Events.RenderedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedEvent.OnRendered(System.Object,StardewModdingAPI.Events.RenderedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedHudEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedHud"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.OnRenderedHud(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedHud"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedHudEvent.OnRenderedHud(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedWorldEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedWorld"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.OnRenderedWorld(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedWorld"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedWorldEvent.OnRenderedWorld(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingActiveMenuEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingActiveMenu"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.OnRenderingActiveMenu(System.Object,StardewModdingAPI.Events.RenderingActiveMenuEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingActiveMenu"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.OnRenderingActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderingActiveMenuEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingActiveMenuEvent.OnRenderingActiveMenu(System.Object,StardewModdingAPI.Events.RenderingActiveMenuEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendering"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.OnRendering(System.Object,StardewModdingAPI.Events.RenderingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendering"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.OnRenderingImpl(System.Object,StardewModdingAPI.Events.RenderingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingEvent.OnRendering(System.Object,StardewModdingAPI.Events.RenderingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingHudEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingHud"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.OnRenderingHud(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingHud"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.OnRenderingHudImpl(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingHudEvent.OnRenderingHud(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingWorldEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingWorld"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.OnRenderingWorld(System.Object,StardewModdingAPI.Events.RenderingWorldEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingWorld"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.OnRenderingWorldImpl(System.Object,StardewModdingAPI.Events.RenderingWorldEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingWorldEvent.OnRenderingWorld(System.Object,StardewModdingAPI.Events.RenderingWorldEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.WindowResizedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.WindowResized"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.WindowResizedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.OnWindowResized(System.Object,StardewModdingAPI.Events.WindowResizedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.WindowResized"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.OnWindowResizedImpl(System.Object,StardewModdingAPI.Events.WindowResizedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.WindowResizedEvent.OnWindowResized(System.Object,StardewModdingAPI.Events.WindowResizedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.DayEndingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayEnding"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.DayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.OnDayEnding(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayEnding"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.DayEndingEvent.OnDayEnding(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.DayStartedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayStarted"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.DayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.OnDayStarted(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <summary>Raised after a new in-game day starts, or after connecting to a multiplayer world.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.DayStartedEvent.OnDayStarted(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.GameLaunchedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.GameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.OnGameLaunched(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.GameLaunchedEvent.OnGameLaunched(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)"/>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Events.OneSecondUpdateTickedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.OneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.OnOneSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.OnOneSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.OneSecondUpdateTickingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicking"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.OneSecondUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.OnOneSecondUpdateTicking(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicking"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.OnOneSecondUpdateTickingImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.OnOneSecondUpdateTicking(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ReturnedToTitleEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.ReturnedToTitle"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ReturnedToTitleEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.OnReturnedToTitle(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.ReturnedToTitle"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.OnReturnedToTitleImpl(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ReturnedToTitleEvent.OnReturnedToTitle(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SaveCreatingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SaveCreatingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.SaveCreatingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.OnSaveCreating(System.Object,StardewModdingAPI.Events.SaveCreatingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.OnSaveCreatingImpl(System.Object,StardewModdingAPI.Events.SaveCreatingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SaveCreatingEvent.OnSaveCreating(System.Object,StardewModdingAPI.Events.SaveCreatingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SaveCreatedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreated"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SaveCreatedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.SaveCreatedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.OnSaveCreated(System.Object,StardewModdingAPI.Events.SaveCreatedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreated"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.OnSaveCreatedImpl(System.Object,StardewModdingAPI.Events.SaveCreatedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SaveCreatedEvent.OnSaveCreated(System.Object,StardewModdingAPI.Events.SaveCreatedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SavedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saved"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SavedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.OnSaved(System.Object,StardewModdingAPI.Events.SavedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saved"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.OnSavedImpl(System.Object,StardewModdingAPI.Events.SavedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SavedEvent.OnSaved(System.Object,StardewModdingAPI.Events.SavedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SaveLoadedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveLoaded"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.OnSaveLoaded(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveLoaded"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SaveLoadedEvent.OnSaveLoaded(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SavingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SavingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.OnSaving(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.OnSavingImpl(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SavingEvent.OnSaving(System.Object,StardewModdingAPI.Events.SavingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.TimeChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.TimeChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.TimeChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.OnTimeChanged(System.Object,StardewModdingAPI.Events.TimeChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.TimeChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.OnTimeChangedImpl(System.Object,StardewModdingAPI.Events.TimeChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.TimeChangedEvent.OnTimeChanged(System.Object,StardewModdingAPI.Events.TimeChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UpdateTickedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.OnUpdateTicked(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UpdateTickedEvent.OnUpdateTicked(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UpdateTickingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicking"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.OnUpdateTicking(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicking"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.OnUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UpdateTickingEvent.OnUpdateTicking(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.InventoryChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IPlayerEvents.InventoryChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.InventoryChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.OnInventoryChanged(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IPlayerEvents.InventoryChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.OnInventoryChangedImpl(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.InventoryChangedEvent.OnInventoryChanged(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LevelChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IPlayerEvents.LevelChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LevelChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.OnLevelChanged(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IPlayerEvents.LevelChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.OnLevelChangedImpl(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LevelChangedEvent.OnLevelChanged(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.WarpedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IPlayerEvents.Warped"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.WarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.OnWarped(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IPlayerEvents.Warped"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.WarpedEvent.OnWarped(System.Object,StardewModdingAPI.Events.WarpedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ModMessageReceivedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.ModMessageReceived"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.ModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.OnModMessageReceived(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.ModMessageReceived"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ModMessageReceivedEvent.OnModMessageReceived(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.PeerConnectedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerConnected"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.PeerConnectedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.PeerConnectedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.OnPeerConnected(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerConnected"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.OnPeerConnectedImpl(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.PeerConnectedEvent.OnPeerConnected(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.PeerContextReceivedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerContextReceived"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.PeerContextReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.PeerContextReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.OnPeerContextReceived(System.Object,StardewModdingAPI.Events.PeerContextReceivedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerContextReceived"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.OnPeerContextReceivedImpl(System.Object,StardewModdingAPI.Events.PeerContextReceivedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.PeerContextReceivedEvent.OnPeerContextReceived(System.Object,StardewModdingAPI.Events.PeerContextReceivedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.PeerDisconnectedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerDisconnected"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.PeerDisconnectedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.PeerDisconnectedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.OnPeerDisconnected(System.Object,StardewModdingAPI.Events.PeerDisconnectedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerDisconnected"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.OnPeerDisconnectedImpl(System.Object,StardewModdingAPI.Events.PeerDisconnectedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.PeerDisconnectedEvent.OnPeerDisconnected(System.Object,StardewModdingAPI.Events.PeerDisconnectedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LoadStageChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LoadStageChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.OnLoadStageChanged(System.Object,StardewModdingAPI.Events.LoadStageChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.OnLoadStageChangedImpl(System.Object,StardewModdingAPI.Events.LoadStageChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LoadStageChangedEvent.OnLoadStageChanged(System.Object,StardewModdingAPI.Events.LoadStageChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.OnUnvalidatedUpdateTicked(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.OnUnvalidatedUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.OnUnvalidatedUpdateTicked(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.OnUnvalidatedUpdateTicking(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.OnUnvalidatedUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.OnUnvalidatedUpdateTicking(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.BuildingListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.BuildingListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.BuildingListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.OnBuildingListChanged(System.Object,StardewModdingAPI.Events.BuildingListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.BuildingListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.OnBuildingListChangedImpl(System.Object,StardewModdingAPI.Events.BuildingListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.BuildingListChangedEvent.OnBuildingListChanged(System.Object,StardewModdingAPI.Events.BuildingListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ChestInventoryChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.ChestInventoryChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ChestInventoryChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.OnChestInventoryChanged(System.Object,StardewModdingAPI.Events.ChestInventoryChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.ChestInventoryChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.OnChestInventoryChangedImpl(System.Object,StardewModdingAPI.Events.ChestInventoryChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ChestInventoryChangedEvent.OnChestInventoryChanged(System.Object,StardewModdingAPI.Events.ChestInventoryChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.DebrisListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.DebrisListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.DebrisListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.OnDebrisListChanged(System.Object,StardewModdingAPI.Events.DebrisListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.DebrisListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.OnDebrisListChangedImpl(System.Object,StardewModdingAPI.Events.DebrisListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.DebrisListChangedEvent.OnDebrisListChanged(System.Object,StardewModdingAPI.Events.DebrisListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.FurnitureListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.FurnitureListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.FurnitureListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.OnFurnitureListChanged(System.Object,StardewModdingAPI.Events.FurnitureListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.FurnitureListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.OnFurnitureListChangedImpl(System.Object,StardewModdingAPI.Events.FurnitureListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.FurnitureListChangedEvent.OnFurnitureListChanged(System.Object,StardewModdingAPI.Events.FurnitureListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.LargeTerrainFeatureListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.OnLargeTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.LargeTerrainFeatureListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.OnLargeTerrainFeatureListChangedImpl(System.Object,StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.OnLargeTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LocationListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.LocationListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LocationListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.OnLocationListChanged(System.Object,StardewModdingAPI.Events.LocationListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.LocationListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.OnLocationListChangedImpl(System.Object,StardewModdingAPI.Events.LocationListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LocationListChangedEvent.OnLocationListChanged(System.Object,StardewModdingAPI.Events.LocationListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.NpcListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.NpcListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.NpcListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.OnNpcListChanged(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.NpcListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.OnNpcListChangedImpl(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.NpcListChangedEvent.OnNpcListChanged(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ObjectListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.ObjectListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ObjectListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.OnObjectListChanged(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.ObjectListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.OnObjectListChangedImpl(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ObjectListChangedEvent.OnObjectListChanged(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.TerrainFeatureListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.TerrainFeatureListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.TerrainFeatureListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.OnTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.TerrainFeatureListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.OnTerrainFeatureListChangedImpl(System.Object,StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.OnTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.EventManager">
            <summary>
                Instantiates and manages dynamic enabling and disabling of <see cref="T:DaLion.Shared.Events.IManagedEvent"/> classes in an
                assembly or namespace.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Events.EventManager._eventCache">
            <summary>Cache of <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances by type.</summary>
        </member>
        <member name="F:DaLion.Shared.Events.EventManager._modRegistry">
            <inheritdoc cref="T:StardewModdingAPI.IModRegistry"/>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.#ctor(StardewModdingAPI.Events.IModEvents,StardewModdingAPI.IModRegistry,DaLion.Shared.Logger)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.EventManager"/> class.</summary>
            <param name="modEvents">The <see cref="T:StardewModdingAPI.Events.IModEvents"/> API for the current mod.</param>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.Log">
            <inheritdoc cref="T:DaLion.Shared.Logger"/>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.ModEvents">
            <inheritdoc cref="T:StardewModdingAPI.Events.IModEvents"/>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.Managed">
            <summary>Gets an enumerable of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s instances.</summary>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.Enabled">
            <summary>Gets an enumerable of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s currently enabled for the local player.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnabledForScreen(System.Int32)">
            <summary>Enumerates all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s currently enabled for the specified screen.</summary>
            <param name="screenId">The screen ID.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of enabled <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s in the specified screen.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Manage(DaLion.Shared.Events.IManagedEvent)">
            <summary>Adds the <paramref name="event"/> instance to the cache.</summary>
            <param name="event">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Manage``1(System.Object[])">
            <summary>Adds an instance of type <typeparamref name="TEvent"/> to the cache.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
            <param name="parameters">The parameters for the constructor of <typeparamref name="TEvent"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageInitial(System.Reflection.Assembly)">
            <summary>Implicitly manages all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types in the specified <paramref name="assembly"/>> using reflection.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <returns>The <see cref="T:DaLion.Shared.Events.EventManager"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageAll(System.Reflection.Assembly)">
            <summary>Implicitly manages all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types in the specified <paramref name="assembly"/>> using reflection.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <returns>The <see cref="T:DaLion.Shared.Events.EventManager"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageNamespace(System.Reflection.Assembly,System.String)">
            <summary>Implicitly manages only the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types in the specified <paramref name="assembly"/>> which are also within the specified <paramref name="namespace"/>.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <param name="namespace">The desired namespace.</param>
            <returns>The <see cref="T:DaLion.Shared.Events.EventManager"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageWithAttribute``1(System.Reflection.Assembly)">
            <summary>Implicitly manages only the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types in the specified <paramref name="assembly"/>> which are also decorated with <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <param name="assembly">The assembly containing the types.</param>
            <returns>The <see cref="T:DaLion.Shared.Events.EventManager"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Unmanage(DaLion.Shared.Events.IManagedEvent)">
            <summary>Disposes the <paramref name="event"/> instance and removes it from the cache.</summary>
            <param name="event">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Unmanage``1">
            <summary>Disposes an event of type <typeparamref name="TEvent"/>, if any exist.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to unmanage.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.UnmanageAll">
            <summary>Disposes all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances and clear the event cache.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.UnmanageNamespace(System.String)">
            <summary>Disposes all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances belonging to the specified namespace and removes them from the cache.</summary>
            <param name="namespace">The desired namespace.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.UnmanageWithAttribute``1">
            <summary>Disposes all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances with the specified attribute type.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Enable(System.Type)">
            <summary>Enable a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Enable(System.Type[])">
            <summary>Enables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Enable``1">
            <summary>Enable a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</typeparam>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForScreen(System.Int32,System.Type)">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForScreen(System.Int32,System.Type[])">
            <summary>Enables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types for the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForScreen``1(System.Int32)">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</typeparam>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForAllScreens(System.Type)">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForAllScreens(System.Type[])">
            <summary>Enables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types for the specified screen.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForAllScreens``1">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Disable(System.Type)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Disable(System.Type[])">
            <summary>Disables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s events.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Disable``1">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForScreen(System.Type,System.Int32)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</param>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForScreen(System.Int32,System.Type[])">
            <summary>Disables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s for the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForScreen``1(System.Int32)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForAllScreens(System.Type)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForAllScreens(System.Type[])">
            <summary>Disables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s for the specified screen.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForAllScreens``1">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableAll">
            <summary>Enables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableAll">
            <summary>Disables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableWithAttribute``1">
            <summary>Enables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types starting with attribute <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableWithAttribute``1">
            <summary>Disables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types starting with attribute <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Reset">
            <summary>Resets the enabled status of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s in the assembly for the current screen.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ResetForAllScreens">
            <summary>Resets the enabled status of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s in the assembly for all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Get(System.Type)">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of type <paramref name="eventType"/>.</summary>
            <param name="eventType">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of the specified <paramref name="eventType"/> if one exists, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Get``1">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of type <typeparamref name="TEvent"/>.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <returns>A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of type <typeparamref name="TEvent"/> if one exists, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetAllForNamespace(System.String)">
            <summary>Enumerates all managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances declared in the specified <paramref name="namespace"/>.</summary>
            <param name="namespace">The desired namespace.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetAllWithAttribute``1">
            <summary>Enumerates all managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances with the specified <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.IsEnabled``1">
            <summary>Determines whether the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type is enabled.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <returns><see langword="true"/> if the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> is enabled for the local screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.IsEnabledForScreen``1(System.Int32)">
            <summary>Determines whether the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type is enabled for a specific screen.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <param name="screenId">The screen ID.</param>
            <returns><see langword="true"/> if the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> is enabled for the specified screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.LogStats">
            <summary>Logs information about currently managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageImplicitly(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>Instantiates and manages <see cref="T:DaLion.Shared.Events.IManagedEvent"/> classes using reflection.</summary>
            <param name="assembly">The assembly to search within.</param>
            <param name="predicate">An optional condition with which to limit the scope of managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetOrCreate(System.Type)">
            <summary>Retrieves an existing event instance from the cache, or caches a new instance.</summary>
            <param name="eventType">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</param>
            <returns>The cached <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance, or <see langword="null"/> if one could not be created.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetOrCreate``1">
            <summary>Retrieves an existing event instance from the cache, or caches a new instance.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <returns>The cached <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance, or <see langword="null"/> if one could not be created.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Create(System.Type)">
            <summary>Instantiates a new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of the specified <paramref name="eventType"/>.</summary>
            <param name="eventType">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of the specified <paramref name="eventType"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Events.IManagedEvent">
            <summary>Interface for an event wrapper allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="P:DaLion.Shared.Events.IManagedEvent.IsEnabled">
            <summary>Gets a value indicating whether this event is enabled.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.IsEnabledForScreen(System.Int32)">
            <summary>Determines whether this event is enabled for a specific screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event is enabled for the specified screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Enable">
            <summary>Enables this event on the current screen.</summary>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.EnableForScreen(System.Int32)">
            <summary>Enables this event on the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.EnableForAllScreens">
            <summary>Enables this event on the all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Disable">
            <summary>Disables this event on the current screen.</summary>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.DisableForScreen(System.Int32)">
            <summary>Disables this event on the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.DisableForAllScreens">
            <summary>Disables this event on the all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Reset">
            <summary>Resets this event's enabled state on all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.ResetForAllScreens">
            <summary>Resets this event's enabled state on all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Unmanage">
            <summary>Disposes and removes this event from the <see cref="T:DaLion.Shared.Events.EventManager"/>'s cache of <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</summary>
        </member>
        <member name="T:DaLion.Shared.Events.ManagedEvent">
            <summary>Base implementation of an event wrapper allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ManagedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.ManagedEvent.IsEnabled">
            <inheritdoc />
            <remarks>Overriding this property may prevent <see cref="M:DaLion.Shared.Events.ManagedEvent.Enable"/> and <see cref="M:DaLion.Shared.Events.ManagedEvent.Disable"/> from doing anything.</remarks>
        </member>
        <member name="P:DaLion.Shared.Events.ManagedEvent.Manager">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.op_Equality(DaLion.Shared.Events.ManagedEvent,DaLion.Shared.Events.ManagedEvent)">
            <summary>Compares whether two <see cref="T:DaLion.Shared.Events.ManagedEvent" /> instances are equal.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Events.ManagedEvent" /> instance on the left of the equal sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Events.ManagedEvent" /> instance on the right of the equal sign.</param>
            <returns><see langword="true"/> if the instances are equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.op_Inequality(DaLion.Shared.Events.ManagedEvent,DaLion.Shared.Events.ManagedEvent)">
            <summary>Compares whether two <see cref="T:DaLion.Shared.Events.ManagedEvent" /> instances are not equal.</summary>
            <param name="left"><see cref="T:DaLion.Shared.Events.ManagedEvent" /> instance on the left of the not equal sign.</param>
            <param name="right"><see cref="T:DaLion.Shared.Events.ManagedEvent" /> instance on the right of the not equal sign.</param>
            <returns><see langword="true"/> if the instances are not equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.IsEnabledForScreen(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Enable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.EnableForScreen(System.Int32)">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnEnabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.EnableForAllScreens">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnEnabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Disable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.DisableForScreen(System.Int32)">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnDisabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.DisableForAllScreens">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnDisabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.ResetForAllScreens">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Unmanage">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.ToString">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.CompareTo(DaLion.Shared.Events.ManagedEvent)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Equals(DaLion.Shared.Events.ManagedEvent)">
            <summary>Determines whether two <see cref="T:DaLion.Shared.Events.ManagedEvent"/> instances are equal.</summary>
            <param name="other">A <see cref="T:DaLion.Shared.Events.ManagedEvent"/> to compare to this instance.</param>
            <returns>
                <see langword="true"/> if <paramref name="other"/> has the same type as this instance, otherwise
                <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.OnEnabled">
            <summary>Invoked once when the event is enabled.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.OnDisabled">
            <summary>Invoked once when the event is disabled.</summary>
        </member>
        <member name="T:DaLion.Shared.Exceptions.MissingTypeException">
            <summary>Thrown when a given type is not found in any executing assembly at runtime.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.MissingTypeException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.MissingTypeException"/> class.</summary>
            <param name="name">The name of the expected type.</param>
        </member>
        <member name="T:DaLion.Shared.Exceptions.ThrowHelperExtensions">
            <summary>Throws <see cref="T:System.Exception"/>s not available in <see cref="T:CommunityToolkit.Diagnostics.ThrowHelper"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowFileLoadException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IO.FileLoadException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowIndexOutOfRangeException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowMissingMethodException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowNotImplementedException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowTypeInitializationException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="fullTypeName">The name of the type which failed to initialize.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowTypeInitializationException``1(System.Exception)">
            <summary>
                Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <typeparam name="T">The type which failed to initialize.</typeparam>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``1(System.Int32)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``1(``0)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``2(System.Int32)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <typeparam name="TReturn">The return type expected by the method where the exception is thrown.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``2(``0)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <typeparam name="TReturn">The return type expected by the method where the exception is thrown.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowPatternNotFoundException(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/>.
            </summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
            <exception cref="T:DaLion.Shared.Exceptions.PatternNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowPatternNotFoundException(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase,System.Func{System.String})">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/>.
            </summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
            <exception cref="T:DaLion.Shared.Exceptions.PatternNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowLabelNotFoundException(System.Reflection.Emit.Label,System.Reflection.MethodBase)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/>.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
            <exception cref="T:DaLion.Shared.Exceptions.LabelNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowLabelNotFoundException(System.Reflection.Emit.Label,System.Reflection.MethodBase,System.Func{System.String})">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/>.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
            <exception cref="T:DaLion.Shared.Exceptions.LabelNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowMissingTypeException(System.String)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.MissingTypeException"/>.
            </summary>
            <param name="name">The name of the expected type.</param>
            <returns>Nothing.</returns>
            <exception cref="T:DaLion.Shared.Exceptions.MissingTypeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1">
            <summary>Thrown when an unexpected enum value is received.</summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/> class.</summary>
            <param name="value">The unexpected enum value.</param>
        </member>
        <member name="M:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/> class.</summary>
            <param name="value">The unexpected enum value.</param>
        </member>
        <member name="T:DaLion.Shared.Exceptions.LabelNotFoundException">
            <summary>Thrown when a <see cref="T:System.Reflection.Emit.Label"/> is not found within the expected instructions list.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.LabelNotFoundException.#ctor(System.Reflection.Emit.Label,System.Reflection.MethodBase)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/> class.</summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
        </member>
        <member name="M:DaLion.Shared.Exceptions.LabelNotFoundException.#ctor(System.Reflection.Emit.Label,System.Reflection.MethodBase,System.Func{System.String})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/> class.</summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
        </member>
        <member name="T:DaLion.Shared.Exceptions.PatternNotFoundException">
            <summary>Thrown when a <see cref="T:HarmonyLib.CodeInstruction"/> pattern is not found within the expected instructions list.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.PatternNotFoundException.#ctor(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/> class.</summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
        </member>
        <member name="M:DaLion.Shared.Exceptions.PatternNotFoundException.#ctor(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase,System.Func{System.String})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/> class.</summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
        </member>
        <member name="T:DaLion.Shared.Harmony.CodeInstructionListExtensions">
            <summary>Extensions for <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.IndexOf(System.Collections.Generic.List{HarmonyLib.CodeInstruction},HarmonyLib.CodeInstruction[],System.Int32)">
            <summary>
                Finds the index of the next occurrence of the <paramref name="pattern"/> in the
                <paramref name="instructions"/>s, beginning at <paramref name="start"/>.
            </summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="pattern">The <see cref="T:HarmonyLib.CodeInstruction"/> pattern to search for.</param>
            <param name="start">The starting index.</param>
            <returns>The index of the first instruction in the next occurrence of <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.IndexOf(System.Collections.Generic.List{HarmonyLib.CodeInstruction},System.Collections.Generic.IList{HarmonyLib.CodeInstruction},System.Int32)">
            <summary>
                Finds the index of the next occurrence of the <paramref name="pattern"/> in the
                <paramref name="instructions"/>s, beginning at <paramref name="start"/>.
            </summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="pattern">The <see cref="T:HarmonyLib.CodeInstruction"/> pattern to search for.</param>
            <param name="start">The starting index.</param>
            <returns>The index of the first instruction in the next occurrence of <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.IndexOf(System.Collections.Generic.List{HarmonyLib.CodeInstruction},System.Reflection.Emit.Label,System.Int32)">
            <summary>
                Finds the index of the next <see cref="T:HarmonyLib.CodeInstruction"/> containing the <paramref name="label"/> in the
                <paramref name="instructions"/>s, beginning at <paramref name="start"/>.
            </summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to search for.</param>
            <param name="start">The starting index.</param>
            <returns>The index of the next occurrence of <paramref name="label"/> in <paramref name="instructions"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.Clone(System.Collections.Generic.List{HarmonyLib.CodeInstruction})">
            <summary>Creates a deep copy of the <paramref name="instructions"/>.</summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <returns>An exact copy of <paramref name="instructions"/> in a new <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.HarmonyExtensions">
            <summary>Extensions for the <see cref="T:HarmonyLib.Harmony"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllPatches(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllPrefixes(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyPrefix"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyPrefix"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllPostfixes(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyPostfix"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyPostfix"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllTranspilers(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyTranspiler"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyTranspiler"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllFinalizers(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyFinalizer"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyFinalizer"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetPatchesById(HarmonyLib.Harmony,System.String)">
            <summary>
                Gets the patches applied to methods patched by the <paramref name="harmony"/> instance, with the specified
                <paramref name="uniqueId"/>.
            </summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="uniqueId">A unique ID to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all applied patches by <paramref name="harmony"/> for the mod with the specified <paramref name="uniqueId"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.HarmonyPatcher">
            <summary>Base implementation of a <see cref="T:HarmonyLib.Harmony"/> patch class targeting a single method.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.#ctor(DaLion.Shared.Harmony.Harmonizer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Harmony.HarmonyPatcher"/> class.</summary>
            <param name="harmonizer">The <see cref="P:DaLion.Shared.Harmony.HarmonyPatcher.Harmonizer"/> instance that manages this patcher.</param>
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Target">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Prefix">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Postfix">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Transpiler">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Finalizer">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Reverse">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Harmonizer">
            <summary>Gets the <see cref="P:DaLion.Shared.Harmony.HarmonyPatcher.Harmonizer"/> instance that manages this patcher.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.DaLion#Shared#Harmony#IHarmonyPatcher#Apply(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.DaLion#Shared#Harmony#IHarmonyPatcher#Unapply(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc cref="M:DaLion.Shared.Harmony.IHarmonyPatcher.Apply(HarmonyLib.Harmony)"/>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc cref="M:DaLion.Shared.Harmony.IHarmonyPatcher.Unapply(HarmonyLib.Harmony)"/>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequireConstructor``1(System.Type[])">
            <summary>Gets a constructor and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="parameters">The constructor parameter types, or <see langword="null"/> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
            <remarks>Originally by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequireMethod``1(System.String,System.Type[])">
            <summary>Gets a method and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="name">The method name.</param>
            <param name="parameters">The method parameter types, or <see langword="null"/> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>Originally by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequirePropertyGetter``1(System.String)">
            <summary>Gets a property getter and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="name">The property name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>Originally by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequirePropertySetter``1(System.String)">
            <summary>Gets a property setter and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="name">The property name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>Originally by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.GetHarmonyMethods">
            <summary>Gets all <see cref="T:DaLion.Shared.Harmony.HarmonyPatcher"/>-annotated methods in the current instance.</summary>
            <returns>The <see cref="T:HarmonyLib.HarmonyMethod"/> representations of each patch method within the <see cref="T:DaLion.Shared.Harmony.HarmonyPatcher"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.Harmonizer">
            <summary>Instantiates and applies <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> classes in the assembly by searching for <see cref="N:HarmonyLib"/> <see cref="T:System.Attribute"/>s using reflection.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.Harmonizer._modRegistry">
            <inheritdoc cref="T:StardewModdingAPI.IModRegistry"/>
        </member>
        <member name="F:DaLion.Shared.Harmony.Harmonizer._sw">
            <inheritdoc cref="T:System.Diagnostics.Stopwatch"/>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.#ctor(StardewModdingAPI.IModRegistry,DaLion.Shared.Logger,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> class.</summary>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="harmonyId">The unique ID of the declaring mod.</param>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.Harmony">
            <inheritdoc cref="T:HarmonyLib.Harmony"/>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.Log">
            <inheritdoc cref="T:DaLion.Shared.Logger"/>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.HarmonyId">
            <summary>Gets the unique ID of the <see cref="T:HarmonyLib.Harmony"/> instance.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.AppliedPrefixes">
            <summary>Gets the cached count of applied prefixed.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.AppliedPostfixes">
            <summary>Gets the cached count of applied postfixes.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.AppliedTranspilers">
            <summary>Gets the cached count of applied transpilers.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.AppliedFinalizers">
            <summary>Gets the cached count of applied finalizers.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyAll(System.Reflection.Assembly,StardewModdingAPI.IModRegistry,DaLion.Shared.Logger,System.String)">
            <summary>Implicitly applies<see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> types in the specified <paramref name="assembly"/> using reflection.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="harmonyId">The unique ID of the declaring mod.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyFromNamespace(System.Reflection.Assembly,System.String,StardewModdingAPI.IModRegistry,DaLion.Shared.Logger,System.String)">
            <summary>Implicitly applies only the <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> types in the specified <paramref name="assembly"/>> which are also within the specified <paramref name="namespace"/>.</summary>
            <param name="assembly">The assembly containing the types.</param>
            <param name="namespace">The desired namespace.</param>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="harmonyId">The unique ID of the declaring mod. Defaults to <paramref name="namespace"/> if null.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyWithAttribute``1(System.Reflection.Assembly,StardewModdingAPI.IModRegistry,DaLion.Shared.Logger,System.String)">
            <summary>Implicitly applies only the <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> types with the specified <paramref name="assembly"/>> which are also decorated with <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <param name="assembly">The assembly containing the types.</param>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="logger">A <see cref="T:DaLion.Shared.Logger"/> instance.</param>
            <param name="harmonyId">The unique ID of the declaring mod.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.Unapply">
            <summary>Unapplies all <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/>s applied by this instance.</summary>
            <returns>Always <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyImplicitly(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>Instantiates and applies <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> classes in the specified <paramref name="assembly"/> using reflection.</summary>
            <param name="assembly">The assembly to search within.</param>
            <param name="predicate">An optional condition with which to limit the scope of applied <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/>es.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.IHarmonyPatcher">
            <summary>Interface for a <see cref="T:HarmonyLib.Harmony"/> patch class targeting a single method.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Target">
            <summary>Gets the method to be patched.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Prefix">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyPrefix"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Postfix">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyPostfix"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Transpiler">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyTranspiler"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Finalizer">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyFinalizer"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Reverse">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyReversePatch"/> patch that should be applied, if any.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.IHarmonyPatcher.Apply(HarmonyLib.Harmony)">
            <summary>Applies publicly-defined Harmony patches.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance for this mod.</param>
            <returns><see langword="true"/> if the patch was applied successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.IHarmonyPatcher.Unapply(HarmonyLib.Harmony)">
            <summary>Unapplies publicly-defined Harmony patches.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance for this mod.</param>
            <returns><see langword="true"/> if the patch was unapplied successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.ILHelper">
            <summary>Provides an API for abstracting common transpiler operations.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.#ctor(System.Reflection.MethodBase,System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Harmony.ILHelper"/> class.</summary>
            <param name="original">A <see cref="T:System.Reflection.MethodBase"/> representation of the original method.</param>
            <param name="instructions">The <see cref="T:HarmonyLib.CodeInstruction"/>s to be modified.</param>
        </member>
        <member name="T:DaLion.Shared.Harmony.ILHelper.SearchOption">
            <summary>Specifies the starting point and direction for a pattern option.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.First">
            <summary>Find the first occurrence of a pattern by starting from the first instruction and searching in the forward direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.Next">
            <summary>Find the first occurrence of a pattern by starting from the current instruction and searching in the forward direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.Previous">
            <summary>Find the first occurrence of a pattern by starting from the current instruction and searching in the reverse direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.Last">
            <summary>Find the first occurrence of a pattern by starting from the last instruction and searching in the reverse direction.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.Original">
            <summary>Gets metadata about the original target method.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.Instructions">
            <summary>Gets the current list of <see cref="T:HarmonyLib.CodeInstruction"/>s that will eventually replace the target method.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.Locals">
            <summary>Gets a look-up table for easy indexing of <see cref="T:System.Reflection.Emit.LocalBuilder"/> objects by their corresponding local index.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.CurrentIndex">
            <summary>Gets the index currently at the top of the index stack.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.LastIndex">
            <summary>Gets the index of the last <see cref="T:HarmonyLib.CodeInstruction"/> in the current instruction list.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.PatternMatch(HarmonyLib.CodeInstruction[],DaLion.Shared.Harmony.ILHelper.SearchOption,System.Int32)">
            <summary>
                Finds the first occurrence of the specified <paramref name="pattern"/> in the active
                <see cref="T:HarmonyLib.CodeInstruction"/> list according to the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>,
                and moves the instruction pointer to it.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <param name="nth">Match the nth occurrence of this <paramref name="pattern"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.LabelMatch(System.Reflection.Emit.Label,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Finds the specified <paramref name="label"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/> list and moves the
                instruction pointer to it.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to match.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.CountUntil(HarmonyLib.CodeInstruction[],System.Int32@,DaLion.Shared.Harmony.ILHelper.SearchOption,System.Int32)">
            <summary>
                Finds and returns the number of instructions (including the current instruction) until the first occurrence of the specified
                <paramref name="pattern"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/> list according to
                the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>, without moving the instruction pointer to it.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="count">The number of instructions until the first occurrence of <paramref name="pattern"/>.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <param name="nth">Match the nth occurrence of this <paramref name="pattern"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.CountUntil(System.Reflection.Emit.Label,System.Int32@,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Finds and returns the number of instructions (including the current instruction) until the specified <paramref name="label"/>
                without moving the instruction pointer to it.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to match.</param>
            <param name="count">The number of instructions until the specified of <paramref name="label"/>.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Move(System.Int32)">
            <summary>Moves the instruction pointer an integer number of <paramref name="steps"/>.</summary>
            <param name="steps">Number of steps by which to move the instruction pointer.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
            <remarks>Positive means down (towards the end of the list); negative means up (towards the start of the list).</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GoTo(System.Int32)">
            <summary>Moves the instruction pointer to the specified <paramref name="index"/>.</summary>
            <param name="index">The index to move to.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Insert(HarmonyLib.CodeInstruction[],System.Reflection.Emit.Label[])">
            <summary>Inserts the given <paramref name="instructions"/> at the currently pointed index.</summary>
            <param name="instructions">The <see cref="T:HarmonyLib.CodeInstruction"/>s to insert.</param>
            <param name="labels">Some <see cref="T:System.Reflection.Emit.Label"/>s to add at the start of the insertion.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
            <remarks>
                The instruction at the current address is pushed forward, such that the instruction pointer continues to point to
                the same instruction after insertion.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Add(HarmonyLib.CodeInstruction[],System.Reflection.Emit.Label[])">
            <summary>Adds the given <paramref name="instructions"/> to the end of the active <see cref="T:HarmonyLib.CodeInstruction"/> list.</summary>
            <param name="instructions">The <see cref="T:HarmonyLib.CodeInstruction"/>s to add.</param>
            <param name="labels">Some <see cref="T:System.Reflection.Emit.Label"/>s to add at the start of the insertion.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
            <remarks>The instruction pointer is moved to the first instruction in the added sequence.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Copy(HarmonyLib.CodeInstruction[]@,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Gets a copy of the next <paramref name="count"/> <see cref="T:HarmonyLib.CodeInstruction"/>s, starting from the currently
                pointed index.
            </summary>
            <param name="copy">The got code instructions.</param>
            <param name="count">Number of code instructions to get.</param>
            <param name="removeLabels">Whether to remove the labels of the copied <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="moveInstructionPointer">If <see langword="true"/>, advances the instruction pointer to the last copied instruction.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.CopyUntil(HarmonyLib.CodeInstruction[],HarmonyLib.CodeInstruction[]@,DaLion.Shared.Harmony.ILHelper.SearchOption,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Gets a copy of <see cref="T:HarmonyLib.CodeInstruction"/>s between the current pointer index and the first
                occurrence of the specified <paramref name="pattern"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/>
                list according to the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="copy">The got code instructions.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <param name="nth">Match the nth occurrence of this <paramref name="pattern"/>.</param>
            <param name="removeLabels">Whether to remove the labels of the copied <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="moveInstructionPointer">Whether to advance the instruction pointer.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.CopyUntil(System.Reflection.Emit.Label,HarmonyLib.CodeInstruction[]@,DaLion.Shared.Harmony.ILHelper.SearchOption,System.Boolean,System.Boolean)">
            <summary>
                Gets a copy of <see cref="T:HarmonyLib.CodeInstruction"/>s between the current pointer index and the
                instruction containing the specified <paramref name="label"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/>
                list according to the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to match.</param>
            <param name="copy">The got code instructions.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <param name="removeLabels">Whether to remove the labels of the copied <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="moveInstructionPointer">Whether to advance the instruction pointer.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Remove(System.Int32)">
            <summary>
                Removes the next <paramref name="count"/> <see cref="T:HarmonyLib.CodeInstruction"/>s, starting at
                the current index position.
            </summary>
            <param name="count">Number of code instructions to remove.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.RemoveUntil(HarmonyLib.CodeInstruction[],DaLion.Shared.Harmony.ILHelper.SearchOption,System.Int32)">
            <summary>
                Removes the <see cref="T:HarmonyLib.CodeInstruction"/>s from current pointer index up to and including the first
                occurrence of the specified <paramref name="pattern"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/>
                list according to the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <param name="nth">Match the nth occurrence of this <paramref name="pattern"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.RemoveUntil(System.Reflection.Emit.Label,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Removes the <see cref="T:HarmonyLib.CodeInstruction"/>s from the current pointer index up to and including
                the instruction containing the specified <paramref name="label"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/>
                list according to the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to match.</param>
            <param name="option">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.ReplaceWith(HarmonyLib.CodeInstruction,System.Boolean)">
            <summary>Replaces the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="instruction">The <see cref="T:HarmonyLib.CodeInstruction"/> to replace with.</param>
            <param name="preserveLabels">Whether to preserve the labels at the current <see cref="T:HarmonyLib.CodeInstruction"/> before replacement.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.AddLabels(System.Reflection.Emit.Label[])">
            <summary>Adds one or more <see cref="T:System.Reflection.Emit.Label"/>s to the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="labels">Some of <see cref="T:System.Reflection.Emit.Label"/>s to add.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.RemoveLabels(System.Reflection.Emit.Label[])">
            <summary>
                Removes the specified <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed
                index.
            </summary>
            <param name="labels">The <see cref="T:System.Reflection.Emit.Label"/>s to remove.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GetLabels(System.Reflection.Emit.Label[]@)">
            <summary>
                Gets a copy of the <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed
                index.
            </summary>
            <param name="labels">The copied <see cref="T:System.Reflection.Emit.Label"/>s.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.SetLabels(System.Reflection.Emit.Label[])">
            <summary>Replaces the <see cref="T:System.Reflection.Emit.Label"/>s of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="labels">The new <see cref="T:System.Reflection.Emit.Label"/>s to set.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.StripLabels">
            <summary>Removes all <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.StripLabels(System.Reflection.Emit.Label[]@)">
            <summary>
                Removes all <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index and
                returns a reference to those <see cref="T:System.Reflection.Emit.Label"/>s.
            </summary>
            <param name="labels">The removed <see cref="T:System.Reflection.Emit.Label"/>s.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GetOpCode(System.Reflection.Emit.OpCode@)">
            <summary>Returns the <see cref="T:System.Reflection.Emit.OpCode"/> of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="opcode">The returned <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.SetOpCode(System.Reflection.Emit.OpCode)">
            <summary>Changes the <see cref="T:System.Reflection.Emit.OpCode"/> of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="opcode">The new <see cref="T:System.Reflection.Emit.OpCode"/> to replace with.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GetOperand(System.Object@)">
            <summary>Returns the operand of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="operand">The returned operand.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.SetOperand(System.Object)">
            <summary>Changes the operand of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="operand">The new operand to replace with.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Return(System.Int32)">
            <summary>Returns the instruction pointer to a previous state.</summary>
            <param name="count">Number of index changes to discard.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.ForEach(HarmonyLib.CodeInstruction[],System.Action{System.Int32})">
            <summary>
                Applies the specified <paramref name="action"/> to all occurrences of the <paramref name="pattern"/> within the active
                <see cref="T:HarmonyLib.CodeInstruction"/> list.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="action">The action to be applied.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Repeat(System.Int32,System.Action{System.Int32})">
            <summary>Applies the specified <paramref name="action"/> a certain number of times.</summary>
            <param name="count">The number of times to repeat.</param>
            <param name="action">The action to be applied.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Clear">
            <summary>Resets the current instance.</summary>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Flush">
            <summary>Resets the instance and returns the active <see cref="T:HarmonyLib.CodeInstruction"/> list as an enumerable.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the contents of the <see cref="T:HarmonyLib.CodeInstruction"/> cache.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.LdcFromInt(System.Int32)">
            <summary>Gets the corresponding <see cref="T:HarmonyLib.CodeInstruction"/> for loading a given integer.</summary>
            <param name="num">An integer.</param>
            <returns>The correct <see cref="T:HarmonyLib.CodeInstruction"/> which loads <paramref name="num"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Snitch">
            <summary>Snitches on other <see cref="T:HarmonyLib.HarmonyTranspiler"/>s applied to the target <see cref="P:DaLion.Shared.Harmony.ILHelper.Original"/> method.</summary>
            <returns>A formatted string listing all transpilers applied to the target method.</returns>
            <remarks>
                Inspired by
                <see href="https://github.com/atravita-mods/StardewMods/blob/f450bd2fe72a884e89ca6a06c187605bdb79fa3d/AtraShared/Utils/Extensions/HarmonyExtensions.cs#L46">atravita</see>.
            </remarks>
            <returns>A formatted <see cref="T:System.String"/> revealing the currently applied <see cref="T:HarmonyLib.HarmonyTranspiler"/>s to the <see cref="P:DaLion.Shared.Harmony.ILHelper.Original"/> method.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.TryMoveNext(System.Int32@,HarmonyLib.CodeInstruction[])">
            <summary>Attempts to move the instruction pointer to the next occurrence of the specified <paramref name="pattern"/>.</summary>
            <param name="index">The <see cref="T:System.Int32"/> index of the instruction pointer's position.</param>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <returns>
                <see langword="true"/> if a subsequent occurrence of <paramref name="pattern"/> is found, otherwise
                <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.ILHelperExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Harmony.ILHelper"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelperExtensions.InsertDiceRoll(DaLion.Shared.Harmony.ILHelper,System.Double,System.Reflection.Emit.Label[],System.Boolean)">
            <summary>Inserts a sequence of <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index to roll a random double.</summary>
            <param name="helper">The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</param>
            <param name="chance">The threshold for a successful roll.</param>
            <param name="labels">Branch labels to add to the inserted sequence.</param>
            <param name="forStaticRandom">Whether to load the static <see cref="F:StardewValley.Game1.random"/>.</param>
            <returns>The <paramref name="helper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelperExtensions.InsertDiceRoll(DaLion.Shared.Harmony.ILHelper,System.Int32,System.Int32,System.Reflection.Emit.Label[],System.Boolean)">
            <summary>Inserts a sequence of <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index to roll a random integer.</summary>
            <param name="helper">The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</param>
            <param name="minValue">The lower limit, inclusive.</param>
            <param name="maxValue">The upper limit, inclusive.</param>
            <param name="labels">Branch labels to add to the inserted sequence.</param>
            <param name="forStaticRandom">Whether to load the static <see cref="F:StardewValley.Game1.random"/>.</param>
            <returns>The <paramref name="helper"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMColorPickerAttribute">
            <summary>Sets the Color Picker options for a GMCM <see cref="T:Microsoft.Xna.Framework.Color"/> property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMColorPickerAttribute.#ctor(System.Boolean,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMColorPickerAttribute"/> class.</summary>
            <param name="showAlpha">Whether to display the alpha slider.</param>
            <param name="colorPickerStyle">The color picker style to display.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMColorPickerAttribute.ShowAlpha">
            <summary>Gets a value indicating whether to display the alpha slider.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMColorPickerAttribute.ColorPickerStyle">
            <summary>Gets a value indicating the color picker style to display.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute">
            <summary>Assigns a default value to a GMCM <see cref="T:Microsoft.Xna.Framework.Color"/> property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute"/> class.</summary>
            <param name="r">The default red channel value.</param>
            <param name="g">The default green channel value.</param>
            <param name="b">The default blue channel value.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute"/> class.</summary>
            <param name="r">The default red channel value.</param>
            <param name="g">The default green channel value.</param>
            <param name="b">The default blue channel value.</param>
            <param name="a">The default alpha channel value.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute.R">
            <summary>Gets the default red channel value.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute.G">
            <summary>Gets the default green channel value.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute.B">
            <summary>Gets the default blue channel value.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultColorAttribute.A">
            <summary>Gets the default alpha channel value.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultVector2Attribute">
            <summary>Assigns a default value to a GMCM <see cref="T:Microsoft.Xna.Framework.Vector2"/> property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultVector2Attribute.#ctor(System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultVector2Attribute"/> class.</summary>
            <param name="x">The default X coordinate.</param>
            <param name="y">The default Y coordinate.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultVector2Attribute.X">
            <summary>Gets the default X coordinate.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMDefaultVector2Attribute.Y">
            <summary>Gets the default Y coordinate.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMOverrideAttribute">
            <summary>Tells the GMCM generator to override its default generation with a specific callback when adding a property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMOverrideAttribute.#ctor(System.Type,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMOverrideAttribute"/> class that depends on a condition retrieved from a property.</summary>
            <param name="overrideType">The <see cref="T:System.Type"/> which holds the override method.</param>
            <param name="overrideName">The name of the override method.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMOverrideAttribute.Override">
            <summary>Gets a delegate that should be called to add the config property.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMPriorityAttribute">
            <summary>Assigns a priority to GMCM property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMPriorityAttribute.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMPriorityAttribute"/> class.</summary>
            <param name="priority">The priority of the property in the page.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMPriorityAttribute.Priority">
            <summary>Gets the priority of the property in the page.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMTitleScreenOnlyAttribute">
            <summary>Tells the GMCM generator that a property should only appear in the title screen of the menu.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute">
            <summary>Tells the GMCM generator to search inside a class for more config properties.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute"/> class within a new GMCM page.</summary>
            <param name="pageId">The public ID of the page.</param>
            <param name="pageTitleKey">The translation key for the page title.</param>
            <param name="linkToParentPage">Whether to provide a link to the previous page at the top of the new page.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute.PageId">
            <summary>Gets the public ID of the page.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute.PageTitleKey">
            <summary>Gets the translation key.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMInnerConfigAttribute.LinkToParentPage">
            <summary>Gets a value indicating whether to provide a link to the previous page at the top of the new apage.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMIgnoreAttribute">
            <summary>Tells the GMCM generator to ignore a property.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMSectionAttribute">
            <summary>Assigns a GMCM property to a specific section in the current page.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMSectionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMSectionAttribute"/> class.</summary>
            <param name="sectionTitleKey">The translation key for the section title.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMSectionAttribute.SectionTitleKey">
            <summary>Gets the translation key for the section title.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMRangeAttribute">
            <summary>Sets the minimum and maximum parameters of a GMCM numeric property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMRangeAttribute.#ctor(System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMRangeAttribute"/> class.</summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMRangeAttribute.Min">
            <summary>Gets the minimum value.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMRangeAttribute.Max">
            <summary>Gets the maximum value.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMStepAttribute">
            <summary>Sets the step parameter of a GMCM numeric property.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.Attributes.GMCMStepAttribute.#ctor(System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.Attributes.GMCMStepAttribute"/> class.</summary>
            <param name="step">The step value.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.Attributes.GMCMStepAttribute.Step">
            <summary>Gets the interval value.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.DynamicListOption">
            <summary>Allows dynamically adding / removing items from a list in GMCM.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.DynamicListOption.#ctor(System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IList{System.String}},System.Action{System.Collections.Generic.IList{System.String}},System.Func{System.Single,System.Int32},System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicListOption"/> class.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="getOptionTooltip">Gets the option tooltip.</param>
            <param name="getValues">A delegate for getting the target list as a list of string items.</param>
            <param name="setValues">A delegate for setting the target list given a list of string items.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="id">An optional id for this field.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.DynamicListOptionExtensions">
            <summary>Extends the <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/> with <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicListOption"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.DynamicListOptionExtensions.AddDynamicListOption(DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IList{System.String}},System.Action{System.Collections.Generic.IList{System.String}},System.Func{System.Single,System.Int32},System.String)">
            <summary>Adds a new instance of <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicListOption"/> to the specified <paramref name="mod"/>'s config menu.</summary>
            <param name="api">The <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/>.</param>
            <param name="mod">The mod's manifest.</param>
            <param name="getOptionName">Gets the option name.</param>
            <param name="getOptionTooltip">Gets the option tooltip.</param>
            <param name="getValues">A delegate for getting the target list as a list of string items.</param>
            <param name="setValues">A delegate for setting the target list given a list of string items.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="id">An optional id for this field.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOptionRenderedActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOptionRenderedActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOptionRenderedActiveMenuEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOptionRenderedActiveMenuEvent.OnRenderedActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOption">
            <summary>Allows dynamically adding / removing items from a list in GMCM.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOption.#ctor(System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Action{System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Boolean,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOption"/> class.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="getOptionTooltip">Gets the option tooltip.</param>
            <param name="getPairs">A delegate for getting the target list of pairs as a list of <see cref="T:System.String"/>-<see cref="T:System.String"/> pairs.</param>
            <param name="setPairs">A delegate for setting the target list of pairs given a list of <see cref="T:System.String"/>-<see cref="T:System.String"/> pairs.</param>
            <param name="getTextBoxLabel">Gets the <see cref="T:StardewValley.Menus.TextBox"/> label.</param>
            <param name="getTextBoxTooltip">Gets the <see cref="T:StardewValley.Menus.TextBox"/> tooltip.</param>
            <param name="enumerateLabels">Whether to enumerate the labels.</param>
            <param name="id">An optional id for this field.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOptionExtensions">
            <summary>Extends the <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/> with <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicListOption"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.DynamicKeyValuePairListOptionExtensions.AddDynamicKeyValuePairListOption(DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Action{System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Boolean,System.String)">
            <summary>Adds a new instance of <see cref="T:DaLion.Shared.Integrations.GMCM.DynamicListOption"/> to the specified <paramref name="mod"/>'s config menu.</summary>
            <param name="api">The <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/>.</param>
            <param name="mod">The mod's manifest.</param>
            <param name="getOptionName">Gets the option name.</param>
            <param name="getOptionTooltip">Gets the option tooltip.</param>
            <param name="getPairs">A delegate for getting the target list of pairs as a list of <see cref="T:System.String"/>-<see cref="T:System.String"/> pairs.</param>
            <param name="setPairs">A delegate for setting the target list of pairs given a list of <see cref="T:System.String"/>-<see cref="T:System.String"/> pairs.</param>
            <param name="getTextBoxLabel">Gets the <see cref="T:StardewValley.Menus.TextBox"/> label.</param>
            <param name="getTextBoxTooltip">Gets the <see cref="T:StardewValley.Menus.TextBox"/> tooltip.</param>
            <param name="enumerateLabels">Whether to enumerate the labels.</param>
            <param name="id">An optional id for this field.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMOptionsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.GMCMOptionsIntegration"/> class.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi">
            <summary>The API which lets other mods add a config UI using one of the complex options defined in GMCMOptions.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ColorPickerStyle">
            <summary>
            Flags to control how the <c>ColorPickerOption</c> widget is displayed.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation">
            <summary>
            Valid values for the <c>arrowLocation</c> parameter of <c>AddImageOption</c>.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionLabelLocation">
            <summary>
            Valid values for the <c>labelLocation</c> parameter of <c>AddImageOption</c>.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.HorizontalAlignment">
            <summary>
            Valid values for the <c>alignment</c> parameter of <c>AddHorizontalSeparator</c> and <c>AddSimpleHorizontalSeparator</c>.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddColorOption(StardewModdingAPI.IManifest,System.Func{Microsoft.Xna.Framework.Color},System.Action{Microsoft.Xna.Framework.Color},System.Func{System.String},System.Func{System.String},System.Boolean,System.UInt32,System.String)">
            <summary>Add a <c cref="T:Microsoft.Xna.Framework.Color">Color</c> option at the current position in the GMCM form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the tooltip.</param>
            <param name="showAlpha">Whether the color picker should allow setting the Alpha channel.</param>
            <param name="colorPickerStyle">A <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ColorPickerStyle"/> flags to control how the color picker is rendered.</param>
            <param name="fieldId">The unique field ID for use with GMCM's <c>OnFieldChanged</c>, or <see langword="null"/> to auto-generate a randomized ID.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddImageOption(StardewModdingAPI.IManifest,System.Func{System.UInt32},System.Action{System.UInt32},System.Func{System.String},System.Func{System.UInt32},System.Func{System.Int32},System.Func{System.Int32},System.Action{System.UInt32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2},System.Func{System.String},System.Func{System.UInt32,System.String},System.Int32,System.Int32,System.String)">
            <summary>
            Add an image picker option.  This is really an "array index picker" where you can specify what to draw
            for each index. The underlying value is always a <c>uint</c> (the index).
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="getMaxValue">
              The maximum value this option can have, and thus the maximum value that will be passed to
              <paramref name="drawImage"/> and <paramref name="label"/>. Note that this is a function, so
              theoretically the number of options does not have to be fixed. Should this function return a
              value greater than the option's current value then the option's current value will be clamped.
              In common usage, this parameter should be a function that returns one less than the number
              of images.
            </param>
            <param name="maxImageHeight">
              A function that returns the maximum image height. Used to report the option's height to GMCM (which
              before version 1.8.2 will not recompute how much space to reserve for the option until the page is re-opened) and to center
              arrows vertically in the <c cref="F:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation.Sides">Sides</c> arrow placement option.
            </param>
            <param name="maxImageWidth">
              A function that returns the maximum image width. This is used to place the arrows and label.
            </param>
            <param name="drawImage">A function which draws the image for the given index at the given location.</param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the tooltip.</param>
            <param name="label">A function to return the string to display given the image index, or <see langword="null"/> to disable that display.</param>
            <param name="arrowLocation">Where to render the arrows. Use a value from the <c cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation">ImageOptionArrowLocation</c> enum.</param>
            <param name="labelLocation">Where to render the label. Use a value from the <c cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionLabelLocation">ImageOptionLabelLocation</c> enum.</param>
            <param name="fieldId">The unique field ID for use with GMCM's <c>OnFieldChanged</c>, or <see langword="null"/> to auto-generate a randomized ID.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddImageOption(StardewModdingAPI.IManifest,System.Func{System.UInt32},System.Action{System.UInt32},System.Func{System.String},System.Func{System.ValueTuple{System.Func{System.String},Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle}}[]},System.Func{System.String},System.Int32,System.Int32,System.String)">
            <summary>
            Add an image picker option. A simplified interface to the full <c>AddImageOption</c> signature.
            To use this signature, you supply a function that returns an array of tuples containing the
            different image <paramref name="choices"/>. The underlying value is the <c>uint</c> that is the
            index of the selected image.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="choices">
              A function that returns an array of tuples describing the image choices. Each tuple contains:
              <list type="bullet">
                <item>A function to return the label string (or <see langword="null"/> for no label)</item>
                <item>The <c cref="T:Microsoft.Xna.Framework.Graphics.Texture2D">Texture2D</c> containing the image (i.e., the sprite sheet)</item>
                <item>The source rectangle for the image within the texture, or <see langword="null"/> to indicate the entire texture</item>
              </list>
            </param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the tooltip.</param>
            <param name="arrowLocation">Where to render the arrows. Use a value from the <c cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation">ImageOptionArrowLocation</c> enum.</param>
            <param name="labelLocation">Where to render the label. Use a value from the <c cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.ImageOptionLabelLocation">ImageOptionLabelLocation</c> enum.</param>
            <param name="fieldId">The unique field ID for use with GMCM's <c>OnFieldChanged</c>, or <see langword="null"/> to auto-generate a randomized ID.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddHorizontalSeparator(StardewModdingAPI.IManifest,System.Func{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Color},System.Func{Microsoft.Xna.Framework.Color})">
            <summary>
            Add a horizontal separator.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getWidthFraction">
              A function that returns the fraction of the GMCM window that the separator
              should occupy.  1.0 is the entire window.  Defaults to 0.85.
            </param>
            <param name="height">The height of the separator (in pixels).</param>
            <param name="padAbove">How much padding (in pixels) to place above the separator.</param>
            <param name="padBelow">How much padding (in pixels) to place below the separator.</param>
            <param name="alignment">
              The horizontal alignment of the separator.
              Use a value from the <c cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.HorizontalAlignment">HorizontalAlignment enumeration</c>.
            </param>
            <param name="getColor">
              A function to return the color to use for the separator.  Defaults to the game's text color.
            </param>
            <param name="getShadowColor">
              A function to return the color to use for the shadow drawn under the separator.  Defaults to the
              game's text shadow color.  Return <c>Color.Transparent</c> to remove the shadow completely.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddSimpleHorizontalSeparator(StardewModdingAPI.IManifest,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
              Add a horizontal separator.  This is a simplified version of
              <c cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddHorizontalSeparator(StardewModdingAPI.IManifest,System.Func{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Color},System.Func{Microsoft.Xna.Framework.Color})">AddHorizontalSeparator</c>.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="widthFraction">
              The fraction of the GMCM window that the separator
              should occupy.  1.0 is the entire window.  Defaults to 0.85.</param>
            <param name="height">The height of the separator (in pixels).</param>
            <param name="padAbove">How much padding (in pixels) to place above the separator.</param>
            <param name="padBelow">How much padding (in pixels) to place below the separator.</param>
            <param name="alignment">
              The horizontal alignment of the separator.
              Use a value from the <c cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.HorizontalAlignment">HorizontalAlignment enumeration</c>.
            </param>
            <param name="color">The color to use for the separator.  Defaults to the game's text color.</param>
            <param name="shadowColor">
              The color to use for the shadow drawn under the separator.  Defaults to the
              game's text shadow color.  Use <c>Color.Transparent</c> to remove the shadow completely.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuOptionsApi.AddDynamicParagraph(StardewModdingAPI.IManifest,System.String,System.Func{System.String},System.Boolean)">
            <summary>
              Add a dynamic paragraph.  A dynamic paragraph reflects changes in the text returned by
              <paramref name="text"/> even while the GMCM window is open.  It also supports styled text.
              <para>
                Styled text supports simple HTML-like markup for specifying text formatting.  The text must
                be valid XML fragment(s).  (I.e., if the text were enclosed in an XML tag, the result must be
                a valid XML document.)  See https://github.com/jltaylor-us/StardewGMCMOptions/blob/default/README.md#dynamic-paragraph
                for details about the tags supported.
              </para>
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="logName">
              A name to identify <em>this</em> dynamic paragraph in the SMAPI log, should there be any errors in
              the text returned by <paramref name="text"/>.  This string may appear in the log, but will not appear
              in-game.
            </param>
            <param name="text">The paragraph text.</param>
            <param name="isStyledText">
              If <c>true</c>, then the text returned by <paramref name="text"/> will be treated as styled text.
            </param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.MultiPageLinkOption`1">
            <summary>Allows multi-column page link options in GMCM.</summary>
            <typeparam name="TPage">The type of the object which represents the page.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Shockah/Stardew-Valley-Mods/blob/master/Kokoro/GMCM/MultiPageLinkOption.cs">Shockah</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.MultiPageLinkOption`1.#ctor(System.Func{System.String},`0[],System.Func{`0,System.String},System.Func{`0,System.String},System.Func{System.Single,System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.MultiPageLinkOption`1"/> class.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="pages">The page values.</param>
            <param name="getPageId">Gets the destination page ID.</param>
            <param name="getLinkText">Gets the destination page name.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.MultiPageLinkOptionExtensions">
            <summary>Extends the <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/> with <see cref="M:DaLion.Shared.Integrations.GMCM.MultiPageLinkOptionExtensions.AddMultiPageLinkOption``1(DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},``0[],System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.Single,System.Int32})"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.MultiPageLinkOptionExtensions.AddMultiPageLinkOption``1(DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},``0[],System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.Single,System.Int32})">
            <summary>Adds a new instance of <see cref="T:DaLion.Shared.Integrations.GMCM.MultiPageLinkOption`1"/> to the specified <paramref name="mod"/>'s config menu.</summary>
            <typeparam name="TPage">The type of the object which represents the page.</typeparam>
            <param name="api">The <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/>.</param>
            <param name="mod">The mod's manifest.</param>
            <param name="getOptionName">Gets the option name.</param>
            <param name="pages">The page values.</param>
            <param name="getPageId">Gets the destination page ID.</param>
            <param name="getPageName">Gets the destination page name.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.MultiCheckboxOption`1">
            <summary>Allows multi-column page link options in GMCM.</summary>
            <typeparam name="TCheckbox">The type of the object from which the bool checkbox field or property can be accessed.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Shockah/Stardew-Valley-Mods/blob/master/Kokoro/GMCM/MultiPageLinkOption.cs">Shockah</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.MultiCheckboxOption`1.#ctor(System.Func{System.String},`0[],System.Func{`0,System.Boolean},System.Action{`0,System.Boolean},System.Func{`0,System.String},System.Func{`0,System.String},System.Action{`0,System.Boolean},System.Func{System.Single,System.Int32},System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.MultiCheckboxOption`1"/> class.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="checkboxes">The checkbox values.</param>
            <param name="getCheckboxValue">Gets the current state of the checkbox value.</param>
            <param name="setCheckboxValue">Sets the current state of the checkbox value.</param>
            <param name="getCheckboxLabel">Gets the checkbox label.</param>
            <param name="getCheckboxTooltip">Gets the checkbox tooltip.</param>
            <param name="onValueUpdated">A delegate to be called after values are changed.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="id">An optional id for this field.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.MultiCheckboxOptionExtensions">
            <summary>Extends the <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/> with <see cref="T:DaLion.Shared.Integrations.GMCM.MultiCheckboxOption`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.MultiCheckboxOptionExtensions.AddMultiCheckboxOption``1(DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},``0[],System.Func{``0,System.Boolean},System.Action{``0,System.Boolean},System.Func{``0,System.String},System.Func{``0,System.String},System.Action{``0,System.Boolean},System.Func{System.Single,System.Int32},System.String)">
            <summary>Adds a new instance of <see cref="T:DaLion.Shared.Integrations.GMCM.MultiCheckboxOption`1"/> to the specified <paramref name="mod"/>'s config menu.</summary>
            <typeparam name="TCheckbox">The type of the object which represents the page.</typeparam>
            <param name="api">The <see cref="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi"/>.</param>
            <param name="mod">The mod's manifest.</param>
            <param name="getOptionName">Gets the option name.</param>
            <param name="checkboxes">The checkbox values.</param>
            <param name="getCheckboxValue">Gets the current state of the checkbox value.</param>
            <param name="setCheckboxValue">Sets the current state of the checkbox value.</param>
            <param name="getCheckboxLabel">Gets the checkbox label.</param>
            <param name="getCheckboxTooltip">Gets the checkbox tooltip.</param>
            <param name="onValueUpdated">A delegate to be called after values are changed.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="id">An optional id for this field.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1">
            <summary>Handles the logic for integrating with the Generic Mod Configuration Menu mod.</summary>
            <typeparam name="TGenericModConfigMenu">The type that is inheriting from this class.</typeparam>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.#ctor(StardewModdingAPI.ITranslationHelper,StardewModdingAPI.IModRegistry,StardewModdingAPI.IManifest)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1"/> class.</summary>
            <param name="translation">The <see cref="T:StardewModdingAPI.ITranslationHelper"/> instance.</param>
            <param name="modRegistry">An API for fetching metadata about loaded mods.</param>
            <param name="manifest">The manifest of the mod consuming the API.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.Manifest">
            <summary>Gets the manifest for the mod consuming the API.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1._I18n">
            <summary>Gets the manifest for the mod consuming the API.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.ComplexOptionsApi">
            <summary>Gets the API for registering complex options, if available.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.Register">
            <summary>Registers the mod config.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.Reload">
            <summary>Resets the mod config menu.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.BuildMenu">
            <summary>Constructs the config menu manually.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.BuildImplicitly``1(System.Func{``0})">
            <summary>Constructs the config menu automatically via reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddPage(System.String,System.Func{System.String})">
            <summary>
                Starts a new page in the mod's config UI, or switch to that page if it already exists. All options registered
                after this will be part of that page.
            </summary>
            <param name="pageId">The unique page ID.</param>
            <param name="pageTitle">The page title shown in its UI, or <see langword="null"/> to show the <paramref name="pageId"/> value.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
            <remarks>
                You must also call <see cref="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddPageLink(System.String,System.Func{System.String},System.Func{System.String})"/> to make the page accessible. This is only needed to set up a
                multi-page config UI. If you don't call this method, all options will be part of the mod's main config UI instead.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddPageLink(System.String,System.Func{System.String},System.Func{System.String})">
            <summary>Adds a link to a page added via <see cref="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddPage(System.String,System.Func{System.String})"/> at the current position in the form.</summary>
            <param name="pageId">The unique ID of the page to open when the link is clicked.</param>
            <param name="getText">Gets the link text shown in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the link, or <see langword="null"/> to disable the tooltip.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddSectionTitle(System.Func{System.String},System.Func{System.String})">
            <summary>Adds a section title at the current position in the form.</summary>
            <param name="getText">Gets the title text shown in the form.</param>
            <param name="getTooltip">
                Gets the tooltip text shown when the cursor hovers on the title, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddParagraph(System.Func{System.String})">
            <summary>Adds a paragraph of text at the current position in the form.</summary>
            <param name="getText">Gts the paragraph text to display.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddHorizontalRule">
            <summary>Adds some empty vertical space to the form.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddVerticalSpace">
            <summary>Adds some empty vertical space to the form.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddCheckbox``1(System.Func{System.String},System.Func{System.String},System.Func{``0,System.Boolean},System.Action{``0,System.Boolean},System.Func{``0},System.String)">
            <summary>Adds a checkbox to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddCheckbox``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a checkbox to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddTextBox``1(System.Func{System.String},System.Func{System.String},System.Func{``0,System.String},System.Action{``0,System.String},System.Func{``0},System.String)">
            <summary>Adds a free-form text input box to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddTextBox``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a free-form text input box to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddCoordinateBox``1(System.Func{System.String},System.Func{System.String},System.Func{``0,Microsoft.Xna.Framework.Vector2},System.Action{``0,Microsoft.Xna.Framework.Vector2},System.Func{``0},System.Nullable{Microsoft.Xna.Framework.Vector2},System.String)">
            <summary>Adds a coordinate input box to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="default">The default value.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddCoordinateBox``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a coordinate input box to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddColorBox``1(System.Func{System.String},System.Func{System.String},System.Func{``0,Microsoft.Xna.Framework.Color},System.Action{``0,Microsoft.Xna.Framework.Color},System.Func{``0},System.Nullable{Microsoft.Xna.Framework.Color},System.String)">
            <summary>Adds a color input box to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="default">The default value.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddColorBox``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a color input box to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddDropdown``1(System.Func{System.String},System.Func{System.String},System.Func{``0,System.String},System.Action{``0,System.String},System.Func{``0},System.String[],System.Func{System.String,System.String},System.String)">
            <summary>Adds a dropdown to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="allowedValues">The values that can be selected.</param>
            <param name="formatAllowedValue">
                Get the display text to show for a value from <paramref name="allowedValues"/>, or
                <see langword="null"/> to show the values as-is.
            </param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddDropdown``2(System.Func{System.String},System.Func{System.String},System.Func{``0,``1},System.Action{``0,``1},System.Func{``0},System.String)">
            <summary>Adds a dropdown to the form based on <typeparamref name="TEnum"/>.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <typeparam name="TEnum">A <see cref="T:System.Enum"/> type.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddDropdown``2(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a dropdown to the form based on <typeparamref name="TEnum"/> using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <typeparam name="TEnum">A <see cref="T:System.Enum"/> type.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddDropdown``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a dropdown to the form based on an enum property using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSlider``1(System.Func{System.String},System.Func{System.String},System.Func{``0,System.Int32},System.Action{``0,System.Int32},System.Func{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Adds a numeric integer field to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSlider``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a numeric integer field to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSliderGroupFromArray``1(System.Int32,System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Func{``0,System.Int32,System.Int32},System.Action{``0,System.Int32,System.Int32},System.Func{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Adds a group of integer fields based on an array to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="length">The length of the array.</param>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSliderGroupFromArray``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a group of integer fields based on an array to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSliderGroupFromIntDict``1(System.Collections.Generic.IEnumerable{System.Int32},System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Func{``0,System.Int32,System.Int32},System.Action{``0,System.Int32,System.Int32},System.Func{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Adds a group of integer fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Int32"/> keys to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="keys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> keys with which to retrieve values from the dictionary.</param>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSliderGroupFromIntDict``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a group of integer fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Int32"/> keys to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSliderGroupFromStringDict``1(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.Func{System.String,System.String},System.Func{``0,System.String,System.Int32},System.Action{``0,System.String,System.Int32},System.Func{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>Adds a group of integer fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.String"/> keys to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="keys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/> keys with which to retrieve values from the dictionary.</param>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddIntSliderGroupFromStringDict``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a group of integer fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.String"/> keys to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSlider``1(System.Func{System.String},System.Func{System.String},System.Func{``0,System.Single},System.Action{``0,System.Single},System.Func{``0},System.Nullable{System.Single},System.Nullable{System.Single},System.Single,System.String)">
            <summary>Adds a numeric field to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSlider``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a numeric float field to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSliderGroupFromArray``1(System.Int32,System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Func{``0,System.Int32,System.Single},System.Action{``0,System.Int32,System.Single},System.Func{``0},System.Nullable{System.Single},System.Nullable{System.Single},System.Single,System.String)">
            <summary>Adds a group of float fields based on an array to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="length">The length of the array.</param>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSliderGroupFromArray``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a group of float fields based on an array to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSliderGroupFromIntDict``1(System.Collections.Generic.IEnumerable{System.Int32},System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Func{``0,System.Int32,System.Single},System.Action{``0,System.Int32,System.Single},System.Func{``0},System.Nullable{System.Single},System.Nullable{System.Single},System.Single,System.String)">
            <summary>Adds a group of float fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Int32"/> keys to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="keys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/> keys with which to retrieve values from the dictionary.</param>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSliderGroupFromIntDict``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a group of float fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.Int32"/> keys to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSliderGroupFromStringDict``1(System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String},System.Func{System.String,System.String},System.Func{``0,System.String,System.Single},System.Action{``0,System.String,System.Single},System.Func{``0},System.Nullable{System.Single},System.Nullable{System.Single},System.Single,System.String)">
            <summary>Adds a group of float fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.String"/> keys to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="keys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/> keys with which to retrieve values from the dictionary.</param>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="step">The step between values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFloatSliderGroupFromStringDict``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a group of float fields based on a <see cref="T:System.Collections.Generic.Dictionary`2"/> of <see cref="T:System.String"/> keys to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddKeyBinding``1(System.Func{System.String},System.Func{System.String},System.Func{``0,StardewModdingAPI.Utilities.KeybindList},System.Action{``0,StardewModdingAPI.Utilities.KeybindList},System.Func{``0},System.String)">
            <summary>Adds a key binding field to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddKeyBinding``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a key binding field to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddColorPicker``1(System.Func{System.String},System.Func{System.String},System.Func{``0,Microsoft.Xna.Framework.Color},System.Action{``0,Microsoft.Xna.Framework.Color},System.Func{``0},System.Nullable{Microsoft.Xna.Framework.Color},System.Boolean,System.UInt32,System.String)">
            <summary>Adds a color picking option to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="getConfig">Gets the config instance.</param>
            <param name="default">A fallback value in case the user's input is invalid.</param>
            <param name="showAlpha">If GMCM Options is installed, show the alpha picker or not.</param>
            <param name="colorPickerStyle">GMCM Option's picker style.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddColorPicker``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a color picking option to the form using reflection.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The <see cref="T:System.Reflection.PropertyInfo"/> associated with a config property.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddDynamicListOption(System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IList{System.String}},System.Action{System.Collections.Generic.IList{System.String}},System.Func{System.Single,System.Int32},System.String)">
            <summary>Adds a multi-column list of checkbox options to the form.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="getOptionTooltip">Gets the option tooltip.</param>
            <param name="getValues">A delegate for getting the target list as a list of string items.</param>
            <param name="setValues">A delegate for setting the target list given a list of string items.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddDynamicKeyValuePairListOption(System.Func{System.String},System.Func{System.String},System.Func{System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Action{System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Int32,System.String},System.Func{System.Int32,System.String},System.Boolean,System.String)">
            <summary>Adds a multi-column list of checkbox options to the form.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="getOptionTooltip">Gets the option tooltip.</param>
            <param name="getPairs">A delegate for getting the target list of pairs as a list of <see cref="T:System.String"/>-<see cref="T:System.String"/> pairs.</param>
            <param name="setPairs">A delegate for setting the target list of pairs given a list of <see cref="T:System.String"/>-<see cref="T:System.String"/> pairs.</param>
            <param name="getTextBoxLabel">Gets the text box label.</param>
            <param name="getTextBoxTooltip">Gets the text box tooltip.</param>
            <param name="enumerateLabels">Whether to enumerate the labels.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddMultiCheckboxOption``1(System.Func{System.String},``0[],System.Func{``0,System.Boolean},System.Action{``0,System.Boolean},System.Func{``0,System.String},System.Func{``0,System.String},System.Action{``0,System.Boolean},System.Func{System.Single,System.Int32},System.String)">
            <summary>Adds a multi-column list of checkbox options to the form.</summary>
            <typeparam name="TCheckbox">The type of the object which represents the page.</typeparam>
            <param name="getOptionName">Gets the label text to show in the form.</param>
            <param name="checkboxes">The checkbox values.</param>
            <param name="getCheckboxValue">Gets the checkbox value.</param>
            <param name="setCheckboxValue">Sets the checkbox value.</param>
            <param name="getCheckboxLabel">Gets the display text to show for the checkbox.</param>
            <param name="getCheckboxTooltip">Gets the tooltip text to show for the checkbox.</param>
            <param name="onValueUpdated">A delegate to be called after values are changed.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddMultiPageLinkOption``1(System.Func{System.String},``0[],System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.Single,System.Int32})">
            <summary>Adds a multi-column list of checkbox options to the form.</summary>
            <typeparam name="TPage">The type of the object which represents the page.</typeparam>
            <param name="getOptionName">Gets the label text to show in the form.</param>
            <param name="pages">The page values.</param>
            <param name="getPageId">Gets the destination page ID.</param>
            <param name="getPageName">Gets the destination page name.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.SetTitleScreenOnlyForNextOptions(System.Boolean)">
            <summary>Sets whether the options registered after this point can only be edited from the title screen.</summary>
            <param name="titleScreenOnly">Whether the options can only be edited from the title screen.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
            <remarks>This lets you have different values per-field. Most mods should just set it once in <see cref="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.Register"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.OnFieldChanged(System.Action{System.String,System.Object})">
            <summary>Registers an action to invoke when a field's value is changed.</summary>
            <param name="action">Whether the field is enabled.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.ResetConfig">
            <summary>Resets the config model to the default values.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.SaveAndApply">
            <summary>Saves and applies the current config model.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.AddFromPropertyInfo``1(System.Reflection.PropertyInfo,System.Func{``0})">
            <summary>Adds a single reflected <paramref name="property"/> to the form.</summary>
            <typeparam name="TConfig">The type of the config instance.</typeparam>
            <param name="property">The reflected <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <param name="getConfig">Gets the config instance.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.GMCMBuilder`1.Unregister">
            <summary>Unregisters the mod config.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi">
            <summary>The API provided by Generic Mod Config Menu.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)">
            <summary>Register a mod whose config can be edited through the UI.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="reset">Reset the mod's config to its default values.</param>
            <param name="save">Save the mod's current config to the <c>config.json</c> file.</param>
            <param name="titleScreenOnly">Whether the options can only be edited from the title screen.</param>
            <remarks>
                Each mod can only be registered once, unless it's deleted via <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Unregister(StardewModdingAPI.IManifest)"/> before calling this
                again. Must be called before any method below.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Unregister(StardewModdingAPI.IManifest)">
            <summary>Remove a mod from the config UI and delete all its options and pages.</summary>
            <param name="mod">The mod's manifest.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddSectionTitle(StardewModdingAPI.IManifest,System.Func{System.String},System.Func{System.String})">
            <summary>Add a section title at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="text">The title text shown in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the title, or <see langword="null"/> to disable the
                tooltip.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddParagraph(StardewModdingAPI.IManifest,System.Func{System.String})">
            <summary>Add a paragraph of text at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="text">The paragraph text to display.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddImage(StardewModdingAPI.IManifest,System.Func{Microsoft.Xna.Framework.Graphics.Texture2D},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Int32)">
            <summary>Add an image at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="texture">The image texture to display.</param>
            <param name="texturePixelArea">The pixel area within the texture to display, or <see langword="null"/> to show the entire image.</param>
            <param name="scale">The zoom factor to apply to the image.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddBoolOption(StardewModdingAPI.IManifest,System.Func{System.Boolean},System.Action{System.Boolean},System.Func{System.String},System.Func{System.String},System.String)">
            <summary>Add a boolean option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddNumberOption(StardewModdingAPI.IManifest,System.Func{System.Int32},System.Action{System.Int32},System.Func{System.String},System.Func{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{System.Int32,System.String},System.String)">
            <summary>Add an integer option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="min">The minimum allowed value, or <see langword="null"/> to allow any.</param>
            <param name="max">The maximum allowed value, or <see langword="null"/> to allow any.</param>
            <param name="step">The interval of values that can be selected.</param>
            <param name="formatValue">Get the display text to show for a value, or <see langword="null"/> to show the number as-is.</param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddNumberOption(StardewModdingAPI.IManifest,System.Func{System.Single},System.Action{System.Single},System.Func{System.String},System.Func{System.String},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Func{System.Single,System.String},System.String)">
            <summary>Add a float option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="min">The minimum allowed value, or <see langword="null"/> to allow any.</param>
            <param name="max">The maximum allowed value, or <see langword="null"/> to allow any.</param>
            <param name="step">The interval of values that can be selected.</param>
            <param name="formatValue">Get the display text to show for a value, or <see langword="null"/> to show the number as-is.</param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddTextOption(StardewModdingAPI.IManifest,System.Func{System.String},System.Action{System.String},System.Func{System.String},System.Func{System.String},System.String[],System.Func{System.String,System.String},System.String)">
            <summary>Add a string option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="allowedValues">The values that can be selected, or <see langword="null"/> to allow any.</param>
            <param name="formatAllowedValue">
                Get the display text to show for a value from <paramref name="allowedValues"/>, or
                <see langword="null"/> to show the values as-is.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddKeybind(StardewModdingAPI.IManifest,System.Func{StardewModdingAPI.SButton},System.Action{StardewModdingAPI.SButton},System.Func{System.String},System.Func{System.String},System.String)">
            <summary>Add a key binding at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddKeybindList(StardewModdingAPI.IManifest,System.Func{StardewModdingAPI.Utilities.KeybindList},System.Action{StardewModdingAPI.Utilities.KeybindList},System.Func{System.String},System.Func{System.String},System.String)">
            <summary>Add a key binding list at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddPage(StardewModdingAPI.IManifest,System.String,System.Func{System.String})">
            <summary>
                Start a new page in the mod's config UI, or switch to that page if it already exists. All options registered
                after this will be part of that page.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="pageId">The unique page ID.</param>
            <param name="pageTitle">The page title shown in its UI, or <see langword="null"/> to show the <paramref name="pageId"/> value.</param>
            <remarks>
                You must also call <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddPageLink(StardewModdingAPI.IManifest,System.String,System.Func{System.String},System.Func{System.String})"/> to make the page accessible. This is only needed to set up a
                multi-page config UI. If you don't call this method, all options will be part of the mod's main config UI instead.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddPageLink(StardewModdingAPI.IManifest,System.String,System.Func{System.String},System.Func{System.String})">
            <summary>Add a link to a page added via <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddPage(StardewModdingAPI.IManifest,System.String,System.Func{System.String})"/> at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="pageId">The unique ID of the page to open when the link is clicked.</param>
            <param name="text">The link text shown in the form.</param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the link, or <see langword="null"/> to disable the tooltip.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.AddComplexOption(StardewModdingAPI.IManifest,System.Func{System.String},System.Action{Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2},System.Func{System.String},System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Func{System.Int32},System.String)">
            <summary>Add an option at the current position in the form using custom rendering logic.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="draw">
                Draw the option in the config UI. This is called with the sprite batch being rendered and the pixel
                position at which to start drawing.
            </param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <see langword="null"/> to disable the
                tooltip.
            </param>
            <param name="beforeMenuOpened">A callback raised just before the menu containing this option is opened.</param>
            <param name="beforeSave">
                A callback raised before the form's current values are saved to the config (i.e. before the
                <c>save</c> callback passed to <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="afterSave">
                A callback raised after the form's current values are saved to the config (i.e. after the
                <c>save</c> callback passed to <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="beforeReset">
                A callback raised before the form is reset to its default values (i.e. before the
                <c>reset</c> callback passed to <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="afterReset">
                A callback raised after the form is reset to its default values (i.e. after the <c>reset</c>
                callback passed to <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="beforeMenuClosed">A callback raised just before the menu containing this option is closed.</param>
            <param name="height">
                The pixel height to allocate for the option in the form, or <see langword="null"/> for a standard input-sized
                option. This is called and cached each time the form is opened.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <see langword="null"/> to auto-generate a
                randomized ID.
            </param>
            <remarks>
                The custom logic represented by the callback parameters is responsible for managing its own state if needed.
                For example, you can store state in a static field or use closures to use a state variable.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.SetTitleScreenOnlyForNextOptions(StardewModdingAPI.IManifest,System.Boolean)">
            <summary>Set whether the options registered after this point can only be edited from the title screen.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="titleScreenOnly">Whether the options can only be edited from the title screen.</param>
            <remarks>This lets you have different values per-field. Most mods should just set it once in <see cref="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})">
            <summary>Register a method to notify when any option registered by this mod is edited through the config UI.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="onChange">The method to call with the option's unique field ID and new value.</param>
            <remarks>
                Options use a randomized ID by default; you'll likely want to specify the <c>fieldId</c> argument when adding
                options if you use this.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.OpenModMenu(StardewModdingAPI.IManifest)">
            <summary>Open the config UI for a specific mod.</summary>
            <param name="mod">The mod's manifest.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GMCM.IGenericModConfigMenuApi.TryGetCurrentMenu(StardewModdingAPI.IManifest@,System.String@)">
            <summary>Get the currently-displayed mod config menu, if any.</summary>
            <param name="mod">The manifest of the mod whose config menu is being shown, or <see langword="null"/> if not applicable.</param>
            <param name="page">
                The page ID being shown for the current config menu, or <see langword="null"/> if not applicable. This may be
                <see langword="null"/> even if a mod config menu is shown (e.g. because the mod doesn't have pages).
            </param>
            <returns>Returns whether a mod config menu is being shown.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.CustomResourceClumps.ICustomResourceClumpsApi">
            <summary>The API provided by Custom Ore Nodes.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.ModIntegration`1">
            <summary>The base implementation for a mod integration.</summary>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
            <typeparam name="TIntegration">The <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/> type inheriting from this class.</typeparam>
        </member>
        <member name="F:DaLion.Shared.Integrations.ModIntegration`1._instance">
            <summary>The singleton instance.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.#ctor(StardewModdingAPI.IModRegistry)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/> class.</summary>
            <param name="registry">An API  for fetching metadata about loaded mods.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.Instance">
            <summary>Gets the singleton <typeparamref name="TIntegration"/> instance for this <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/>.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.IsValueCreated">
            <summary>Gets a value indicating whether an instance has been created for the singleton <typeparamref name="TIntegration"/> class.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.ModName">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.ModId">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.IsRegistered">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.ModRegistry">
            <summary>Gets aPI for fetching metadata about loaded mods.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.Register">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.RegisterImpl">
            <inheritdoc cref="M:DaLion.Shared.Integrations.IModIntegration.Register"/>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.TryGetApi``1(``0@)">
            <summary>Try to get an API for the mod.</summary>
            <typeparam name="TApi">The API type.</typeparam>
            <param name="api">The API instance.</param>
            <returns><see langword="true"/> if an api was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.ModIntegration`2">
            <summary>The base implementation for a mod integration.</summary>
            <typeparam name="TIntegration">The <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/> type inheriting from this class.</typeparam>
            <typeparam name="TApi">The API type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`2.#ctor(StardewModdingAPI.IModRegistry)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.ModIntegration`2"/> class.</summary>
            <param name="modRegistry">An API for fetching metadata about loaded mods.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`2.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`2.ModApi">
            <summary>Gets the mod's public API.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`2.AssertLoaded">
            <summary>Assert that the integration is loaded.</summary>
            <exception cref="T:System.InvalidOperationException">The integration isn't loaded.</exception>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.CurrencyType">
            <summary>
            The various currency types supported by <see cref="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateCurrencyIngredient(DaLion.Shared.Integrations.BetterCrafting.CurrencyType,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.Money">
            <summary>
            The player's gold.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.FestivalPoints">
            <summary>
            The player's earned points at the current festival. This should likely
            never actually be used, since players can't craft while they're at a
            festival in the first place.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.ClubCoins">
            <summary>
            The player's casino points.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.QiGems">
            <summary>
            The player's Qi Gems.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider">
            <summary>
            An <c>IInventoryProvider</c> is used by Better Crafting to discover and
            interact with various item storages in the game.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.IsValid(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
             <summary>
             Check to see if this object is valid for inventory operations.
            
             If location is null, it should not be considered when determining
             the validity of the object.
            
             </summary>
             <param name="obj">the object.</param>
             <param name="location">the map where the object is.</param>
             <param name="who">the player accessing the inventory, or null if no player is involved.</param>
             <returns>Whether or not the object is valid.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.CanInsertItems(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Check to see if items can be inserted into this object.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.CanExtractItems(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Check to see if items can be extracted from this object.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetMultiTileRegion(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            For objects larger than a single tile on the map, return the rectangle representing
            the object. For single tile objects, return null.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetTilePosition(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Return the real position of the object. If the object has no position, returns null.
            For multi-tile objects, this should return the "main" object if there is one.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetMutex(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Get the NetMutex that locks the object for multiplayer synchronization. This method must
            return a mutex. If null is returned, the object will be skipped.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.IsMutexRequired(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Whether or not a mutex is required for interacting with this object's inventory.
            You should always use a mutex to ensure items are handled safely with multiplayer,
            but in case you're doing something exceptional and Better Crafting should not
            worry about locking, you can explicitly disable mutex handling.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetItems(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Get a list of items in the object's inventory, for modification or viewing. Assume that
            anything using this list will use GetMutex() to lock the inventory before modifying.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.IsItemValid(System.Object,StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item)">
            <summary>
            Check to see if a specific item is allowed to be stored in the object's inventory.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
            <param name="item">the item we're checking.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.CleanInventory(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Clean the inventory of the object. This is for removing null entries, organizing, etc.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetActualCapacity(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Get the actual inventory capacity of the object's inventory. New items may be added to the
            GetItems() list up until this count.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IInventory">
            <summary>
            An <c>IInventory</c> represents an item storage that
            Better Crafting is interacting with, whether by extracting
            items or inserting them.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Object">
            <summary>
            Gets the object that has inventory.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Location">
            <summary>
            GEts where this object is located, if a location is relevant.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Player">
            <summary>
            Gets the player accessing the inventory, if a player is involved.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Mutex">
            <summary>
            Gets the NetMutex for this object, which should be locked before
            using it. If there is no mutex, then we apparently don't
            need to worry about that.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.IsLocked">
            <summary>
            Whether or not the object is locked and ready for read/write usage.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.IsValid">
            <summary>
            Whether or not the object is a valid inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.CanInsertItems">
            <summary>
            Whether or not we can insert items into this inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.CanExtractItems">
            <summary>
            Whether or not we can extract items from this inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetMultiTileRegion">
            <summary>
            For multi-tile inventories, the region that this inventory takes
            up in the world. Only rectangular multi-tile inventories are
            supported, and this is used primarily for discovering connections.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetTilePosition">
            <summary>
            Get the tile position of this object in the world, if it has one.
            For multi-tile inventories, this should be the primary tile if
            one exists.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetItems">
            <summary>
            Get this object's inventory as a list of items. May be null if
            there is an issue accessing the object's inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.IsItemValid(StardewValley.Item)">
            <summary>
            Check to see if a specific item is allowed to be stored in the
            object's inventory.
            </summary>
            <param name="item">The item we're checking.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.CleanInventory">
            <summary>
            Attempt to clean the object's inventory. This should remove null
            entries, and run any other necessary logic.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetActualCapacity">
            <summary>
            Get the number of item slots in the object's inventory. When adding
            items to the inventory, we will never extend the list beyond this
            number of entries.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient">
             <summary>
             An <c>IIngredient</c> represents a single ingredient used when crafting a
             recipe. An ingredient can be an item, a currency, or anything else.
            
             The API provides methods for getting basic item and currency ingredients,
             so you need not use this unless you're doing something fancy.
             </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SupportsQuality">
            <summary>
            Gets a value indicating whether gets whether or not this <c>IIngredient</c> supports quality control
            options, including using low quality first and limiting the maximum
            quality to use.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.DisplayName">
            <summary>
            Gets the name of this ingredient to be displayed in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Texture">
            <summary>
            Gets the texture to use when drawing this ingredient in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SourceRectangle">
            <summary>
            Gets the source rectangle to use when drawing this ingredient in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Quantity">
            <summary>
            Gets the amount of this ingredient required to perform a craft.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.GetAvailableQuantity(StardewValley.Farmer,System.Collections.Generic.IList{StardewValley.Item},System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32)">
            <summary>
            Determine how much of this ingredient is available for crafting both
            in the player's inventory and in the other inventories.
            </summary>
            <param name="who">The farmer performing the craft.</param>
            <param name="items">A list of all available <see cref="T:StardewValley.Item"/>s across
            all available <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/> instances. If you only support
            consuming ingredients from certain <c>IInventory</c> types, you should
            not use this value and instead iterate over the inventories. Please
            note that this does <b>not</b> include the player's inventory.</param>
            <param name="inventories">All the available inventories.</param>
            <param name="maxQuality">The maximum item quality we are allowed to
            count. This cannot be ignored unless <see cref="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SupportsQuality"/>
            returns <c>false</c>.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Consume(StardewValley.Farmer,System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)">
            <summary>
            Consume this ingredient out of the player's inventory and the other
            available inventories.
            </summary>
            <param name="who">The farmer performing the craft.</param>
            <param name="inventories">All the available inventories.</param>
            <param name="maxQuality">The maximum item quality we are allowed to
            count. This cannot be ignored unless <see cref="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SupportsQuality"/>
            returns <c>false</c>.</param>
            <param name="lowQualityFirst">Whether or not we should make an effort
            to consume lower quality ingredients before consuming higher quality
            ingredients.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent">
            <summary>
            This event is dispatched by Better Crafting whenever a player performs a
            craft, and may be fired multiple times in quick succession if a player is
            performing bulk crafting.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Player">
            <summary>
            Gets the player performing the craft.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Item">
            <summary>
            Gets or sets the item being crafted, may be null depending on the recipe.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Menu">
            <summary>
            Gets the <c>BetterCraftingPage</c> menu instance that the player is
            crafting from.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Cancel">
            <summary>
            Cancel the craft, marking it as a failure. The ingredients will not
            be consumed and the player will not receive the item.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Complete">
            <summary>
            Complete the craft, marking it as a success. The ingredients will be
            consumed and the player will receive the item, if there is one.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe">
            <summary>
            An <c>IRecipe</c> represents a single crafting recipe, though it need not
            be associated with a vanilla <see cref="T:StardewValley.CraftingRecipe"/>.
            Recipes usually produce <see cref="T:StardewValley.Item"/>s, but they are not required
            to do so.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.SortValue">
            <summary>
            Gets an additional sorting value to apply to recipes in the Better Crafting
            menu. Applied before other forms of sorting.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Name">
            <summary>
            Gets the public name of the recipe. For standard recipes, this matches the
            name of the recipe used in the player's cookingRecipes / craftingRecipes
            dictionaries. For non-standard recipes, this can be anything as long as
            it's unique, and it's recommended to prefix the names with your mod's
            unique ID to ensure uniqueness.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.DisplayName">
            <summary>
            Gets a name displayed to the user.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Description">
            <summary>
            Gets an optional description of the recipe displayed on its tooltip.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.CraftingRecipe">
            <summary>
            Gets the vanilla <c>CraftingRecipe</c> instance for this recipe, if one
            exists. This may be used for interoperability with some other
            mods, but is not required.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.HasRecipe(StardewValley.Farmer)">
            <summary>
            Whether or not the player knows this recipe.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GetTimesCrafted(StardewValley.Farmer)">
            <summary>
            How many times the player has crafted this recipe. If advanced crafting
            information is enabled, and this value is non-zero, it will be
            displayed on recipe tooltips.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Texture">
            <summary>
            Gets the texture to use when drawing this recipe in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.SourceRectangle">
            <summary>
            Gets the source rectangle to use when drawing this recipe in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GridHeight">
            <summary>
            Gets how tall this recipe should appear in the menu, in grid squares.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GridWidth">
            <summary>
            Gets how wide this recipe should appear in the menu, in grid squares.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.QuantityPerCraft">
            <summary>
            Gets the quantity of item produced every time this recipe is crafted.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Ingredients">
            <summary>
            Gets the ingredients used by this recipe.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Stackable">
            <summary>
            Gets a value indicating whether gets whether or not the item created by this recipe is stackable, and thus
            eligible for bulk crafting.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.CanCraft(StardewValley.Farmer)">
            <summary>
            Check to see if the given player can currently craft this recipe. This
            method is suitable for checking external conditions. For example, the
            add-on for crafting buildings from the crafting menu uses this to check
            that the current <see cref="T:StardewValley.GameLocation"/> allows building.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GetTooltipExtra(StardewValley.Farmer)">
            <summary>
            An optional, extra string to appear on item tooltips. This can be used
            for displaying error messages to the user, or anything else that would
            be relevant. For example, the add-on for crafting buildings uses this
            to display error messages telling users why they are unable to craft
            a building, if they cannot.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.CreateItem">
            <summary>
            Create an instance of the Item this recipe crafts, if this recipe
            crafts an item. Returning null is perfectly acceptable.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.PerformCraft(DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent)">
            <summary>
            This method is called when performing a craft, and can be used to
            perform asynchronous actions or other additional logic as required.
            While crafting is taking place, Better Crafting will hold locks on
            every inventory involved. You should ideally do as little work
            here as possible.
            </summary>
            <param name="evt">Details about the event, and methods for telling
            Better Crafting when the craft has succeeded or failed.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider">
            <summary>
            Better Crafting uses <c>IRecipeProvider</c> to discover crafting recipes
            for display in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.RecipePriority">
            <summary>
            Gets the priority of this recipe provider, for sorting purposes.
            When handling CraftingRecipe instances, the first provider
            to return a result is used.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.CacheAdditionalRecipes">
            <summary>
            Gets a value indicating whether gets whether or not additional recipes from this provider should be
            cached. If the list should be updated every time the player
            opens the menu, this should return false.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.GetRecipe(StardewValley.CraftingRecipe)">
            <summary>
            Get an <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> wrapper for a <see cref="T:StardewValley.CraftingRecipe"/>.
            </summary>
            <param name="recipe">The vanilla <c>CraftingRecipe</c> to wrap.</param>
            <returns>An IRecipe wrapper, or null if this provider does
            not handle this recipe.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.GetAdditionalRecipes(System.Boolean)">
            <summary>
            Get any additional recipes in IRecipe form. Additional recipes
            are those recipes not included in the `CraftingRecipe.cookingRecipes`
            and `CraftingRecipe.craftingRecipes` objects.
            </summary>
            <param name="cooking">Whether we want cooking recipes or crafting recipes.</param>
            <returns>An enumeration of this provider's additional recipes, or null.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu">
            <summary>
            This interface contains a few basic properties on the Better Crafting
            menu that may be useful for other mods.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Menu">
            <summary>
            Gets the <see cref="T:StardewValley.Menus.IClickableMenu"/> instance for this menu. This is the
            same object, but included for convenience due to how API proxying works.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Cooking">
            <summary>
            Gets a value indicating whether or not this crafting menu is for cooking. If this is
            false, then the menu is for crafting recipes.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Standalone">
            <summary>
            Gets a value indicating whether whether or not this is a standalone menu. If this is false,
            this menu is likely contained in <see cref="T:StardewValley.Menus.GameMenu"/>.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Editing">
            <summary>
            Gets a value indicating whether whether or not the user is currently editing their categories.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Working">
            <summary>
            Gets a value indicating whether whether or not the menu is actively crafting something. This
            will only return true when a craft is happening, or when the
            menu is waiting for an asynchronous craft to return.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.ActiveRecipe">
            <summary>
            Gets get the current recipe. This is normally the recipe that the
            player's cursor is hovering over, but when performing a craft
            or when the bulk crafting menu is open, it will return the
            relevant recipe.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.ToggleEditMode">
            <summary>
            Calling this method will toggle edit mode, as though the user
            clicked the button themselves.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.GetListedRecipes">
            <summary>
            Get a list of specific recipes that are to be displayed in the
            crafting menu. If this list is <see langword="null"/>, all recipes will be
            displayed to the user.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.UpdateListedRecipes(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Set a new list of specific recipes that are to be displayed in the
             crafting menu. Note: If the user does not know these recipes, they
             will not be displayed even if they're in this list.
            
             Set the list to <see langword="null"/> to display all recipes.
             </summary>
             <param name="recipes">The list of recipes that should be displayed.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IPopulateContainersEvent">
            <summary>
            This event is emitted by <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting"/> whenever a new
            Better Crafting menu is opened, and serves to allow other mods to add
            or remove specific containers from a menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPopulateContainersEvent.Menu">
            <summary>
            Gets the relevant Better Crafting menu.
            </summary>
        </member>
        <member name="E:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.MenuPopulateContainers">
            <summary>
            This event is fired whenever a new Better Crafting menu is opened,
            allowing other mods to manipulate the list of containers.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.OpenCraftingMenu(System.Boolean,System.Boolean,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Boolean,System.Collections.Generic.IList{System.Tuple{System.Object,StardewValley.GameLocation}},System.Collections.Generic.IList{System.String})">
             <summary>
             Try to open the Better Crafting menu. This may fail if there is another
             menu open that cannot be replaced.
            
             If opening the menu from an object in the world, such as a workbench,
             its location and tile position can be provided for automatic detection
             of nearby chests.
            
             Better Crafting has its own handling of mutexes, so please do not worry
             about locking Chests before handing them off to the menu.
            
             When discovering additional containers, Better Crafting scans all tiles
             around each of its existing known containers. If a location and position
             for the menu source is provided, the tiles around that position will
             be scanned as well.
            
             Discovery depends on the user's settings, though at a minimum a 3×3 area
             will be scanned to mimic the scanning radius of the vanilla workbench.
             </summary>
             <param name="cooking">If true, open the cooking menu. If false, open the crafting menu.</param>
             <param name="silent_open">If true, do not make a sound upon opening the menu.</param>
             <param name="location">The map the associated object is in, or null if there is no object.</param>
             <param name="position">The tile position the associated object is at, or null if there is no object.</param>
             <param name="area">The tile area the associated object covers, or null if there is no object or if the object only covers a single tile.</param>
             <param name="discover_containers">If true, attempt to discover additional material containers.</param>
             <param name="containers">An optional list of containers to draw extra crafting materials from.</param>
             <param name="listed_recipes">An optional list of recipes by name. If provided, only these recipes will be listed in the crafting menu.</param>
             <returns>Whether or not the menu was opened successfully.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.GetMenuType">
            <summary>
            Return the Better Crafting menu's type. In case you want to do
            spooky stuff to it, I guess.
            </summary>
            <returns>The BetterCraftingMenu type.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.GetActiveMenu">
            <summary>
            Get the currently open Better Crafting menu. This may be <see langword="null"/> if
            the menu is still opening.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.AddRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
             <summary>
             Register a recipe provider with Better Crafting. Calling this
             will also invalidate the recipe cache.
            
             If the recipe provider was already registered, this does nothing.
             </summary>
             <param name="provider">The recipe provider to add.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.RemoveRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
             <summary>
             Unregister a recipe provider. Calling this will also invalidate
             the recipe cache.
            
             If the recipe provider was not registered, this does nothing.
             </summary>
             <param name="provider">The recipe provider to remove.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.InvalidateRecipeCache">
            <summary>
            Invalidate the recipe cache. You should call this if your recipe
            provider ever adds new recipes after registering it.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.GetRecipes(System.Boolean)">
            <summary>
            Get all known recipes from all providers.
            </summary>
            <param name="cooking">If true, return cooking recipes. If false, return
            crafting recipes.</param>
            <returns>A collection of the recipes.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateRecipeWithIngredients(StardewValley.CraftingRecipe,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IIngredient},System.Action{DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent})">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> that gets its properties from an
            existing <see cref="T:StardewValley.CraftingRecipe"/> but that uses different
            <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="recipe">The <see cref="T:StardewValley.CraftingRecipe"/> to use
            as a base.</param>
            <param name="ingredients">An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s
            the recipe should consume.</param>
            <param name="onPerformCraft">An optional event handler to perform
            additional logic when the item is crafted.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateBaseIngredient(System.Int32,System.Int32)">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches an item by ID
            and that consumes an exact quantity.
            </summary>
            <param name="item">The item ID to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateMatcherIngredient(System.Func{StardewValley.Item,System.Boolean},System.Int32,System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches items using a
            function and that consumes an exact quantity.
            </summary>
            <param name="matcher">The function to check items.</param>
            <param name="quantity">The quantity to consume.</param>
            <param name="displayName">The name to display for the ingredient.</param>
            <param name="texture">The texture to display the ingredient with.</param>
            <param name="source">The source rectangle of the texture to display.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateCurrencyIngredient(DaLion.Shared.Integrations.BetterCrafting.CurrencyType,System.Int32)">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches a specific
            currency and consumes an exact quantity.
            </summary>
            <param name="type">The currency to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateErrorIngredient">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that does not match anything
            but requires a quantity of one, thus always preventing a recipe
            from being crafted. It displays as an error item in the
            ingredients list.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.ConsumeItems(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Func{StardewValley.Item,System.Boolean},System.Int32}},StardewValley.Farmer,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)">
            <summary>
            Consume matching items from a player, and also from a set of
            <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/> instances. This is a helper method for
            building custom <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="items">An enumeration of tuples where the function
            matches items, and the integer is the quantity to consume.</param>
            <param name="who">The player to consume items from, if any. Items
            are consumed from the player's inventory first.</param>
            <param name="inventories">An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/>
            instances to consume items from, such as the one passed to
            <see cref="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Consume(StardewValley.Farmer,System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)"/>.</param>
            <param name="maxQuality">The maximum quality to consume.</param>
            <param name="lowQualityFirst">Whether or not to consume low quality
            items first.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateDefaultCategory(System.Boolean,System.String,System.Func{System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Create a new default category for recipes. Every player will receive
             this category, but they may delete it or alter it as they see fit.
             </summary>
             <param name="cooking">If true, this category is added to cooking.
             Otherwise, crafting.</param>
             <param name="categoryId">An public ID for the category. Make sure
             this is unique.</param>
             <param name="Name">A method returning a human-readable name to be
             displayed in the menu.</param>
             <param name="recipeNames">An enumeration of recipe names for recipes to
             display in the category.</param>
             <param name="iconRecipe">The name of a recipe to use as the category's
             default icon.</param>
            
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.AddRecipesToDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add recipes to a default category. If a player has modified their
            category, this will not affect them.
            </summary>
            <param name="cooking">If true, we alter a cooking category.
            Otherwise, crafting.</param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">An enummeration of recipe names for recipes to
            add to the category.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.RemoveRecipesFromDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove recipes from a default category. If a player has modified their
            category, this will not affect them.
            </summary>
            <param name="cooking">If true, we alter a cooking category.
            Otherwise, crafting.</param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">An enummeration of recipe names for recipes to
            remove from the category.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.RegisterInventoryProvider(System.Type,DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider)">
            <summary>
            Register an inventory provider with Better Crafting. Inventory
            providers are used for interfacing with chests and other objects
            in the world that contain items.
            </summary>
            <param name="type"></param>
            <param name="provider"></param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.UnregisterInventoryProvider(System.Type)">
            <summary>
            Unregister an inventory provider.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi">
            <summary>The API provided by Better Crafting.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.OpenCraftingMenu(System.Boolean,System.Boolean,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Boolean,System.Collections.Generic.IList{System.Tuple{System.Object,StardewValley.GameLocation}},System.Collections.Generic.IList{System.String})">
            <summary>
                Try to open the Better Crafting menu. This may fail if there is another
                menu open that cannot be replaced.
                If opening the menu from an object in the world, such as a workbench,
                its location and tile position can be provided for automatic detection
                of nearby chests.
                Better Crafting has its own handling of mutexes, so please do not worry
                about locking Chests before handing them off to the menu.
                When discovering additional containers, Better Crafting scans all tiles
                around each of its existing known containers. If a location and position
                for the menu source is provided, the tiles around that position will
                be scanned as well.
                Discovery depends on the user's settings, though at a minimum a 3×3 area
                will be scanned to mimic the scanning radius of the vanilla workbench.
            </summary>
            <param name="cooking">If true, open the cooking menu. If false, open the crafting menu.</param>
            <param name="silent_open">If true, do not make a sound upon opening the menu.</param>
            <param name="location">The map the associated object is in, or null if there is no object.</param>
            <param name="position">The tile position the associated object is at, or null if there is no object.</param>
            <param name="area">
                The tile area the associated object covers, or null if there is no object or if the object only
                covers a single tile.
            </param>
            <param name="discover_containers">If true, attempt to discover additional material containers.</param>
            <param name="containers">An optional list of containers to draw extra crafting materials from.</param>
            <param name="listed_recipes">
                An optional list of recipes by name. If provided, only these recipes will be listed in the
                crafting menu.
            </param>
            <returns>Whether or not the menu was opened successfully.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.AddRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
            <summary>
                Register a recipe provider with Better Crafting. Calling this
                will also invalidate the recipe cache.
                If the recipe provider was already registered, this does nothing.
            </summary>
            <param name="provider">The recipe provider to add.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.RemoveRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
            <summary>
                Unregister a recipe provider. Calling this will also invalidate
                the recipe cache.
                If the recipe provider was not registered, this does nothing.
            </summary>
            <param name="provider">The recipe provider to remove.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.InvalidateRecipeCache">
            <summary>
                Invalidate the recipe cache. You should call this if your recipe
                provider ever adds new recipes after registering it.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.GetRecipes(System.Boolean)">
            <summary>
                Get all known recipes from all providers.
            </summary>
            <param name="cooking">
                If true, return cooking recipes. If false, return
                crafting recipes.
            </param>
            <returns>A collection of the recipes.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateRecipeWithIngredients(StardewValley.CraftingRecipe,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IIngredient},System.Action{DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent})">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> that gets its properties from an
                existing <see cref="T:StardewValley.CraftingRecipe"/> but that uses different
                <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="recipe">
                The <see cref="T:StardewValley.CraftingRecipe"/> to use
                as a base.
            </param>
            <param name="ingredients">
                An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s
                the recipe should consume.
            </param>
            <param name="onPerformCraft">
                An optional event handler to perform
                additional logic when the item is crafted.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateBaseIngredient(System.Int32,System.Int32)">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches an item by ID
                and that consumes an exact quantity.
            </summary>
            <param name="item">The item ID to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateCurrencyIngredient(DaLion.Shared.Integrations.BetterCrafting.CurrencyType,System.Int32)">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches a specific
                currency and consumes an exact quantity.
            </summary>
            <param name="type">The currency to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateMatcherIngredient(System.Func{StardewValley.Item,System.Boolean},System.Int32,System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches items using a
                function and that consumes an exact quantity.
            </summary>
            <param name="matcher">The function to check items.</param>
            <param name="quantity">The quantity to consume.</param>
            <param name="displayName">The name to display for the ingredient.</param>
            <param name="texture">The texture to display the ingredient with.</param>
            <param name="source">The source rectangle of the texture to display.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateErrorIngredient">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that does not match anything
                but requires a quantity of one, thus always preventing a recipe
                from being crafted. It displays as an error item in the
                ingredients list.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.ConsumeItems(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Func{StardewValley.Item,System.Boolean},System.Int32}},StardewValley.Farmer,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)">
            <summary>
                Consume matching items from a player, and also from a set of
                <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/> instances. This is a helper method for
                building custom <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="items">
                An enumeration of tuples where the function
                matches items, and the integer is the quantity to consume.
            </param>
            <param name="who">
                The player to consume items from, if any. Items
                are consumed from the player's inventory first.
            </param>
            <param name="inventories">
                An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/>
                instances to consume items from, such as the one passed to
                <see cref="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Consume(StardewValley.Farmer,System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)"/>.
            </param>
            <param name="maxQuality">The maximum quality to consume.</param>
            <param name="lowQualityFirst">
                Whether or not to consume low quality
                items first.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateDefaultCategory(System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Create a new default category for recipes. Every player will receive
                this category, but they may delete it or alter it as they see fit.
            </summary>
            <param name="cooking">
                If true, this category is added to cooking.
                Otherwise, crafting.
            </param>
            <param name="categoryId">
                An public ID for the category. Make sure
                this is unique.
            </param>
            <param name="name">A human-readable name displayed in the menu.</param>
            <param name="recipeNames">
                An enumeration of recipe names for recipes to
                display in the category.
            </param>
            <param name="iconRecipe">
                The name of a recipe to use as the category's
                default icon.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.AddRecipesToDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add recipes to a default category. If a player has modified their
                category, this will not affect them.
            </summary>
            <param name="cooking">
                If true, we alter a cooking category.
                Otherwise, crafting.
            </param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">
                An enumeration of recipe names for recipes to
                add to the category.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.RemoveRecipesFromDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Remove recipes from a default category. If a player has modified their
                category, this will not affect them.
            </summary>
            <param name="cooking">
                If true, we alter a cooking category.
                Otherwise, crafting.
            </param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">
                An enumeration of recipe names for recipes to
                remove from the category.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.RegisterInventoryProvider(System.Type,DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider)">
            <summary>
                Register an inventory provider with Better Crafting. Inventory
                providers are used for interfacing with chests and other objects
                in the world that contain items.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.UnregisterInventoryProvider(System.Type)">
            <summary>
                Un-register an inventory provider.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.CustomOreNodes.ICustomOreNodesApi">
            <summary>The API provided by Custom Ore Nodes.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.IModIntegration">
            <summary>Handles integration with a given mod.</summary>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.ModName">
            <summary>Gets a human-readable name for the mod.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.ModId">
            <summary>Gets the mod's unique ID.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.IsLoaded">
            <summary>Gets a value indicating whether the mod is available.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.IsRegistered">
            <summary>Gets a value indicating whether the integration has been registered.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.IModIntegration.Register">
            <summary>Registers the integration and performs initial setup.</summary>
            <returns><see langword="true"/> if the registration was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.MathUtils">
            <summary>Provides generally useful methods.</summary>
        </member>
        <member name="M:DaLion.Shared.MathUtils.Sigmoid(System.Double)">
            <summary>Applies the <paramref name="value"/> to a sigmoid function.</summary>
            <param name="value">The desired value.</param>
            <returns>The value of the sigmoid at <paramref name="value"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.MathUtils.Logit(System.Double)">
            <summary>Applies the <paramref name="value"/> to a logit function.</summary>
            <param name="value">The desired value.</param>
            <returns>The value of the logit at <paramref name="value"/>.</returns>
            <remarks>The logit function is the inverse of the sigmoid.</remarks>
        </member>
        <member name="M:DaLion.Shared.MathUtils.BoundedSCurve(System.Double,System.Double)">
            <summary>Applies the <paramref name="value"/> to an S-curve bounded between 0 and 1.</summary>
            <param name="value">The desired value.</param>
            <param name="beta">
                Determines the orientation and stretch of the curve.
                Positive values will map 0 -> 1 and 1 -> 0, while negative values will map 0 -> 0 and 1 -> 1.
                Higher absolute values yield a more dramatic transition between bounds.
            </param>
            <returns>The value of the curve at <paramref name="value"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.MathUtils.Arange(System.Double,System.Int32)">
            <summary>Produces a sequence of <paramref name="count"/> double-precision floating point numbers beginning at <paramref name="start"/>.</summary>
            <param name="start">The starting value.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A range of <paramref name="count"/> double-precision floating point numbers beginning at <paramref name="start"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.MathUtils.LinSpace(System.Double,System.Double,System.Int32)">
            <summary>Produces a sequence of numbers spaced evenly on a linear scale (a geometric progression).</summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="end">The final value of the sequence.</param>
            <param name="count">The number of samples to generate.</param>
            <returns>Returns numbers spaced evenly on a linear scale.</returns>
        </member>
        <member name="M:DaLion.Shared.MathUtils.LogSpace(System.Double,System.Double,System.Int32,System.Double)">
            <summary>Produces a sequence of numbers spaced evenly on a log scale.</summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="end">The final value of the sequence.</param>
            <param name="count">The number of samples to generate.</param>
            <param name="base">The base of the log space.</param>
            <returns>Returns numbers spaced evenly on a log scale.</returns>
        </member>
        <member name="M:DaLion.Shared.MathUtils.GeomSpace(System.Double,System.Double,System.Int32)">
            <summary>Produces a sequence of numbers spaced evenly on a log scale (a geometric progression).</summary>
            <param name="start">The starting value of the sequence.</param>
            <param name="end">The final value of the sequence.</param>
            <param name="count">The number of samples to generate.</param>
            <returns>Returns numbers spaced evenly on a log scale (a geometric progression).</returns>
        </member>
        <member name="T:DaLion.Shared.Networking.Broadcaster">
            <summary>Provides methods for synchronous and asynchronous communication between remote online players.</summary>
        </member>
        <member name="F:DaLion.Shared.Networking.Broadcaster._helper">
            <summary> The <see cref="T:StardewModdingAPI.IMultiplayerHelper"/> API of the current<see cref= "T:StardewModdingAPI.IMod"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Networking.Broadcaster._modId">
            <summary>The unique ID of the active mod.</summary>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.#ctor(StardewModdingAPI.IMultiplayerHelper,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Networking.Broadcaster"/> class.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IMultiplayerHelper"/> API of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="modId">The unique ID of the active mod.</param>
        </member>
        <member name="P:DaLion.Shared.Networking.Broadcaster.ResponseReceived">
            <summary>Gets the cached the response from the latest asynchronous <see cref="T:System.Threading.Tasks.Task"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.SendPublicChat(System.String,System.Boolean)">
            <summary>Sends a chat message to all peers.</summary>
            <param name="text">The chat text to send.</param>
            <param name="error">Whether to format the text as an error.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.SendPrivateChat(System.Int64,StardewValley.LocalizedContentManager.LanguageCode,System.String)">
            <summary>Sends a private message to the specified network peer.</summary>
            <param name="playerId">The player ID.</param>
            <param name="code">The <see cref="T:StardewValley.LocalizedContentManager.LanguageCode"/>.</param>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.Broadcast(System.String,System.String)">
            <summary>Sends a synchronous <paramref name="message"/> to all online peers.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessagePeer(System.String,System.String,System.Int64)">
            <summary>Sends a synchronous <paramref name="message"/> to a specific network peer.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="playerId">The unique ID of the recipient.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessagePeer(System.String,System.String,System.Int64,System.String)">
            <summary>
                Sends a synchronous <paramref name="message"/> to a network peer that should be received by a specific
                mod.
            </summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="playerId">The unique ID of the recipient player.</param>
            <param name="modId">The unique ID of the recipient mod.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessageHost(System.String,System.String)">
            <summary>Sends a synchronous <paramref name="message"/> to the network host.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessageHost(System.String,System.String,System.String)">
            <summary>
                Sends a synchronous <paramref name="message"/> to the network host that should be received by a specific
                mod.
            </summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="modId">The unique ID of the recipient mod.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.RequestAsync(System.String,System.String,System.Int64)">
            <summary>Sends an asynchronous request to a network peer and await a response.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="playerId">The unique ID of the recipient player.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that should resolve to the peer's response.</returns>
        </member>
        <member name="T:DaLion.Shared.Logger">
            <summary>Simplified wrapper for SMAPI's <see cref="T:StardewModdingAPI.IMonitor"/>.</summary>
            <remarks>Initializes the static instance.</remarks>
            <param name="monitor">Encapsulates monitoring and logging for a given module.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.#ctor(StardewModdingAPI.IMonitor)">
            <summary>Simplified wrapper for SMAPI's <see cref="T:StardewModdingAPI.IMonitor"/>.</summary>
            <remarks>Initializes the static instance.</remarks>
            <param name="monitor">Encapsulates monitoring and logging for a given module.</param>
        </member>
        <member name="F:DaLion.Shared.Logger._monitor">
            <inheritdoc cref="T:StardewModdingAPI.IMonitor"/>
        </member>
        <member name="M:DaLion.Shared.Logger.D(System.String)">
            <summary>Logs a message as debug.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.T(System.String)">
            <summary>Logs a message as trace.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.I(System.String)">
            <summary>Logs a message as info.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.A(System.String)">
            <summary>Logs a message as alert.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.W(System.String)">
            <summary>Logs a message as warn.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.E(System.String)">
            <summary>Logs a message as error.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.V(System.String)">
            <summary>Logs a message as error.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Logger.Caller">
            <summary>Logs the caller method as Debug.</summary>
        </member>
        <member name="M:DaLion.Shared.Logger.StackTrace">
            <summary>Logs the entire stack trace.</summary>
        </member>
        <member name="T:DaLion.Shared.Caching.IntervalMemoryCache`2">
            <summary>A memory cache with sliding expiry based on custom intervals, with no background processing.</summary>
            <typeparam name="TKey">The cache key type.</typeparam>
            <typeparam name="TValue">The cache value type.</typeparam>
            <remarks>
                   This is optimized for small caches that are reset relatively rarely. Each cache entry is marked as hot (accessed since the interval started) or stale.
                   When a new interval is started, stale entries are cleared and hot entries become stale.
                   Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.
            </remarks>
        </member>
        <member name="F:DaLion.Shared.Caching.IntervalMemoryCache`2._hotCache">
            <summary>The cached values that were accessed during the current interval.</summary>
        </member>
        <member name="F:DaLion.Shared.Caching.IntervalMemoryCache`2._staleCache">
            <summary>The cached values that will expire on the next interval.</summary>
        </member>
        <member name="M:DaLion.Shared.Caching.IntervalMemoryCache`2.GetOrSet(`0,System.Func{`1})">
            <summary>Gets a value from the cache, fetching it first if needed.</summary>
            <param name="cacheKey">The unique key for the cached value.</param>
            <param name="get">A delegate for getting the latest data if it's not in the cache yet.</param>
            <returns>The cached value corresponding to the given <paramref name="cacheKey"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Caching.IntervalMemoryCache`2.StartNewInterval">
            <summary>Starts a new cache interval, removing any stale entries.</summary>
        </member>
        <member name="T:DaLion.Shared.Reflection.Reflector">
            <summary>Provides delegates to inaccessible code.</summary>
            <remarks>Based on SMAPI's <see href="https://github.com/Pathoschild/SMAPI/blob/develop/src/SMAPI/Modules/Reflection/Reflector.cs">Reflector</see> class by Pathoschild.</remarks>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.NewCacheInterval">
            <summary>Starts a new cache interval, clearing stale reflection lookups.</summary>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldGetter``2(System.Type,System.String)">
            <summary>Gets a delegate which returns the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldGetter``2(System.Object,System.String)">
            <summary>Gets a delegate which returns the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="instance">The instance which has the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldGetter``2(System.String,System.String)">
            <summary>Gets a delegate which returns the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="typeName">The name of the type which has the field.</param>
            <param name="fieldName">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldGetter``2(System.String)">
            <summary>Gets a delegate which returns the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="name">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
            <remarks>This overload requires that the target field be declared within the hierarchy of <typeparamref name="TInstance"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldGetter``1(System.Type,System.String)">
            <summary>Gets a delegate which returns the value of a static field.</summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="type">The type which declares the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldGetter``1(System.String,System.String)">
            <summary>Gets a delegate which returns the value of a static field.</summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="typeName">The name of the type which declares the field.</param>
            <param name="fieldName">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldSetter``2(System.Type,System.String)">
            <summary>Gets a delegate which sets the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldSetter``2(System.Object,System.String)">
            <summary>Gets a delegate which sets the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="instance">The instance which has the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldSetter``2(System.String,System.String)">
            <summary>Gets a delegate which sets the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="typeName">The name of the type which has the field.</param>
            <param name="fieldName">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldSetter``2(System.String)">
            <summary>Gets a delegate which sets the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="name">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
            <remarks>This overload requires that the target field be declared within the hierarchy of <typeparamref name="TInstance"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldSetter``1(System.Type,System.String)">
            <summary>Gets a delegate which sets the value of a static field.</summary>
            <typeparam name="TField">The type that will be returned by the delegate.</typeparam>
            <param name="type">The type which declares the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldSetter``1(System.String,System.String)">
            <summary>Gets a delegate which sets the value of a static field.</summary>
            <typeparam name="TField">The type that will be returned by the delegate.</typeparam>
            <param name="typeName">The name of the type which declares the field.</param>
            <param name="fieldName">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertyGetter``2(System.Type,System.String)">
            <summary>Gets a delegate which returns the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertyGetter``2(System.Object,System.String)">
            <summary>Gets a delegate which returns the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="instance">The instance which has the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertyGetter``2(System.String,System.String)">
            <summary>Gets a delegate which returns the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="typeName">The name of the type which has the property.</param>
            <param name="propertyName">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertyGetter``2(System.String)">
            <summary>Gets a delegate which returns the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="name">The property name.</param>
            <returns>A delegate to the property getter.</returns>
            <remarks>This overload requires that the target field be declared within the hierarchy of <typeparamref name="TInstance"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertyGetter``1(System.Type,System.String)">
            <summary>Gets a delegate which returns the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="type">The type which declares the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertyGetter``1(System.String,System.String)">
            <summary>Gets a delegate which returns the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="typeName">The name of the type which declares the property.</param>
            <param name="propertyName">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertySetter``2(System.Type,System.String)">
            <summary>Gets a delegate which sets the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertySetter``2(System.Object,System.String)">
            <summary>Gets a delegate which sets the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="instance">The instance which has the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertySetter``2(System.String,System.String)">
            <summary>Gets a delegate which sets the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="typeName">The name of the type which has the property.</param>
            <param name="propertyName">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertySetter``2(System.String)">
            <summary>Gets a delegate which sets the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance that the delegate will be invoked on.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="name">The property name.</param>
            <returns>A delegate to the property setter.</returns>
            <remarks>This overload requires that the target field be declared within the hierarchy of <typeparamref name="TInstance"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertySetter``1(System.Type,System.String)">
            <summary>Gets a delegate which sets the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="type">The type which declares the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertySetter``1(System.String,System.String)">
            <summary>Gets a delegate which sets the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="typeName">The name of the type which declares the property.</param>
            <param name="propertyName">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundMethodDelegate``1(System.Type,System.String)">
            <summary>Gets a delegate which calls an instance method.</summary>
            <typeparam name="TDelegate">
                A delegate type which mirrors the desired method signature and accepts the target
                instance type as the first parameter.</typeparam>
            <param name="type">The type which has the method.</param>
            <param name="name">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundMethodDelegate``1(System.Object,System.String)">
            <summary>Gets a delegate which calls an instance method.</summary>
            <typeparam name="TDelegate">
                A delegate type which mirrors the desired method signature and accepts the target
                instance type as the first parameter.</typeparam>
            <param name="instance">The instance which has the method.</param>
            <param name="name">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundMethodDelegate``1(System.String,System.String)">
            <summary>Gets a delegate which calls an instance method.</summary>
            <typeparam name="TDelegate">
                A delegate type which mirrors the desired method signature and accepts the target
                instance type as the first parameter.</typeparam>
            <param name="typeName">The name of the type which has the method.</param>
            <param name="methodName">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticMethodDelegate``1(System.Type,System.String)">
            <summary>Gets a delegate which calls a static method.</summary>
            <typeparam name="TDelegate">A delegate type which mirrors the desired method signature.</typeparam>
            <param name="type">The type which declares the method.</param>
            <param name="name">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticMethodDelegate``1(System.String,System.String)">
            <summary>Gets a delegate which calls a static method.</summary>
            <typeparam name="TDelegate">A delegate type which mirrors the desired method signature.</typeparam>
            <param name="typeName">The name of the type which declares the method.</param>
            <param name="methodName">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetCachedDelegate``1(System.String,System.Type,System.String,System.Boolean,System.Func{``0})">
            <summary>Retrieves an existing delegate instance from the cache, or caches a new instance.</summary>
            <typeparam name="TDelegate">The expected <see cref="T:System.Delegate"/> type.</typeparam>
            <param name="prefix">A letter or letters representing the member type (like 'm' for method).</param>
            <param name="type">The declaring type of the reflected member.</param>
            <param name="name">The member name.</param>
            <param name="isStatic">Whether the member is static.</param>
            <param name="fetch">Fetches a new value to cache.</param>
            <returns>The cached delegated.</returns>
        </member>
        <member name="T:DaLion.Shared.VectorUtils">
            <summary>Provides generally useful methods.</summary>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.UpVector">
            <summary>A unit vector pointing up.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing up.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.DownVector">
            <summary>A unit vector pointing down.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing down.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.RightVector">
            <summary>A unit vector pointing right.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing right.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.LeftVector">
            <summary>A unit vector pointing left.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing left.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.GetRelativeCursorDirection(DaLion.Shared.Enums.FacingDirection@)">
            <summary>
                Gets the unit vector which points towards the cursor's current position relative to the local player's
                position.
            </summary>
            <param name="direction">The corresponding <see cref="T:DaLion.Shared.Enums.FacingDirection"/> for the player to face the cursor.</param>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> which points from the local player's position to the cursor's position.</returns>
        </member>
        <member name="T:NetEscapades.EnumGenerators.EnumExtensionsAttribute">
            <summary>
            Add to enums to indicate that extension methods should be generated for the type
            </summary>
        </member>
        <member name="P:NetEscapades.EnumGenerators.EnumExtensionsAttribute.ExtensionClassNamespace">
            <summary>
            The namespace to generate the extension class.
            If not provided the namespace of the enum will be used
            </summary>
        </member>
        <member name="P:NetEscapades.EnumGenerators.EnumExtensionsAttribute.ExtensionClassName">
            <summary>
            The name to use for the extension class.
            If not provided, the enum name with "Extensions" will be used.
            For example for an Enum called StatusCodes, the default name
            will be StatusCodesExtensions
            </summary>
        </member>
    </members>
</doc>
