<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DaLion.Overhaul</name>
    </assembly>
    <members>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul">
            <summary>Interface for proxying.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IProfession">
            <summary>Interface for all of the <see cref="T:StardewValley.Farmer"/>'s professions.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IProfession.StringId">
            <summary>Gets a string that uniquely identifies this profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IProfession.DisplayName">
            <summary>Gets the localized and gendered name for this profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IProfession.Id">
            <summary>Gets the index used in-game to track professions acquired by the player.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IProfession.Level">
            <summary>Gets the level at which this profession is offered.</summary>
            <remarks>Either 5 or 10.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IProfession.Skill">
            <summary>Gets the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ISkill"/> which offers this profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IProfession.BranchingProfessions">
            <summary>Gets get the professions which branch off from this profession, if any.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IProfession.GetDescription(System.Boolean)">
            <summary>Get the localized description text for this profession.</summary>
            <param name="prestiged">Whether to get the prestiged or normal variant.</param>
            <returns>A human-readability <see cref="T:System.String"/> description of the profession.</returns>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.ISkill">
            <summary>Interface for all of the <see cref="T:StardewValley.Farmer"/>'s skills.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.StringId">
            <summary>Gets the skill's unique string id.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.DisplayName">
            <summary>Gets the localized in-game name of this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.CurrentExp">
            <summary>Gets the current experience total gained by the local player for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.CurrentLevel">
            <summary>Gets the current level for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.ExperienceToNextLevel">
            <summary>Gets the amount of experience required for the next level-up.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.BaseExperienceMultiplier">
            <summary>Gets the base experience multiplier set by the player for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.NewLevels">
            <summary>Gets the new levels gained during the current game day, which have not yet been accomplished by an overnight menu.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.Professions">
            <summary>Gets the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IProfession"/>s associated with this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.ProfessionIds">
            <summary>Gets integer ids used in-game to track professions acquired by the player.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.TierOneProfessionIds">
            <summary>Gets subset of <see cref="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.ProfessionIds"/> containing only the level five profession ids.</summary>
            <remarks>Should always contain exactly 2 elements.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.TierTwoProfessionIds">
            <summary>Gets subset of <see cref="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.ProfessionIds"/> containing only the level ten profession ids.</summary>
            <remarks>
                Should always contains exactly 4 elements. The elements are assumed to be ordered correctly with respect to
                <see cref="P:DaLion.Overhaul.API.IModularOverhaul.ISkill.TierOneProfessionIds"/>, such that elements 0 and 1 in this array correspond to branches of element 0
                in the latter, and elements 2 and 3 correspond to branches of element 1.
            </remarks>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent">
            <summary>Interface for an event wrapper allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.IsEnabled">
            <summary>Gets a value indicating whether this event is enabled.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.IsEnabledForScreen(System.Int32)">
            <summary>Determines whether this event is enabled for a specific screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event is enabled for the specified screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.Enable">
            <summary>Enables this event on the current screen.</summary>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.EnableForScreen(System.Int32)">
            <summary>Enables this event on the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.EnableForAllScreens">
            <summary>Enables this event on the all screens.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.Disable">
            <summary>Disables this event on the current screen.</summary>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.DisableForScreen(System.Int32)">
            <summary>Disables this event on the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.DisableForAllScreens">
            <summary>Disables this event on the all screens.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IManagedEvent.Reset">
            <summary>Resets this event's enabled state on all screens.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType">
            <summary>The type of <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/>; either Scavenger or Prospector.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType.Scavenger">
            <summary>A Scavenger Hunt.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType.Prospector">
            <summary>A Prospector Hunt.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt">
            <summary>Interface for treasure hunts.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.Type">
            <summary>Gets whether this instance pertains to a Scavenger or a Prospector.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.IsActive">
            <summary>Gets a value indicating whether the <see cref="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.TreasureTile"/> is set to a valid target.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.TreasureTile">
            <summary>Gets the target tile containing treasure.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.TryStart(StardewValley.GameLocation)">
            <summary>Try to start a new hunt at the specified location.</summary>
            <param name="location">The game location.</param>
            <returns><see langword="true"/> if a hunt was started, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <summary>Forcefully start a new hunt at the specified location.</summary>
            <param name="location">The game location.</param>
            <param name="target">The target treasure tile.</param>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.Fail">
            <summary>End the active hunt unsuccessfully.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntEndedEventArgs">
            <summary>Interface for the arguments of an event raised when a <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/> ends.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntEndedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntEndedEventArgs.Type">
            <summary>Gets whether this event relates to a Scavenger or Prospector hunt.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntEndedEventArgs.TreasureFound">
            <summary>Gets a value indicating whether the player successfully discovered the treasure.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntStartedEventArgs">
            <summary>Interface for the arguments of an event raised when a <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/> is begins.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntStartedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntStartedEventArgs.Type">
            <summary>Gets whether this event relates to a Scavenger or Prospector hunt.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntStartedEventArgs.Target">
            <summary>Gets the coordinates of the target tile.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate">
            <summary>Interface for Ultimate abilities.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.DisplayName">
            <summary>Gets the localized and gendered name for this <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.Description">
            <summary>Gets get the localized description text for this <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.Index">
            <summary>Gets the index of the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/>, which equals the index of the corresponding combat profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.IsActive">
            <summary>Gets a value indicating whether determines whether this Ultimate is currently active.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.ChargeValue">
            <summary>Gets or sets the current charge value.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.MaxValue">
            <summary>Gets the maximum charge value.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.CanActivate">
            <summary>Gets a value indicating whether check whether all activation conditions for this Ultimate are currently met.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimate.IsHudVisible">
            <summary>Gets a value indicating whether check whether the Ultimate HUD element is currently rendering.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimateActivatedEventArgs">
            <summary>Interface for the arguments of an event raised when <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> is activated.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateActivatedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeIncreasedEventArgs">
            <summary>Interface for the arguments of an event raised when <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> charge increases.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeIncreasedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeIncreasedEventArgs.OldValue">
            <summary>Gets the previous charge value.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeIncreasedEventArgs.NewValue">
            <summary>Gets the new charge value.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeInitiatedEventArgs">
            <summary>Interface for the arguments of an event raised when <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> gains charge from zero.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeInitiatedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeInitiatedEventArgs.NewValue">
            <summary>Gets the new charge value.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimateDeactivatedEventArgs">
            <summary>Interface for the arguments of an event raised when <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> is deactivated.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateDeactivatedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimateEmptiedEventArgs">
            <summary>Interface for the arguments of an event raised when <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> returns to zero charge.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateEmptiedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IUltimateFullyChargedEventArgs">
            <summary>Interface for the arguments of an event raised when <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> reaches full charge.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IUltimateFullyChargedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber">
            <summary>The number of steps between two <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>s in a Diatonic Scale.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Unison">
            <summary>Zero. Both <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>s are identical.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Second">
            <summary>The second <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the Diatonic Scale.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Third">
            <summary>The third <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the Diatonic Scale.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Fourth">
            <summary>The fourth <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the Diatonic Scale.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Fifth">
            <summary>The fifth <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the Diatonic Scale, also known as the Dominant.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Sixth">
            <summary>The sixth <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the Diatonic Scale.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Seventh">
            <summary>The seventh <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the Diatonic Scale.</summary>
        </member>
        <member name="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Octave">
            <summary>A full scale. Effectively the same as <see cref="F:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber.Unison"/>.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IChord">
            <summary>A harmonic set of <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> wavelengths.</summary>
            <remarks>
                The interference of vibration patterns between neighboring <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>s may amplify, dampen or
                even create new overtones.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IChord.Notes">
            <summary>Gets the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>s that make up the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IChord"/>.</summary>
            <remarks>
                The notes are sorted by resulting harmony, with the <see cref="P:DaLion.Overhaul.API.IModularOverhaul.IChord.Root"/> at index zero and remaining notes
                ordered by increasing intervals with the former.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IChord.Root">
            <summary>
                Gets the root <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> of the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IChord"/>, which determines the
                perceived wavelength.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IChord.Amplitude">
            <summary>Gets the amplitude of the <see cref="P:DaLion.Overhaul.API.IModularOverhaul.IChord.Root"/> note's resonance.</summary>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone">
            <summary>A gemstone which can be applied to an Infinity Band.</summary>
            <remarks>
                Each <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> vibrates with a characteristic wavelength, which allows it to resonate with
                others in the Diatonic Scale of <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.ObjectIndex">
            <summary>Gets the index of the corresponding <see cref="T:StardewValley.Object"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.RingIndex">
            <summary>Gets the index of the corresponding <see cref="T:StardewValley.Objects.Ring"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Frequency">
            <summary>Gets the characteristic frequency with which the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> vibrates.</summary>
            <remarks>Measured in units of inverse Ruby wavelengths.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.StoneColor">
            <summary>Gets the characteristic color which results from <see cref="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Frequency"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.InverseColor">
            <summary>Gets the inverse <see cref="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.StoneColor"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Second">
            <summary>Gets the second <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the corresponding Diatonic Scale.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Third">
            <summary>Gets the third <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the corresponding Diatonic Scale.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Fourth">
            <summary>Gets the fourth <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the corresponding Diatonic Scale.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Fifth">
            <summary>Gets the fifth <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the corresponding Diatonic Scale.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Sixth">
            <summary>Gets the sixth <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the corresponding Diatonic Scale.</summary>
        </member>
        <member name="P:DaLion.Overhaul.API.IModularOverhaul.IGemstone.Seventh">
            <summary>Gets the seventh <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/> in the corresponding Diatonic Scale.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaul.IGemstone.IntervalWith(DaLion.Overhaul.API.IModularOverhaul.IGemstone)">
            <summary>
                Gets the ascending diatonic <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber"/> between this and some other
                <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>.
            </summary>
            <param name="other">Some other <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IGemstone"/>.</param>
            <returns>The <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IntervalNumber"/> of the between this and <paramref name="other"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.API.IModularOverhaulApi">
            <summary>Implementation of the mod API.</summary>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetEcologistForageQuality(StardewValley.Farmer)">
            <summary>Get the value of an Ecologist's forage quality.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality level.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetGemologistMineralQuality(StardewValley.Farmer)">
            <summary>Get the value of a Gemologist's mineral quality.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality level.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetProducerProducePriceBonus(StardewValley.Farmer)">
            <summary>The price bonus applied to animal produce sold by Producer.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for animal products.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetAnglerFishPriceBonus(StardewValley.Farmer)">
            <summary>The price bonus applied to fish sold by Angler.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for fish prices.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetConservationistTaxDeduction(StardewValley.Farmer)">
            <summary>
                Get the value of the a Conservationist's effective tax deduction based on the preceding season's trash
                collection.
            </summary>
            <param name="farmer">The player.</param>
            <returns>A percentage of tax deductions based currently in effect due to the preceding season's collected trash.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetDesperadoOvercharge(StardewValley.Farmer)">
            <summary>Determines the extra power of Desperado shots.</summary>
            <param name="farmer">The player.</param>
            <returns>A percentage between 0 and 1.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterCustomSkillForPrestige(System.String)">
            <summary>Sets a flag to allow the specified SpaceCore skill to level past 10 and offer prestige professions.</summary>
            <param name="id">The SpaceCore skill id.</param>
            <remarks>
                All this does is increase the level cap for the skill with the specified <paramref name="id"/>.
                The custom Skill mod author is responsible for making sure their professions return the correct
                description and icon when prestiged. To check if a <see cref="T:StardewValley.Farmer"/> instance has a given prestiged
                profession, simply add 100 to the profession's base ID.
            </remarks>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.IsHuntActive(DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="P:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.IsActive"/>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/> <paramref name="type"/> is currently active, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.TryStartNewHunt(StardewValley.GameLocation,DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.TryStart(StardewValley.GameLocation)"/>
            <param name="location">The hunt location.</param>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if a hunt was started, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.ForceStartNewHunt(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)"/>
            <param name="location">The hunt location.</param>
            <param name="target">The target tile.</param>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.InterruptActiveHunt(DaLion.Overhaul.API.IModularOverhaul.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt.Fail"/>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>
                <see langword="false"/> if the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/> instance was not active, otherwise
                <see langword="true"/>.
            </returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterTreasureHuntStartedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntStartedEventArgs})">
            <summary>Registers a new instance of an event raised when a <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/> begins.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterTreasureHuntEndedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.ITreasureHuntEndedEventArgs})">
            <summary>Registers a new instance of an event raised when a <see cref="T:DaLion.Overhaul.API.IModularOverhaul.ITreasureHunt"/> ends.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetRegisteredUltimate(StardewValley.Farmer)">
            <summary>Gets the <paramref name="farmer"/>'s currently registered <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/>, if any.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The <paramref name="farmer"/>'s <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/>, or the local player's if supplied null.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterUltimateActivatedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.IUltimateActivatedEventArgs})">
            <summary>Registers a new instance of an event raised when the player's <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> is activated.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterUltimateDeactivatedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.IUltimateDeactivatedEventArgs})">
            <summary>Registers a new instance of an event raised when the player's <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> is deactivated.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterUltimateChargeInitiatedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeInitiatedEventArgs})">
            <summary>Registers a new instance of an event raised when the player's <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> gains charge from zero.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterUltimateChargeIncreasedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.IUltimateChargeIncreasedEventArgs})">
            <summary>Registers a new instance of an event raised when the player's <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> charge increases.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterUltimateFullyChargedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.IUltimateFullyChargedEventArgs})">
            <summary>Registers a new instance of an event raised when the player's <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> reaches full charge.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.RegisterUltimateEmptiedEvent(System.Action{System.Object,DaLion.Overhaul.API.IModularOverhaul.IUltimateEmptiedEventArgs})">
            <summary>Registers a new instance of an event raised when the player's <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IUltimate"/> returns to zero charge.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.API.IModularOverhaulApi.GetChord(StardewValley.Objects.CombinedRing)">
            <summary>Gets the <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IChord"/> for the specified <paramref name="ring"/>, if any.</summary>
            <param name="ring">A <see cref="T:StardewValley.Objects.CombinedRing"/> which possibly contains a <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IChord"/>.</param>
            <returns>The <see cref="T:DaLion.Overhaul.API.IModularOverhaul.IChord"/> instance if the <paramref name="ring"/> is an Infinity Band with at least two resonating gemstones, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Collections">
            <summary>Holds collections which may be referenced by different modules.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Collections.ArtisanMachines">
            <summary>Gets the recognized artisan machines.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Collections.LegendaryFishNames">
            <summary>Gets the names of the legendary fish.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Collections.ResourceFromStoneId">
            <summary>Gets the resource that should spawn from a given stone.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Collections.ResourceNodeIds">
            <summary>Gets or sets the ids of resource nodes.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Collections.ResourceClumpIds">
            <summary>Gets or sets the ids of (valuable) resource clumps.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Collections.ExtendedFamilyPairs">
            <summary>Gets the corresponding extended family pair by legendary fish id.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Commands.InflictStatusCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Commands.InflictStatusCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Commands.InflictStatusCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Commands.InflictStatusCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Commands.InflictStatusCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.Config">
            <summary>The user-configurable settings for CMBT.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.EnableStatusConditions">
            <summary>Gets a value indicating whether to enable status conditions like Bleed and Stun on enemies.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.KnockbackDamage">
            <summary>Gets a value indicating whether to overhaul the knockback stat adding collision damage.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.OverhauledDefense">
            <summary>Gets a value indicating whether to overhaul the defense stat with better scaling and other features.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.CriticalBackAttacks">
            <summary>Gets a value indicating whether back attacks gain double crit. chance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.MonsterHealthMultiplier">
            <summary>Gets a multiplier which allows scaling the health of all monsters.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.MonsterDamageMultiplier">
            <summary>Gets a multiplier which allows scaling the damage dealt by all monsters.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.MonsterDefenseMultiplier">
            <summary>Gets a multiplier which allows scaling the resistance of all monsters.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Combat.Config.VariedEncounters">
            <summary>Gets a value indicating whether randomizes monster stats to add variability to monster encounters.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BleedAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.BleedAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BleedAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BleedAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.BleedAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BleedAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BurnAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.BurnAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BurnAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BurnAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.BurnAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.BurnAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.CombatAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.CombatAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.CombatAssetRequestedEvent.EditStringsFromCsFiles(StardewModdingAPI.IAssetData)">
            <summary>Adjust Jinxed debuff description.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.PoisonAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.PoisonAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.PoisonAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.PoisonAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.PoisonAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.PoisonAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.SlowAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.SlowAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.SlowAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.SlowAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.SlowAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.SlowAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.StunAnimationRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.StunAnimationRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.StunAnimationRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.StunAnimationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Events.StunAnimationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Events.StunAnimationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.FarmerExtensions.GetOverhauledResilience(StardewValley.Farmer)">
            <summary>Gets the overhauled total resilience of the <paramref name="farmer"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The total resilience, a number between 0 and 1.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Monsters.Monster"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.RandomizeStats(StardewValley.Monsters.Monster)">
            <summary>Randomizes the stats of the <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Bleed(StardewValley.Monsters.Monster,StardewValley.Farmer,System.Int32,System.Int32)">
            <summary>Causes bleeding on <paramref name="monster"/> for the specified <paramref name="duration"/> and with the specified <paramref name="intensity"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="bleeder">The <see cref="T:StardewValley.Farmer"/> who caused the bleeding.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="intensity">The intensity of the bleeding effect (how many stacks).</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.StopBleeding(StardewValley.Monsters.Monster)">
            <summary>Removes bleeding from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsBleeding(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is bleeding.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero bleeding stacks, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Burn(StardewValley.Monsters.Monster,StardewValley.Farmer,System.Int32)">
            <summary>Burns the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="burner">The <see cref="T:StardewValley.Farmer"/> who inflicted the burn.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.CureBurn(StardewValley.Monsters.Monster)">
            <summary>Removes burn from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsBurning(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is burning.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero burn timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Chill(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Chills the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.WarmUp(StardewValley.Monsters.Monster)">
            <summary>Removes chilled status from the <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsChilled(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is chilled.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns>The <paramref name="monster"/>'s chilled flag.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Fear(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Fears the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.CureFear(StardewValley.Monsters.Monster)">
            <summary>Removes fear from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsFeared(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is feared.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero fear timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Freeze(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Freezes the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Defrost(StardewValley.Monsters.Monster)">
            <summary>Removes frozen status from the <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsFrozen(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is frozen.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero freeze stacks, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Poison(StardewValley.Monsters.Monster,StardewValley.Farmer,System.Int32,System.Int32)">
            <summary>Poisons the <paramref name="monster"/> for the specified <paramref name="duration"/> and with the specified <paramref name="intensity"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="poisoner">The <see cref="T:StardewValley.Farmer"/> who inflicted the poison.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="intensity">The intensity of the slow effect (how many stacks).</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.CurePoison(StardewValley.Monsters.Monster)">
            <summary>Removes poison from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsPoisoned(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is poisoned.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero poison stacks, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Slow(StardewValley.Monsters.Monster,System.Int32,System.Double)">
            <summary>Slows the <paramref name="monster"/> for the specified <paramref name="duration"/> and with the specified <paramref name="intensity"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
            <param name="intensity">The intensity of the slow effect.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.RemoveSlow(StardewValley.Monsters.Monster)">
            <summary>Removes slow from <paramref name="monster"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsSlowed(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is slowed.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero slow timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.Stun(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Stuns the <paramref name="monster"/> for the specified <paramref name="duration"/>.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Extensions.MonsterExtensions.IsStunned(StardewValley.Monsters.Monster)">
            <summary>Checks whether the <paramref name="monster"/> is stunned.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> has non-zero stun timer, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.BuffCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.BuffCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.BuffCtorPatcher.BuffCtorPostfix(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Adjust Jinxed debuff for defense overhaul.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.DuggyUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.DuggyUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.DuggyUpdatePatcher.DuggyUpdatePrefix(StardewValley.Monsters.Duggy)">
            <summary>Allow Duggies to be stunned.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.FarmerTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.FarmerTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamagePrefix(StardewValley.Farmer,System.Int32@,StardewValley.Monsters.Monster)">
            <summary>Burn effect + reset seconds-out-of-combat.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Overhaul for farmer defense.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.GameLocationDamageMonsterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.GameLocationDamageMonsterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Record knockback for damage and crit. for defense ignore + back attacks.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterInitNetFieldsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.MonsterInitNetFieldsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterInitNetFieldsPatcher.MonsterInitNetFieldsPostix(StardewValley.Monsters.Monster)">
            <summary>Patch to add custom net debuffs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterMovePositionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.MonsterMovePositionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterMovePositionPatcher.MonsterMovePositionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Add knockback damage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterParseMonsterInfoPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.MonsterParseMonsterInfoPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterParseMonsterInfoPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterParseMonsterInfoPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterParseMonsterInfoPatcher.MonsterParseMonsterInfoPostfix(StardewValley.Monsters.Monster)">
            <summary>Randomize monster stats + apply difficulty sliders.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.MonsterTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterTakeDamagePatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterTakeDamagePatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterTakeDamagePatcher.MonsterTakeDamagePrefix(StardewValley.Monsters.Monster,System.Int32@)">
            <summary>Frozen effect.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterTakeDamagePatcher.MonsterTakeDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Crits ignore defense, which, btw, actually does something.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.Patchers.MonsterUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.Patchers.MonsterUpdatePatcher.MonsterUpdatePrefix(StardewValley.Monsters.Monster,Microsoft.Xna.Framework.GameTime)">
            <summary>Slow and damage-over-time effects.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.StatusEffects.BleedAnimation">
            <summary>The animation that plays above a bleeding <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.BleedAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.StatusEffects.BleedAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.BleedAnimation.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws the animation to the specified <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</summary>
            <param name="b">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.BleedAnimation.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>Updates the animation state.</summary>
            <param name="time">The current <see cref="T:Microsoft.Xna.Framework.GameTime"/>.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.StatusEffects.BurnAnimation">
            <summary>The animation that plays above a burning <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.BurnAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.StatusEffects.BurnAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.BurnAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.StatusEffects.PoisonAnimation">
            <summary>The animation that plays above poisoned <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.PoisonAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.StatusEffects.PoisonAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.PoisonAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.StatusEffects.SlowAnimation">
            <summary>The animation that plays above a slowed <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.SlowAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.StatusEffects.SlowAnimation"/> class.</summary>
            <param name="monster">The Slowned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.SlowAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Combat.StatusEffects.StunAnimation">
            <summary>The animation that plays above a stunned <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.StunAnimation.#ctor(StardewValley.Monsters.Monster,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Combat.StatusEffects.StunAnimation"/> class.</summary>
            <param name="monster">The stunned <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="duration">The duration in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Combat.StatusEffects.StunAnimation.update(Microsoft.Xna.Framework.GameTime)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.DebugCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Commands.DebugCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.DebugCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.DebugCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.DebugCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.FireProjectileCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Commands.FireProjectileCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.FireProjectileCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.FireProjectileCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.FireProjectileCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.PrintEnabledEventsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Commands.PrintEnabledEventsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.PrintEnabledEventsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.PrintEnabledEventsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.PrintEnabledEventsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.RevalidateCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Commands.RevalidateCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.RevalidateCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Commands.RevalidateCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Commands.RevalidateCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu">
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
            <summary>Constructs the GenericModConfigMenu integration.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.BuildMenu">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.GetConfig">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.ResetConfig">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.SaveAndApply">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddModuleSelectionOption">
            <summary>Adds a new instance of <see cref="T:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption"/> to this mod menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddCombatOptions">
            <summary>Register the Combat config menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddEnchantmentOptions">
            <summary>Register the Arsenal config menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddPondOptions">
            <summary>Register the Ponds menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddProfessionOptions">
            <summary>Register the config menu if available.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddRingOptions">
            <summary>Register the Rings menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddSlingshotOptions">
            <summary>Register the Slingshots config menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddTaxOptions">
            <summary>Register the Taxes menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddToolOptions">
            <summary>Register the config menu if available.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddMiscOptions">
            <summary>Register the Tweex menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.GenericModConfigMenu.AddWeaponOptions">
            <summary>Register the Weapons config menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption.#ctor(System.Action)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption"/> class.</summary>
            <param name="reloadMenu">A delegate to the parent menu's Reload method, to be invoked if any modules are toggled.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption.Tooltip">
            <summary>Gets the tooltip for the currently hovered checkbox label, if any.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption.AfterSave">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption.BeforeMenuClosed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionOption.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionTooltipRenderedActiveEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionTooltipRenderedActiveEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.ConfigMenu.ModuleSelectionTooltipRenderedActiveEvent.OnRenderedActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugCursorMovedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugCursorMovedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Debug.DebugCursorMovedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugCursorMovedEvent.OnCursorMovedImpl(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugPatcher.DebugPrefix(System.Object,System.Object@)">
            <summary>Placeholder patch for debugging.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugPatcher.DebugPostfix(System.Object,System.Object@)">
            <summary>Placeholder patch for debugging.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedActiveMenuEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedActiveMenuEvent.OnRenderedActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedHudEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedWorldEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.DebugUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.DebugUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.FpsRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.FpsRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Debug.FpsRenderedHudEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.FpsRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.FpsUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Debug.FpsUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Debug.FpsUpdateTickedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Debug.FpsUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Events.CoreButtonPressedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreGameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreGameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreGameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreOneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreOneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Events.CoreOneSecondUpdateTickedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreOneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreReturnedToTitleEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreReturnedToTitleEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreReturnedToTitleEvent.OnReturnedToTitleImpl(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreSavingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.CoreSavingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.CoreSavingEvent.OnSavingImpl(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.HudPointerAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.HudPointerAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Events.HudPointerAssetRequestedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.HudPointerUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.HudPointerUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.Events.HudPointerUpdateTickedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.HudPointerUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.OutOfCombatOneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.OutOfCombatOneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.OutOfCombatOneSecondUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.OutOfCombatOneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.OutOfCombatWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.OutOfCombatWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.OutOfCombatWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.TrackMonstersNpcListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.TrackMonstersNpcListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.TrackMonstersNpcListChangedEvent.OnNpcListChangedImpl(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.TrackMonstersWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Events.TrackMonstersWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Events.TrackMonstersWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Core.Extensions.Vector2Extensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Vector2"/> struct.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Extensions.Vector2Extensions.TrackWhenOnScreen(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>Draws a pointer over the <paramref name="tile"/> if it is inside the current viewport.</summary>
            <param name="tile">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> tile.</param>
            <param name="color">The desired color for the pointer.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Extensions.Vector2Extensions.TrackWhenOffScreen(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
                Draws a pointer at the edge of the screen, pointing to the <paramref name="tile"/>, if it is outside the
                current viewport.
            </summary>
            <param name="tile">The <see cref="T:Microsoft.Xna.Framework.Vector2"/> tile.</param>
            <param name="color">The desired color for the pointer.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.BuffsDisplayDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Patchers.BuffsDisplayDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.BuffsDisplayDrawPatcher.BuffsDisplayDrawPostfix(System.Collections.Generic.Dictionary{StardewValley.Menus.ClickableTextureComponent,StardewValley.Buff},Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Patch to draw stackable buffs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.GameLocationDamageMonsterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Patchers.GameLocationDamageMonsterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterPostfix(StardewValley.Farmer)">
            <summary>Reset seconds out of combat.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.MonsterCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.Patchers.MonsterCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.MonsterCtorPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.MonsterCtorPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.Patchers.MonsterCtorPatcher.MonsterCtorPostfix(StardewValley.Monsters.Monster)">
            <summary>Fix max health mis-match.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Core.UI.HudPointer">
            <summary>Pointer for highlighting on-screen and off-screen objects of interest for tracker professions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.UI.HudPointer.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Core.UI.HudPointer"/> class.</summary>
            <param name="texture">The pointer <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>.</param>
            <param name="scale">The scale for drawing the pointer.</param>
            <param name="rate">The rate at which the pointer animates (higher is faster).</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.UI.HudPointer.Instance">
            <summary>Gets the singleton <see cref="T:DaLion.Overhaul.Modules.Core.UI.HudPointer"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.UI.HudPointer.Scale">
            <summary>Gets or sets the scale for drawing the pointer.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.UI.HudPointer.BobRate">
            <summary>Gets or sets the rate at which the pointer animates (higher is faster).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.UI.HudPointer.ShouldBob">
            <summary>Gets or sets a value indicating whether or not the pointer is currently being rendered.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.UI.HudPointer.Bob(System.UInt32)">
            <summary>Advance the pointer's bobbing motion one step.</summary>
            <param name="ticks">The number of ticks elapsed since the game started.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.UI.HudPointer.DrawAsTrackingPointer(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>Draw the pointer at the edge of the screen, pointing to a target tile off-screen.</summary>
            <param name="target">The target tile to point to.</param>
            <param name="color">The color of the pointer.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.UI.HudPointer.DrawOverTile(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>Draw the pointer over a target tile on-screen.</summary>
            <param name="target">A target tile.</param>
            <param name="color">The color of the pointer.</param>
            <remarks>Credit to <c>Bpendragon</c>.</remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Core.UI.StackableBuff">
            <summary>A <see cref="T:StardewValley.Buff"/> that can be stacked and displays a corresponding counter.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.UI.StackableBuff.#ctor(System.String,System.Int32,System.String,System.Int32,System.Func{System.Int32},System.Int32)">
            <inheritdoc cref="T:StardewValley.Buff"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Core.UI.StackableBuff.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Func{System.Int32},System.Int32)">
            <inheritdoc cref="T:StardewValley.Buff"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.UI.StackableBuff.Stacks">
            <summary>Gets the current number of stacks.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Core.UI.StackableBuff.MaxStacks">
            <summary>Gets the maximum number of stacks for this buff.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.AddEnchantmentsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Commands.AddEnchantmentsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.AddEnchantmentsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.AddEnchantmentsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.AddEnchantmentsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.AddEnchantmentsCommand.GetUsage">
            <summary>Tell the dummies how to use the console command.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.ClearAnimalsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Commands.ClearAnimalsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.ClearAnimalsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.ClearAnimalsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.ClearAnimalsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.FullyEnergizedCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Commands.FullyEnergizedCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.FullyEnergizedCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.FullyEnergizedCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.FullyEnergizedCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.OverHealCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Commands.OverHealCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.OverHealCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.OverHealCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.OverHealCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.RemoveEnchantmentsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Commands.RemoveEnchantmentsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.RemoveEnchantmentsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.RemoveEnchantmentsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.RemoveEnchantmentsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.RemoveEnchantmentsCommand.GetUsage">
            <summary>Tell the dummies how to use the console command.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.WabbajackCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Commands.WabbajackCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.WabbajackCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Commands.WabbajackCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Commands.WabbajackCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Config">
            <summary>The user-configurable settings for ENCH.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketStyle">
            <summary>The style used to draw forged gemstones.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketStyle.Diamond">
            <summary>A diamond-shaped icon.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketStyle.Round">
            <summary>A more rounded icon.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketStyle.Iridium">
            <summary>Shaped like an iridium ore.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketPosition">
            <summary>The position of the forged gemstones.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketPosition.Standard">
            <summary>The normal position, immediately above the item's description.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Config.ForgeSocketPosition.AboveSeparator">
            <summary>Above the horizontal separator, immediately below the item's name and level.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Config.MeleeEnchantments">
            <summary>Gets a value indicating whether to use the overhauled enchantments for <see cref="T:StardewValley.Tools.MeleeWeapon"/>s.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Config.RangedEnchantments">
            <summary>Gets a value indicating whether to use the overhauled enchantments for <see cref="T:StardewValley.Tools.Slingshot"/>s.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Config.RebalancedForges">
            <summary>Gets a value indicating whether to improve certain underwhelming gemstone enchantments.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Config.DrawForgeSockets">
            <summary>Gets a value indicating whether to replace generic Forge text with specific gemstone icons and empty sockets.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Config.SocketStyle">
            <summary>Gets the style of the sprite used to represent gemstone forges in tooltips.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Config.SocketPosition">
            <summary>Gets the relative position where forge gemstones should be drawn.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulDashUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulDashUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulDashUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulDashUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulDashUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulParryUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulParryUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulParryUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ArtfulParryUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.BloodthirstyUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.BloodthirstyUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.BloodthirstyUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.BloodthirstyUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnchantmentsAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.EnchantmentsAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnchantmentsAssetRequestedEvent.EditBuffsIconsTileSheet(StardewModdingAPI.IAssetData)">
            <summary>Patches buffs icons with energized buff icon.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnchantmentsGameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.EnchantmentsGameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnchantmentsGameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnergizedUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.EnergizedUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnergizedUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnergizedUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.EnergizedUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ExplosiveUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.ExplosiveUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ExplosiveUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ExplosiveUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.ExplosiveUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.GatlingButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.GatlingButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.GatlingButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.GatlingButtonReleasedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.GatlingButtonReleasedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.GatlingButtonReleasedEvent.OnButtonReleasedImpl(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.GatlingUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Events.GatlingUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Events.GatlingUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Gemstone.GarnetEnchantment">
            <summary>The Garnet gemstone forge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Gemstone.GarnetEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Gemstone.GarnetEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Gemstone.GarnetEnchantment._ApplyTo(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Gemstone.GarnetEnchantment._UnapplyTo(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Integrations.SpaceCoreIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Integrations.SpaceCoreIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Integrations.SpaceCoreIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.BloodthirstyEnchantment">
            <summary>
                Attacks on-hit heal for 10% of damage dealt. Excess healing is converted into a shield for up
                to 20% of (the player's) max health, which slowly decays after not dealing or taking damage for 25s.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.BloodthirstyEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.BloodthirstyEnchantment._OnMonsterSlay(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.CarvingEnchantment">
            <summary>
                Attacks on-hit reduce enemy defense, down to a minimum of -1. Armored enemies (i.e., Armored Bugs and shelled Rock Crabs)
                lose their armor upon hitting 0 defense.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.CarvingEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.CarvingEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.CleavingEnchantment">
            <summary>Attacks on-hit spread 60% - 20% (based on distance) of the damage to other enemies around the player.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.CleavingEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.CleavingEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment">
            <summary>
                Moving and attacking generates Energize stacks, up to 100. At maximum stacks, the next attack causes an electric discharge,
                dealing heavy damage in a large area.
            </summary>
            <remarks>6 charges per hit + 1 charge per 6 tiles traveled.</remarks>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment.MaxEnergy">
            <summary>The amount of energy stacks when fully charged.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment.Finalize">
            <summary>Finalizes an instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment.Energy">
            <summary>Gets or sets the current number of energy stacks.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment.Update(System.UInt32)">
            <summary>Updates the instance state.</summary>
            <param name="ticks">The number of ticks elapsed since the game started, including the current tick.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment.DoLightningStrike(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Tools.MeleeWeapon)">
            <summary>Trigger a lightning strike on the specified <paramref name="monster"/>'s position.</summary>
            <param name="monster">The target <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="location">The current <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="who">The wielding <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="weapon">The wielded <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment._OnEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.EnergizedEnchantment._OnUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment">
            <summary>
                Absorbs and stores energy from enemy hits (before mitigation). The next special move releases
                the accumulated energy as an explosion.
            </summary>
            <remarks>6 charges per hit + 1 charge per 6 tiles traveled.</remarks>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.MaxAccumulation">
            <summary>The highest amount of damage that can be accumulated.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.AccumulationStep">
            <summary>The amount of damage accumulation required to increase the explosion radius by 1 tile.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.Finalize">
            <summary>Finalizes an instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.Accumulated">
            <summary>Gets or sets the total accumulated damage.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.ExplosionRadius">
            <summary>Gets the current radius of the would-be explosion.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.MaxRadius">
            <summary>Gets the largest possible explosion radius.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment.Update">
            <summary>Updates the instance state.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment._OnEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.ExplosiveEnchantment._OnUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.MammoniteEnchantment">
            <summary>
                Attacks that would leave an enemy below 10% max health immediately execute the enemy, converting the remaining health into gold.
                Consecutive kills without taking damage increase the threshold by 1%.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.MammoniteEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.MammoniteEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.MammoniteEnchantment._OnMonsterSlay(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.MammoniteEnchantment._OnUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.MeleeArtfulEnchantment">
            <summary>Improves weapon special moves.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.MeleeArtfulEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.SteadfastEnchantment">
            <summary>Converts critical strike chance and power into raw damage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.SteadfastEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Melee.WabbajackEnchantment">
            <summary>Causes a random unpredictable effect.</summary>
            <remarks>Can spawn illegal items.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.WabbajackEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Melee.WabbajackEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentApplyToPatcher.AmethystEnchantmentApplyToPrefix(StardewValley.AmethystEnchantment,StardewValley.Item)">
            <summary>Rebalances Amethyst enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentApplyToPatcher.AmethystEnchantmentApplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentUnapplyToPatcher.AmethystEnchantmentUnapplyToPrefix(StardewValley.AmethystEnchantment,StardewValley.Item)">
            <summary>Rebalances Amethyst enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AmethystEnchantmentUnapplyToPatcher.AmethystEnchantmentUnapplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentApplyToPatcher.AquamarineEnchantmentApplyToPrefix(StardewValley.AquamarineEnchantment,StardewValley.Item)">
            <summary>Rebalances Aquamarine enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentApplyToPatcher.AquamarineEnchantmentApplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentUnapplyToPatcher.JadeEnchantmentUnapplyToPrefix(StardewValley.AquamarineEnchantment,StardewValley.Item)">
            <summary>Rebalances Aquamarine enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.AquamarineEnchantmentUnapplyToPatcher.AquamarineEnchantmentUnapplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.BaseEnchantmentGetAvailableEnchantmentsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.BaseEnchantmentGetAvailableEnchantmentsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.BaseEnchantmentGetAvailableEnchantmentsPatcher.BaseEnchantmentGetAvailableEnchantmentsTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Out with the old and in with the new enchants.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher.BaseEnchantmentGetEnchantmentFromItemTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Allow Garnet forging.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentApplyToPatcher.EmeraldEnchantmentApplyToPrefix(StardewValley.EmeraldEnchantment,StardewValley.Item)">
            <summary>Rebalances Emerald enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentApplyToPatcher.EmeraldEnchantmentApplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentUnapplyToPatcher.EmeraldEnchantmentUnapplyToPrefix(StardewValley.EmeraldEnchantment,StardewValley.Item)">
            <summary>Rebalances Emerald enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.EmeraldEnchantmentUnapplyToPatcher.EmeraldEnchantmentUnapplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.FarmerTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.FarmerTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamagePrefix(StardewValley.Farmer,System.Boolean@)">
            <summary>Apply Topaz bonus for Slingshots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamagePostfix(StardewValley.Farmer,System.Boolean)">
            <summary>Apply Topaz bonus for Slingshots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Trigger damage taken effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.Game1DrawHudPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.Game1DrawHudPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.Game1DrawHudPatcher.Game1DrawHUDTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch draw over-healed health.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDamageMonsterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDamageMonsterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterPrefix(System.Int32@,System.Int32@,System.Single@,System.Single,StardewValley.Farmer)">
            <summary>Steadfast enchantment crit. to damage conversion + Artful parry crit. bonus.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterTranspiler">
            <summary>Reset Artful parry crit. chance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationDrawPatcher.GameLocationDrawPostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draw Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationInitNetFieldsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationInitNetFieldsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationInitNetFieldsPatcher.GameLocationInitNetFieldsPostfix(StardewValley.GameLocation)">
            <summary>Patch to add custom net fields.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsCollidingPositionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsCollidingPositionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsCollidingPositionPatcher.GameLocationIsCollidingPositionPostfix(StardewValley.GameLocation,System.Boolean@,Microsoft.Xna.Framework.Rectangle,System.Boolean,StardewValley.Character)">
            <summary>Collide with Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsTileOccupiedForPlacementPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsTileOccupiedForPlacementPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsTileOccupiedForPlacementPatcher.GameLocationIsTileOccupiedForPlacementPostfix(StardewValley.GameLocation,System.Boolean@,Microsoft.Xna.Framework.Vector2)">
            <summary>Collide with Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsTileOccupiedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsTileOccupiedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationIsTileOccupiedPatcher.GameLocationIsTileOccupiedPostfix(StardewValley.GameLocation,System.Boolean@,Microsoft.Xna.Framework.Vector2)">
            <summary>Collide with Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateCharactersPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateCharactersPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateCharactersPatcher.GameLocationUpdateCharactersPostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime)">
            <summary>Update Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateEvenIfFarmerIsntHerePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateEvenIfFarmerIsntHerePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateEvenIfFarmerIsntHerePatcher.GameLocationUpdateEvenIfFarmerIsntHerePostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime)">
            <summary>Update Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateWhenCurrentLocationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateWhenCurrentLocationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.GameLocationUpdateWhenCurrentLocationPatcher.GameLocationUpdateWhenCurrentLocationPostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.GameTime)">
            <summary>Update Wabbajack animals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.IClickableMenuDrawHoverTextPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.IClickableMenuDrawHoverTextPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.IClickableMenuDrawHoverTextPatcher.IClickableMenuDrawHoverTextTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Replaces "Forged" text with socket icons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentApplyToPatcher.JadeEnchantmentApplyToPrefix(StardewValley.JadeEnchantment,StardewValley.Item)">
            <summary>Rebalances Jade enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentApplyToPatcher.JadeEnchantmentApplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentUnapplyToPatcher.JadeEnchantmentUnapplyToPrefix(StardewValley.JadeEnchantment,StardewValley.Item)">
            <summary>Rebalances Jade enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.JadeEnchantmentUnapplyToPatcher.JadeEnchantmentUnapplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher.MeleeWeaponDoAnimateSpecialMovePostfix(StardewValley.Tools.MeleeWeapon)">
            <summary>Implement Garnet enchantment CDR.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher.MeleeWeaponDoAnimateSpecialMoveTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Increase hit count of Artful dagger's special stab move.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponTriggerClubFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponTriggerClubFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponTriggerClubFunctionPatcher.MeleeWeaponTriggerClubFunctionPostfix(StardewValley.Tools.MeleeWeapon,StardewValley.Farmer,StardewValley.Farmer)">
            <summary>Apply Stun after Artful club's special smash move.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MeleeWeaponTriggerClubFunctionPatcher.MeleeWeaponTriggerClubFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Doubles AoE of Artful club's special smash move.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MonsterHandleParriedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.MonsterHandleParriedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MonsterHandleParriedPatcher.MonsterHandleParriedPrefix(System.Boolean@,System.Object)">
            <summary>Defense increases parry damage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.MonsterHandleParriedPatcher.MonsterHandleParriedPostfix(StardewValley.Monsters.Monster,System.Boolean)">
            <summary>Artful parry increases crit. chance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentApplyToPatcher.RubyEnchantmentApplyToPrefix(StardewValley.RubyEnchantment,StardewValley.Item)">
            <summary>Adjust Ruby enchant for randomized weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentApplyToPatcher.RubyEnchantmentApplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentUnapplyToPatcher.RubyEnchantmentUnapplyToPrefix(StardewValley.RubyEnchantment,StardewValley.Item)">
            <summary>Adjust Ruby enchant for randomized weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.RubyEnchantmentUnapplyToPatcher.RubyEnchantmentUnapplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.SlingshotCanAutoFirePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.SlingshotCanAutoFirePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.SlingshotCanAutoFirePatcher.SlingshotCanAutoFirePrefix(StardewValley.Tools.Slingshot,System.Boolean@)">
            <summary>Implement <see cref="T:DaLion.Overhaul.Modules.Enchantments.Ranged.GatlingEnchantment"/> effect.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.ToolRemoveEnchantmentPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.ToolRemoveEnchantmentPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.ToolRemoveEnchantmentPatcher.ToolRemoveEnchantmentPostifx(StardewValley.BaseEnchantment)">
            <summary>Disposes certain enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentApplyToPatcher.TopazEnchantmentApplyToPrefix(StardewValley.TopazEnchantment,StardewValley.Item)">
            <summary>Rebalances Topaz enchantment for Melee Weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentApplyToPatcher.TopazEnchantmentApplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentUnapplyToPatcher.TopazEnchantmentUnapplyToPrefix(StardewValley.TopazEnchantment,StardewValley.Item)">
            <summary>Rebalances Topaz enchantment for Melee Weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Patchers.TopazEnchantmentUnapplyToPatcher.TopazEnchantmentUnapplyPostfix(StardewValley.Item)">
            <summary>Reset cached stats.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Projectiles.QuincyProjectile">
            <summary>An energy projectile fired by a <see cref="T:StardewValley.Tools.Slingshot"/> which has the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Ranged.QuincyEnchantment"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Projectiles.QuincyProjectile.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Projectiles.QuincyProjectile"/> class.</summary>
            <remarks>Required for multiplayer syncing.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Projectiles.QuincyProjectile.#ctor(StardewValley.Tools.Slingshot,StardewValley.Farmer,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Enchantments.Projectiles.QuincyProjectile"/> class.</summary>
            <param name="source">The <see cref="T:StardewValley.Tools.Slingshot"/> which fired this projectile.</param>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired this projectile.</param>
            <param name="damage">The un-mitigated damage this projectile will cause.</param>
            <param name="overcharge">The amount of overcharge with which the projectile was fired.</param>
            <param name="startingPosition">The projectile's starting position.</param>
            <param name="xVelocity">The projectile's starting velocity in the horizontal direction.</param>
            <param name="yVelocity">The projectile's starting velocity in the vertical direction.</param>
            <param name="rotationVelocity">The projectile's starting rotational velocity.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Projectiles.QuincyProjectile.behaviorOnCollisionWithMonster(StardewValley.NPC,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.BaseSlingshotEnchantment">
            <summary>The base class for <see cref="T:StardewValley.Tools.Slingshot"/> weapon enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.BaseSlingshotEnchantment.CanApplyTo(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.BaseSlingshotEnchantment.OnFire(StardewValley.Tools.Slingshot,StardewValley.Projectiles.BasicProjectile,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Raised when the <paramref name="slingshot"/> fires a <see cref="T:StardewValley.Projectiles.BasicProjectile"/>.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="projectile">The fired <see cref="T:StardewValley.Projectiles.BasicProjectile"/>.</param>
            <param name="damageBase">The base deterministic damage of the fired projectile, before any modifiers or randomness.</param>
            <param name="damageMod">The slingshot's damage modifier.</param>
            <param name="knockback">The base knockback of the fired projectile, before any modifiers.</param>
            <param name="startingPosition">The projectile's starting position (also its current position).</param>
            <param name="xVelocity">The horizontal component of projectile's velocity.</param>
            <param name="yVelocity">The vertical component of projectile's velocity.</param>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired the shot.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.BaseSlingshotEnchantment._OnFire(StardewValley.Tools.Slingshot,StardewValley.Projectiles.BasicProjectile,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Enchantments.Ranged.BaseSlingshotEnchantment.OnFire(StardewValley.Tools.Slingshot,StardewValley.Projectiles.BasicProjectile,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,StardewValley.GameLocation,StardewValley.Farmer)"/>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.GatlingEnchantment">
            <summary>Enables auto-firing at lower firing speed.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.GatlingEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.GatlingEnchantment._OnEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.GatlingEnchantment._OnUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.MagnumEnchantment">
            <summary>Chance to not consume ammo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.MagnumEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.PreservingEnchantment">
            <summary>Chance to not consume ammo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.PreservingEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.QuincyEnchantment">
            <summary>Fire an energy projectile when ammunition is not equipped.</summary>
            <remarks>
                The quincy projectile has zero knockback and cannot crit, but scales in size and damage with Desperado's
                overcharge.
            </remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.QuincyEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.RangedArtfulEnchantment">
            <summary>Improves weapon special moves.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.RangedArtfulEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Ranged.SpreadingEnchantment">
            <summary>Fire 2 additional projectiles.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.SpreadingEnchantment.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Enchantments.Ranged.SpreadingEnchantment._OnFire(StardewValley.Tools.Slingshot,StardewValley.Projectiles.BasicProjectile,System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.State">
            <summary>The runtime state variables for ENCH.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Enchantments.Textures">
            <summary>Caches custom mod textures and related functions.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.OverhaulModule">
            <summary>The individual modules within the Overhaul mod.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Core">
            <summary>The Core module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Professions">
            <summary>The Professions module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Combat">
            <summary>The Combat module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Weapons">
            <summary>The Weapons module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Slingshots">
            <summary>The Slingshots module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Tools">
            <summary>The Tools module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Enchantments">
            <summary>The Enchantments module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Rings">
            <summary>The Rings module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Ponds">
            <summary>The Ponds module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Taxes">
            <summary>The Taxes module.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.OverhaulModule.Tweex">
            <summary>The Tweex module.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule"/> class.</summary>
            <param name="name">The module name.</param>
            <param name="entry">The entry keyword for the module's <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.Name">
            <summary>Gets the internal name of the module.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.DisplayName">
            <summary>Gets the human-readable name of the module.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.Description">
            <summary>Gets a short description of the module.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.Namespace">
            <summary>Gets the namespace of the module.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.Ticker">
            <summary>Gets the ticker symbol of the module, which is used as the entry command.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule._ShouldEnable">
            <summary>Gets or sets a value indicating whether the module should be enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.IsActive">
            <summary>Gets a value indicating whether the module is currently active.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnumerateModules">
            <summary>Enumerates all modules.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Overhaul.Modules.OverhaulModule"/>s.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.Activate(StardewModdingAPI.IModHelper)">
            <summary>Activates the module.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.Deactivate">
            <summary>Deactivates the module.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.Revalidate">
            <summary>Applies necessary fixes to the current save file.</summary>
            <returns><see langword="false"/> if the save was not ready for validation, otherwise <see langword="true"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.RegisterIntegrations">
            <summary>Registers module integrations with third-party mods.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.InvalidateAssets">
            <summary>Causes SMAPI to reload all assets edited by this module.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.CoreModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.CoreModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.CoreModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.CoreModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.CoreModule.RegisterIntegrations">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.RegisterIntegrations">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ProfessionsModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.CombatModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.CombatModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.CombatModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.CombatModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.CombatModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.CombatModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.CombatModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.CombatModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.CombatModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.Revalidate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.RegisterIntegrations">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.WeaponsModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.SlingshotsModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.ToolsModule.RegisterIntegrations">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.Deactivate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.Revalidate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.RegisterIntegrations">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.EnchantmentsModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.RingsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.RingsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.RingsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.RingsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.RingsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.RegisterIntegrations">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.RingsModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.PondsModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.PondsModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.PondsModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.PondsModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.PondsModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.PondsModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.PondsModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.PondsModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.PondsModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule.State">
            <summary>Gets the ephemeral runtime state for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.TaxesModule.InvalidateAssets">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.TweexModule.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TweexModule"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TweexModule.ShouldEnable">
            <summary>Gets a value indicating whether the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TweexModule"/> is set to enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TweexModule.Config">
            <summary>Gets the config instance for the <see cref="T:DaLion.Overhaul.Modules.OverhaulModule.TweexModule"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.OverhaulModule.TweexModule._ShouldEnable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.OverhaulModule.TweexModule.Activate(StardewModdingAPI.IModHelper)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.PrintPondDataCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Commands.PrintPondDataCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.PrintPondDataCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.PrintPondDataCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.PrintPondDataCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.ResetPondDataCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Commands.ResetPondDataCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.ResetPondDataCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.ResetPondDataCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.ResetPondDataCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.SetFishQualityCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Commands.SetFishQualityCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.SetFishQualityCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.SetFishQualityCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.SetFishQualityCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.UnlockPopulationGatesCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Commands.UnlockPopulationGatesCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.UnlockPopulationGatesCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.UnlockPopulationGatesCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.UnlockPopulationGatesCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.UpdateMaxOccupancyCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Commands.UpdateMaxOccupancyCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.UpdateMaxOccupancyCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Commands.UpdateMaxOccupancyCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Commands.UpdateMaxOccupancyCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Ponds.Config">
            <summary>The user-configurable settings for PNDS.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Config.DaysUntilAlgaeSpawn">
            <summary>Gets the number of days until an empty pond will begin spawning algae.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Config.RoeProductionChanceMultiplier">
            <summary>Gets the multiplier to a fish's base chance to produce roe each day.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Ponds.Config.RoeAlwaysFishQuality">
            <summary>Gets a value indicating whether the quality of produced roe should be always the same as the quality of the producing fish. If set to false, then the quality will be less than or equal to that of the producing fish.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Ponds.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Ponds"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Events.PondAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Events.PondAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Events.PondDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Events.PondDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Events.PondDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Buildings.FishPond"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.HasUnlockedFinalPopulationGate(StardewValley.Buildings.FishPond)">
            <summary>Determines whether the <paramref name="pond"/>'s population has been fully unlocked.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns><see langword="true"/> if the last unlocked population gate matches the last gate in the <see cref="T:StardewValley.GameData.FishPond.FishPondData"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.HasAlgae(StardewValley.Buildings.FishPond)">
            <summary>Determines whether this <paramref name="pond"/> is infested with algae.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns><see langword="true"/> if the <paramref name="pond"/> houses any algae, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.IsRadioactive(StardewValley.Buildings.FishPond)">
            <summary>Determines whether the <paramref name="pond"/>'s radioactivity is sufficient to enrich metallic nuclei.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns><see langword="true"/> if the <paramref name="pond"/> houses a mutant or radioactive fish species, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.GetEnrichmentDuration(StardewValley.Buildings.FishPond,StardewValley.Object)">
            <summary>Gets the number of days required to enrich a given <paramref name="metal"/> resource.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <param name="metal">An ore or bar <see cref="T:StardewValley.Object"/>.</param>
            <returns>The number of days required to enrich the nucleus of the metal.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.RewardExp(StardewValley.Buildings.FishPond,StardewValley.Farmer)">
            <summary>Gives the player fishing experience for harvesting the <paramref name="pond"/>.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <param name="who">The player.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.OpenChumBucketMenu(StardewValley.Buildings.FishPond,StardewValley.Farmer)">
            <summary>
                Opens an <see cref="T:StardewValley.Menus.ItemGrabMenu"/> instance to allow retrieve multiple items from the
                <paramref name="pond"/>'s chum bucket.
            </summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> interacting with the <paramref name="pond"/>.</param>
            <returns>Always <see langword="true"/> (required by vanilla code).</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.DeserializeHeldItems(StardewValley.Buildings.FishPond)">
            <summary>
                Reads the serialized held item list from the <paramref name="pond"/>'s <seealso cref="T:StardewValley.ModDataDictionary"/> and
                returns a deserialized <see cref="T:System.Collections.Generic.List`1"/> of <seealso cref="T:StardewValley.Object"/>s.
            </summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:StardewValley.Item"/>s encoded in the <paramref name="pond"/>'s held items data.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.FishPondExtensions.GetRoeChance(StardewValley.Buildings.FishPond,System.Nullable{System.Int32})">
            <summary>Gets a fish's chance to produce roe in this <paramref name="pond"/>.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <param name="value">The fish's sale value.</param>
            <returns>The percentage chance of a fish with the given <paramref name="value"/> to produce roe in this <paramref name="pond"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Ponds.Extensions.RandomExtensions">
            <summary>Extensions for the <see cref="T:System.Random"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.RandomExtensions.NextAlgae(System.Random,System.Nullable{System.Int32})">
            <summary>Gets the item index of a random algae.</summary>
            <param name="random">The <see cref="T:System.Random"/> number generator.</param>
            <param name="bias">A particular type of algae that should be favored.</param>
            <returns>The <see cref="T:System.Int32"/> index of an algae <see cref="T:StardewValley.Item"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Ponds.Extensions.SObjectExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.SObjectExtensions.IsRadioactiveFish(StardewValley.Object)">
            <summary>Determines whether the <paramref name="obj"/> is a radioactive fish.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is a mutant or radioactive fish species, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Extensions.SObjectExtensions.CanEnrich(StardewValley.Object)">
            <summary>Determines whether the <paramref name="obj"/> is a non-radioactive ore or ingot.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is either copper, iron, gold or iridium, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.BuildingDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.BuildingDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishingRodPullFishFromWaterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishingRodPullFishFromWaterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishingRodPullFishFromWaterPatcher.FishingRodPullFishFromWaterPrefix(StardewValley.Tools.FishingRod,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Decrement total Fish Pond quality ratings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondAddFishToPondPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondAddFishToPondPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondAddFishToPondPatcher.FishPondAddFishToPondPostfix(StardewValley.Buildings.FishPond,StardewValley.Object)">
            <summary>Distinguish extended family pairs + increment total Fish Pond quality ratings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondCtorPatcher.FishPondCtorPostfix(StardewValley.Buildings.FishPond)">
            <summary>Compensates for the game calling dayUpdate *twice* immediately upon construction.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDayUpdatePatcher.FishPondDayUpdatePrefix(StardewValley.Buildings.FishPond,System.Int32)">
            <summary>Reset held items each morning.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDayUpdatePatcher.FishPondDayUpdatePostfix(StardewValley.Buildings.FishPond,StardewValley.GameData.FishPond.FishPondData@)">
            <summary>Spontaneously grow algae.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDayUpdatePatcher.FishPondDayUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>
                Removes population-based roll from <see cref="M:StardewValley.Buildings.FishPond.dayUpdate(System.Int32)"/> (moved to
                <see cref="M:StardewValley.Buildings.FishPond.GetFishProduce(System.Random)"/>).
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDoActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDoActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDoActionPatcher.FishPondDoActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Inject ItemGrabMenu + allow legendary fish to share a pond with their extended families + secretly enrich
                metals in radioactive ponds.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDoFishSpecificWaterColoringPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDoFishSpecificWaterColoringPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondDoFishSpecificWaterColoringPatcher.FishPondDoFishSpecificWaterColoringPostfix(StardewValley.Buildings.FishPond)">
            <summary>Recolor for algae/seaweed.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondGetFishProducePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondGetFishProducePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondGetFishProducePatcher.FishPondGetFishProducePrefix(StardewValley.Buildings.FishPond,StardewValley.Object@,System.Random)">
            <summary>Replace single production with multi-yield production.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondJumpFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondJumpFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondJumpFishPatcher.FishPondJumpFishPrefix(StardewValley.Buildings.FishPond,System.Boolean@)">
            <summary>Prevent un-immersive jumping algae.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondOnFishTypeChangedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondOnFishTypeChangedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondOnFishTypeChangedPatcher.FishPondOnFishTypeChangedPostfix(StardewValley.Buildings.FishPond,System.Int32,System.Int32)">
            <summary>Reset Fish Pond data.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondSpawnFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondSpawnFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.FishPondSpawnFishPatcher.FishPondSpawnFishPostfix(StardewValley.Buildings.FishPond)">
            <summary>Set the quality of newborn fishes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.Integration.FishPondMachineOnOutputTakenPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.Integration.FishPondMachineOnOutputTakenPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.Integration.FishPondMachineOnOutputTakenPatcher.FishPondMachineOnOutputTakenPrefix(System.Object,StardewValley.Item)">
            <summary>Harvest produce from mod data until none are left.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.Integration.FishingRodPatcherCatchItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.Integration.FishingRodPatcherCatchItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.Integration.FishingRodPatcherCatchItemPatcher.FishingRodPatcherCatchItemPrefix(System.Object)">
            <summary>Corrects Fish Pond data after pulling fish from pond.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.ItemGrabMenuCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.ItemGrabMenuCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.ItemGrabMenuCtorPatcher.ItemGrabMenuCtorPostfix(StardewValley.Menus.ItemGrabMenu)">
            <summary>Update ItemsHeld data on grab menu close.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.ItemGrabMenuReadyToClosePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.ItemGrabMenuReadyToClosePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.ItemGrabMenuReadyToClosePatcher.ItemGrabMenuReadyToClosePostfix(StardewValley.Menus.ItemGrabMenu,System.Boolean@)">
            <summary>Update ItemsHeld data on grab menu close.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.PondQueryMenuCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.PondQueryMenuCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.PondQueryMenuCtorPatcher.PondQueryMenuCtorPrefix(StardewValley.Buildings.FishPond)">
            <summary>Handle invalid data on menu open.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.PondQueryMenuDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Ponds.Patchers.PondQueryMenuDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Ponds.Patchers.PondQueryMenuDrawPatcher.PondQueryMenuDrawPrefix(StardewValley.Menus.PondQueryMenu,System.Single,Microsoft.Xna.Framework.Rectangle,System.String,System.Boolean,System.String,StardewValley.Object,StardewValley.Buildings.FishPond,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Adjust fish pond query menu for algae.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.AddProfessionsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.AddProfessionsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.AddProfessionsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.AddProfessionsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.AddProfessionsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.ClearNewLevelsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.ClearNewLevelsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.ClearNewLevelsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.ClearNewLevelsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.ClearNewLevelsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.MaxAnimalDispositionsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.MaxAnimalDispositionsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.MaxAnimalDispositionsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.MaxAnimalDispositionsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.MaxAnimalDispositionsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.MaxFishingAuditCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.MaxFishingAuditCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.MaxFishingAuditCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.MaxFishingAuditCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.MaxFishingAuditCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintFishingAuditCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.PrintFishingAuditCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintFishingAuditCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintFishingAuditCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintFishingAuditCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintModDataCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.PrintModDataCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintModDataCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintModDataCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintModDataCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintProfessionsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.PrintProfessionsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintProfessionsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintProfessionsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintProfessionsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintRegisteredUltimateCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.PrintRegisteredUltimateCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintRegisteredUltimateCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintRegisteredUltimateCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintRegisteredUltimateCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintSkillLevelsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.PrintSkillLevelsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintSkillLevelsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.PrintSkillLevelsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.PrintSkillLevelsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.RemoveProfessionsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.RemoveProfessionsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.RemoveProfessionsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.RemoveProfessionsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.RemoveProfessionsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.ResetSkillLevelsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.ResetSkillLevelsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.ResetSkillLevelsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.ResetSkillLevelsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.ResetSkillLevelsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetModDataCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.SetModDataCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetModDataCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetModDataCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetModDataCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetRegisteredUltimateCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.SetRegisteredUltimateCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetRegisteredUltimateCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetRegisteredUltimateCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetRegisteredUltimateCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetSkillLevelsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.SetSkillLevelsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetSkillLevelsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetSkillLevelsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetSkillLevelsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetUltimateChargeCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.SetUltimateChargeCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetUltimateChargeCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.SetUltimateChargeCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.SetUltimateChargeCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.TreasureHuntCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Commands.TreasureHuntCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.TreasureHuntCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Commands.TreasureHuntCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Commands.TreasureHuntCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Config">
            <summary>The user-configurable settings for PROFS.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Config.PrestigeProgressionStyle">
            <summary>The style used to indicate Skill Reset progression.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Config.PrestigeProgressionStyle.StackedStars">
            <summary>Use stacked quality star icons, one per reset level.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Config.PrestigeProgressionStyle.Gen3Ribbons">
            <summary>Use Generation 3 Pokemon contest ribbons.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Config.PrestigeProgressionStyle.Gen4Ribbons">
            <summary>Use Generation 4 Pokemon contest ribbons.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ModKey">
            <summary>Gets mod key used by Prospector and Scavenger professions.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ShouldJunimosInheritProfessions">
            <summary>Gets a value indicating whether determines whether Harvester and Agriculturist perks should apply to crops harvested by Junimos.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ArtisanGoodsAlwaysInputQuality">
            <summary>Gets a value indicating whether the quality of produced artisan goods should be always the same as the quality of the input material. If set to false, then the quality will be less than or equal to that of the input.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.CustomArtisanMachines">
            <summary>Gets custom mod Artisan machines. Add to this list to make them compatible with the profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.BeesAreAnimals">
            <summary>Gets a value indicating whether Bee House products should be affected by Producer bonuses.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ForagesNeededForBestQuality">
            <summary>Gets the number of items that must be foraged before foraged items become iridium-quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.MineralsNeededForBestQuality">
            <summary>Gets the number of minerals that must be mined before mined minerals become iridium-quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LaxOwnershipRequirements">
            <summary>
                Gets a value indicating whether if enabled, machine and building ownership will be ignored when determining whether to apply profession
                bonuses.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.TrackingPointerScale">
            <summary>Gets the size of the pointer used to track objects by Prospector and Scavenger professions.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.TrackingPointerBobbingRate">
            <summary>Gets the speed at which the tracking pointer bounces up and down (higher is faster).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.DisableAlwaysTrack">
            <summary>Gets a value indicating whether if enabled, Prospector and Scavenger will only track off-screen object while <see cref="P:DaLion.Overhaul.Modules.Professions.Config.ModKey"/> is held.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ChanceToStartTreasureHunt">
            <summary>Gets the chance that a scavenger or prospector hunt will trigger in the right conditions.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.AllowScavengerHuntsOnFarm">
            <summary>Gets a value indicating whether determines whether a Scavenger Hunt can trigger while entering a farm map.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ScavengerHuntHandicap">
            <summary>Gets a multiplier which is used to extend the duration of Scavenger hunts, in case you feel they end too quickly.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ProspectorHuntHandicap">
            <summary>Gets a multiplier which is used to extend the duration of Prospector hunts, in case you feel they end too quickly.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.TreasureDetectionDistance">
            <summary>Gets the minimum distance to the treasure hunt target before the indicator appears.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.SpelunkerSpeedCeiling">
            <summary>Gets the maximum speed bonus a Spelunker can reach.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.EnableGetExcited">
            <summary>Gets a value indicating whether toggles the Get Excited buff when a Demolitionist is hit by an explosion.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.CrystalariumsUpgradeWithGemologist">
            <summary>Gets a value indicating whether to increase the quality of all active Crystalarium minerals when the Gemologist owner gains a quality level-up.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.FishNeededForInstantCatch">
            <summary>Gets the number of fish species that must be caught to achieve instant catch.</summary>
            <remarks>Unused.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.AnglerPriceBonusCeiling">
            <summary>
                Gets the maximum multiplier that will be added to fish sold by Angler. if multiple new fish mods are installed,
                you may want to adjust this to a sensible value.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.AquaristFishPondCeiling">
            <summary>
                Gets the maximum number of Fish Ponds that will be counted for catching bar loss compensation.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ShowFishCollectionMaxIcon">
            <summary>
                Gets a value indicating whether to display the MAX icon below fish in the Collections Menu which have been caught at the
                maximum size.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LegendaryPondPopulationCeiling">
            <summary>Gets the maximum population of Aquarist Fish Ponds with legendary fish.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.TrashNeededPerTaxDeductionPct">
            <summary>Gets you must collect this many junk items from crab pots for every 1% of tax deduction the following season.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.TrashNeededPerFriendshipPoint">
            <summary>Gets you must collect this many junk items from crab pots for every 1 point of friendship towards villagers.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ConservationistTaxBonusCeiling">
            <summary>Gets the maximum income deduction allowed by the Ferngill Revenue Service.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.PiperBuffCeiling">
            <summary>Gets the maximum stacks that can be gained for each buff stat.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.EnableLimitBreaks">
            <summary>Gets a value indicating whether to allow Limit Breaks to be used in-game.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LimitBreakKey">
            <summary>Gets the mod key used to activate the Limit Break. Can be the same as <see cref="P:DaLion.Overhaul.Modules.Professions.Config.ModKey"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.HoldKeyToLimitBreak">
            <summary>Gets a value indicating whether the Limit Break is activated by holding the <see cref="P:DaLion.Overhaul.Modules.Professions.Config.LimitBreakKey"/>, as opposed to simply pressing.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LimitBreakHoldDelaySeconds">
            <summary>Gets how long the <see cref="P:DaLion.Overhaul.Modules.Professions.Config.LimitBreakKey"/> should be held to activate the Limit Break, in seconds.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LimitGainFactor">
            <summary>
                Gets the rate at which one builds the Limit gauge. Increase this if you feel the gauge raises too
                slowly.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LimitDrainFactor">
            <summary>
                Gets the rate at which the Limit gauge depletes during Ultimate. Decrease this to make the Limit Break last
                longer.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.LimitRespecCost">
            <summary>Gets monetary cost of changing the chosen Limit Break. Set to 0 to change for free.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.SkillResetCostMultiplier">
            <summary>Gets the base skill reset cost multiplier. Set to 0 to reset for free.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.EnablePrestige">
            <summary>Gets a value indicating whether to apply Prestige changes.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ForgetRecipes">
            <summary>Gets a value indicating whether resetting a skill also clears all corresponding recipes.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.AllowMultiplePrestige">
            <summary>Gets a value indicating whether the player can use the Statue of Prestige more than once per day.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.PrestigeExpFactor">
            <summary>Gets cumulative multiplier to each skill's experience gain after a respective skill reset.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.RequiredExpPerExtendedLevel">
            <summary>Gets how much skill experience is required for each level up beyond 10.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.PrestigeRespecCost">
            <summary>Gets monetary cost of respecing prestige profession choices for a skill. Set to 0 to respec for free.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.BaseSkillExpMultipliers">
            <summary>Gets a multiplier that will be applied to all skill experience gained from the start of the game.</summary>
            <remarks>The order is Farming, Fishing, Foraging, Mining, Combat and Luck (if installed).</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.CustomSkillExpMultipliers">
            <summary>Gets multiplies all skill experience gained from the start of the game, for custom skills.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Config.ProgressionStyle">
            <summary>
                Gets the style of the sprite that appears next to skill bars. Accepted values: "StackedStars", "Gen3Ribbons",
                "Gen4Ribbons".
            </summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Professions"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.EditAchievementsData(StardewModdingAPI.IAssetData)">
            <summary>Patches achievements data with prestige achievements.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.EditFishPondDataData(StardewModdingAPI.IAssetData)">
            <summary>Patches fish pond data with legendary fish data.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.EditMailData(StardewModdingAPI.IAssetData)">
            <summary>Patches mail data with mail from the Ferngill Revenue Service.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.EditCursorsLooseSprites(StardewModdingAPI.IAssetData)">
            <summary>Patches cursors with modded profession icons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.EditBuffsIconsTileSheets(StardewModdingAPI.IAssetData)">
            <summary>Patches buffs icons with modded profession buff icons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.ProvideSkillBars">
            <summary>Provides the correct skill bars texture path.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetRequestedEvent.ProvideUltimateMeter">
            <summary>Provides the correct ultimate meter texture path.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetsInvalidatedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetsInvalidatedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Content.ProfessionAssetsInvalidatedEvent.OnAssetsInvalidatedImpl(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Custom.ProfessionFirstSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Custom.ProfessionFirstSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Custom.ProfessionFirstSecondUpdateTickedEvent.OnFirstSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.DesperadoRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.DesperadoRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.DesperadoRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ProspectorHuntRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.ProspectorHuntRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ProspectorHuntRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ProspectorRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.ProspectorRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ProspectorRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ScavengerHuntRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.ScavengerHuntRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ScavengerHuntRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ScavengerRenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.ScavengerRenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.ScavengerRenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.UltimateOverlayRenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.UltimateOverlayRenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.UltimateOverlayRenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.UltimateMeterRenderingHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Display.UltimateMeterRenderingHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Display.UltimateMeterRenderingHudEvent.OnRenderingHudImpl(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ConservationismDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ConservationismDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ConservationismDayEndingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ConservationismDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DayEnding.PiperDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DayEnding.PiperDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DayEnding.PiperDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayEndingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayEndingEvent.ToReset">
            <summary>Gets the current reset queue.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.AchievementUnlockedDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.AchievementUnlockedDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.AchievementUnlockedDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntDayStartedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.RestoreForgottenRecipesDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.RestoreForgottenRecipesDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.RestoreForgottenRecipesDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntDayStartedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionGameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionGameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionGameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.LateLoadOneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.LateLoadOneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.LateLoadOneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeAchievementOneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeAchievementOneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeAchievementOneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent.OnArrayReplaced(Netcode.NetList{System.Int32,Netcode.NetInt},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>Invoked when the value list is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="oldValues">The previous list of values.</param>
            <param name="newValues">The new list of values.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent.OnElementChanged(Netcode.NetList{System.Int32,Netcode.NetInt},System.Int32,System.Int32,System.Int32)">
            <summary>Invoked when an entry is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="index">The list index which changed.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent.OnProfessionAdded(System.Int32)">
            <summary>Invoked when a profession is added to the local player.</summary>
            <param name="which">The index of the added profession.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProfessionSaveLoadedEvent.OnProfessionRemoved(System.Int32)">
            <summary>Invoked when a profession is removed from the local player.</summary>
            <param name="which">The index of the removed profession.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.AmbushUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.AmbushUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.AmbushUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.BruteUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.BruteUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.BruteUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.BruteUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DemolitionistUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DemolitionistUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DemolitionistUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DesperadoUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DesperadoUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DesperadoUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DesperadoUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.DesperadoUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ManualDetonationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ManualDetonationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ManualDetonationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PiperUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PiperUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PiperUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeTreasureHuntUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeTreasureHuntUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.PrestigeTreasureHuntUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ProspectorHuntUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.ScavengerHuntUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SlimeDeflationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SlimeDeflationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SlimeDeflationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SlimeInflationUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SlimeInflationUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SlimeInflationUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SpelunkerUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SpelunkerUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.SpelunkerUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateActiveUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateActiveUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateActiveUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateGaugeFadeOutUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateGaugeFadeOutUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateGaugeFadeOutUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateGaugeShakeUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateGaugeShakeUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateGaugeShakeUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateInputUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateInputUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateInputUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateOverlayFadeInUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateOverlayFadeInUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateOverlayFadeInUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateOverlayFadeOutUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateOverlayFadeOutUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.GameLoop.UltimateOverlayFadeOutUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Input.RascalButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Input.RascalButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Input.RascalButtonPressedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Input.RascalButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Input.TrackerButtonsChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Input.TrackerButtonsChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Input.TrackerButtonsChangedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Input.TrackerButtonsChangedEvent.OnButtonsChangedImpl(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Input.UltimateButtonsChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Input.UltimateButtonsChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Input.UltimateButtonsChangedEvent.OnButtonsChangedImpl(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.HostRequestedModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.HostRequestedModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.HostRequestedModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.HostRequestedModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.UltimateToggledModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.UltimateToggledModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.UltimateToggledModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Multiplayer.UltimateToggledModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.RascalInventoryChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.RascalInventoryChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.RascalInventoryChangedEvent.OnInventoryChangedImpl(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.CombatLevelChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.CombatLevelChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.CombatLevelChangedEvent.OnLevelChangedImpl(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.PrestigeLevelChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.PrestigeLevelChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.PrestigeLevelChangedEvent.OnLevelChangedImpl(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.BruteWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.BruteWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Player.BruteWarpedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.BruteWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.GaldoraHudThemeWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.GaldoraHudThemeWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.GaldoraHudThemeWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.PiperWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.PiperWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Player.PiperWarpedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.PiperWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.ProspectorWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.ProspectorWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Player.ProspectorWarpedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.ProspectorWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.ScavengerWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.ScavengerWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Player.ScavengerWarpedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.ScavengerWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.SpelunkerWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.SpelunkerWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Player.SpelunkerWarpedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.SpelunkerWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.UltimateWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Player.UltimateWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Player.UltimateWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs">
            <summary>Interface for the arguments of a <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs.Type">
            <summary>Gets whether this event relates to a Scavenger or Prospector hunt.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs.TreasureFound">
            <summary>Gets a value indicating whether the player successfully discovered the treasure.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/> ends.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent.OnEnded(System.Object,DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs)">
            <summary>Raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/> ends.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEventArgs">
            <summary>The arguments for a <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEventArgs.#ctor(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
            <param name="type">Whether this event relates to a Scavenger or Prospector hunt.</param>
            <param name="found">Whether the player successfully discovered the treasure.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEventArgs.Type">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEventArgs.TreasureFound">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs">
            <summary>Interface for the arguments of a <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs.Type">
            <summary>Gets whether this event relates to a Scavenger or Prospector hunt.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs.Target">
            <summary>Gets the coordinates of the target tile.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/> starts.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent.OnStarted(System.Object,DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs)">
            <summary>Raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/> starts.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEventArgs">
            <summary>The arguments for a <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEventArgs.#ctor(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,Microsoft.Xna.Framework.Vector2)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
            <param name="type">Whether this event relates to a Scavenger or Prospector hunt.</param>
            <param name="target">The coordinates of the target tile.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEventArgs.Type">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEventArgs.Target">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateActivatedEventArgs">
            <summary>Interface for the arguments of an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateActivatedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> is activated.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateActivatedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent.OnActivated(System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateActivatedEventArgs)">
            <summary>Raised when a player activates the combat <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/>.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEventArgs">
            <summary>The arguments for an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEventArgs.#ctor(StardewValley.Farmer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateActivatedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs">
            <summary>Interface for the arguments of an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs.OldValue">
            <summary>Gets the previous charge value.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs.NewValue">
            <summary>Gets the new charge value.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> charge increases.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent.OnChargeIncreased(System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs)">
            <summary>Raised when a player's combat <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> charge increases.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEventArgs">
            <summary>The arguments for an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEventArgs.#ctor(StardewValley.Farmer,System.Double,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
            <param name="oldValue">The old charge value.</param>
            <param name="newValue">The new charge value.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEventArgs.OldValue">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEventArgs.NewValue">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeInitiatedEventArgs">
            <summary>Interface for the arguments of an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeInitiatedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeInitiatedEventArgs.NewValue">
            <summary>Gets the new charge value.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent">
            <summary>
                A dynamic event raised when a
                <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> is gains any charge while it was previously empty.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeInitiatedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent.OnChargeInitiated(System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeInitiatedEventArgs)">
            <summary>
                Raised when a player's combat <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> gains any charge while it was previously
                empty.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEventArgs">
            <summary>The arguments for an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEventArgs.#ctor(StardewValley.Farmer,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
            <param name="newValue">The new charge value.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEventArgs.NewValue">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateDeactivatedEventArgs">
            <summary>Interface for the arguments of an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateDeactivatedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> ends.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateDeactivatedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent.OnDeactivated(System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateDeactivatedEventArgs)">
            <summary>Raised when a player's combat <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> ends.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEventArgs">
            <summary>The arguments for an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEventArgs.#ctor(StardewValley.Farmer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateEmptiedEventArgs">
            <summary>Interface for the arguments of an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateEmptiedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> charge value returns to zero.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateEmptiedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent.OnEmptied(System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateEmptiedEventArgs)">
            <summary>Raised when the local player's <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> charge value returns to zero.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEventArgs">
            <summary>The arguments for an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEventArgs.#ctor(StardewValley.Farmer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateFullyChargedEventArgs">
            <summary>Interface for the arguments of a <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateFullyChargedEventArgs.Player">
            <summary>Gets the player who triggered the event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent">
            <summary>A dynamic event raised when a <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> reaches the maximum charge value.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent.#ctor(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateFullyChargedEventArgs})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent"/> class.</summary>
            <param name="callback">The delegate to run when the event is raised.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent.OnFullyCharged(System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateFullyChargedEventArgs)">
            <summary>Raised when the local player's <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> charge value reaches max value.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEventArgs">
            <summary>The arguments for an <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEventArgs.#ctor(StardewValley.Farmer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEventArgs"/> class.</summary>
            <param name="player">The player who triggered the event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEventArgs.Player">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.BuildingExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Buildings.Building"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.BuildingExtensions.DoesOwnerHaveProfession(StardewValley.Buildings.Building,DaLion.Overhaul.Modules.Professions.IProfession,System.Boolean)">
            <summary>Determines whether the owner of the <paramref name="building"/> has the specified <paramref name="profession"/>.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="profession">A <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>.</param>
            <param name="prestiged">Whether to check for the prestiged variant.</param>
            <returns><see langword="true"/> if the <see cref="T:StardewValley.Farmer"/> who owns the <paramref name="building"/> has the <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.BuildingExtensions.DoesOwnerHaveProfession(StardewValley.Buildings.Building,System.Int32,System.Boolean)">
            <summary>Determines whether the owner of the <paramref name="building"/> has the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/> corresponding to <paramref name="index"/>.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="index">A valid profession index.</param>
            <param name="prestiged">Whether to check for the prestiged variant.</param>
            <returns><see langword="true"/> if the owner of <paramref name="building"/> the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/> with the specified <paramref name="index"/>, otherwise <see langword="false"/>.</returns>
            <remarks>This overload exists only to be called by emitted ILCode. Excepts a vanilla <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/>.</remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Objects.CrabPot"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.TrapperPirateTreasureTable">
            <summary>Gets the treasure items that can be trapped by magnet bait.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.HasMagnet(StardewValley.Objects.CrabPot)">
            <summary>Determines whether the <paramref name="crabPot"/> is using magnet as bait.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <returns><see langword="true"/> if the <paramref name="crabPot"/>'s bait value is the index of Magnet, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.HasWildBait(StardewValley.Objects.CrabPot)">
            <summary>Determines whether the <paramref name="crabPot"/> is using wild bait.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <returns><see langword="true"/> if the <paramref name="crabPot"/>'s bait value is the index of Wild Bait, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.HasMagicBait(StardewValley.Objects.CrabPot)">
            <summary>Determines whether the <paramref name="crabPot"/> is using magic bait.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <returns><see langword="true"/> if the <paramref name="crabPot"/>'s bait value is the index of Magic Bait, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.ShouldCatchOceanFish(StardewValley.Objects.CrabPot,StardewValley.GameLocation)">
            <summary>Determines whether the <paramref name="crabPot"/> should catch ocean-specific shellfish.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/> of the <paramref name="crabPot"/>.</param>
            <returns><see langword="true"/> if the <paramref name="crabPot"/> is placed near ocean, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.HasSpecialLuremasterCatch(StardewValley.Objects.CrabPot)">
            <summary>
                Determines whether the <paramref name="crabPot"/> is holding an object that can only be caught via Luremaster
                profession.
            </summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <returns><see langword="true"/> if the <paramref name="crabPot"/> is holding anything other than trap fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.ChooseFish(StardewValley.Objects.CrabPot,System.Collections.Generic.Dictionary{System.Int32,System.String},StardewValley.GameLocation,System.Random)">
            <summary>Chooses a random fish index from amongst the allowed list of fish for the <paramref name="location"/>.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="fishData">Raw fish data from the game files.</param>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/> of the <paramref name="crabPot"/>.</param>
            <param name="r">A random number generator.</param>
            <returns>The index of a random fish from the allowed list for the <paramref name="location"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.ChooseTrapFish(StardewValley.Objects.CrabPot,System.Collections.Generic.Dictionary{System.Int32,System.String},StardewValley.GameLocation,System.Random,System.Boolean)">
            <summary>Chooses a random trap fish index from amongst the allowed list of fish for the <paramref name="location"/>.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="fishData">Raw fish data from the game files.</param>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/> of the <paramref name="crabPot"/>.</param>
            <param name="r">A random number generator.</param>
            <param name="isLuremaster">Whether the owner of the crab pot is luremaster.</param>
            <returns>The index of a random trap fish from the allowed list for the <paramref name="location"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.ChoosePirateTreasure(StardewValley.Objects.CrabPot,StardewValley.Farmer,System.Random)">
            <summary>Chooses a random treasure index from the pirate treasure loot table.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="owner">The player.</param>
            <param name="r">A random number generator.</param>
            <returns>The index of a random treasure <see cref="T:StardewValley.Item"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.GetTrapQuality(StardewValley.Objects.CrabPot,System.Int32,StardewValley.Farmer,System.Random,System.Boolean)">
            <summary>Gets the quality for the chosen <paramref name="trap"/> fish.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="trap">The chosen trap fish.</param>
            <param name="owner">The owner of the crab pot.</param>
            <param name="r">A random number generator.</param>
            <param name="isLuremaster">Whether the <paramref name="owner"/> has <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Luremaster"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality value.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.GetTrapQuantity(StardewValley.Objects.CrabPot,System.Int32,StardewValley.Farmer,System.Random)">
            <summary>Gets initial stack for the chosen <paramref name="trap"/> fish.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="trap">The chosen trap fish.</param>
            <param name="owner">The player.</param>
            <param name="r">A random number generator.</param>
            <returns>The stack value.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.GetTrash(StardewValley.Objects.CrabPot,StardewValley.GameLocation,System.Random)">
            <summary>Chooses a random, <paramref name="location"/>-appropriate, trash.</summary>
            <param name="crabPot">The <see cref="T:StardewValley.Objects.CrabPot"/>.</param>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/> of the <paramref name="crabPot"/>.</param>
            <param name="r">A random number generator.</param>
            <returns>The index of a random trash <see cref="T:StardewValley.Item"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.GetRawFishDataWithLocation(DaLion.Shared.Extensions.Memory.SpanSplitter)">
            <summary>Converts raw fish data into a look-up for fishing locations by fish indices.</summary>
            <param name="rawFishData">String array of available fish indices and fishing locations.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.IsCorrectLocationAndTimeForThisFish(System.Int32,Microsoft.Xna.Framework.Vector2,StardewValley.GameLocation)">
            <summary>Determines whether the current fishing location and game time match the specific fish data.</summary>
            <param name="specificFishLocation">The fishing location index for this fish.</param>
            <param name="tileLocation">The crab pot tile location.</param>
            <param name="location">The game location of the crab pot.</param>
            <returns><see langword="true"/> if the <paramref name="location"/> matches the <paramref name="specificFishLocation"/>.</returns>
            <remarks>
                The time portion is doesn't actually make sense for <see cref="T:StardewValley.Objects.CrabPot"/>s since they (theoretically) update only once during the
                night.
            </remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.CrabPotExtensions.IsCorrectWeatherForThisFish(DaLion.Shared.Extensions.Memory.SpanSplitter,StardewValley.GameLocation)">
            <summary>Determines whether the current weather matches the specific fish data.</summary>
            <param name="specificFishData">Raw game file data for this fish.</param>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/> of the <see cref="T:StardewValley.Objects.CrabPot"/> which would catch the fish.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.FarmAnimalExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.FarmAnimal"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmAnimalExtensions.DoesOwnerHaveProfession(StardewValley.FarmAnimal,DaLion.Overhaul.Modules.Professions.IProfession,System.Boolean)">
            <summary>Determines whether the owner of the <paramref name="animal"/> has the specified <paramref name="profession"/>.</summary>
            <param name="animal">The <see cref="T:StardewValley.FarmAnimal"/>.</param>
            <param name="profession">An <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>..</param>
            <param name="prestiged">Whether to check for the prestiged variant.</param>
            <returns><see langword="true"/> if the <see cref="T:StardewValley.Farmer"/> who owns the <paramref name="animal"/> has the <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmAnimalExtensions.GetProducerAdjustedFriendship(StardewValley.FarmAnimal)">
            <summary>Adjusts the price of the <paramref name="animal"/> for <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Breeder"/>.</summary>
            <param name="animal">The <see cref="T:StardewValley.FarmAnimal"/>.</param>
            <returns>The adjusted friendship value.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.HasProfession(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.IProfession,System.Boolean)">
            <summary>Determines whether the <paramref name="farmer"/> has a particular <paramref name="profession"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="profession">The <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/> to check.</param>
            <param name="prestiged">Whether to check for the prestiged variant.</param>
            <returns><see langword="true"/> if the <paramref name="farmer"/> has the specified <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.HasAllProfessionsBranchingFrom(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.IProfession)">
            <summary>
                Determines whether the <paramref name="farmer"/> has acquired both level ten professions branching from the
                specified level five <paramref name="profession"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="profession">The <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/> to check.</param>
            <returns><see langword="true"/> only if the <paramref name="farmer"/> has both tier-two professions which branch from <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.HasAllProfessionsInSkill(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.ISkill)">
            <summary>
                Determines whether the <paramref name="farmer"/> has all six professions in the specified
                <paramref name="skill"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="skill">The <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> to check.</param>
            <returns><see langword="true"/> only if the <paramref name="farmer"/> has all four professions belonging to the <paramref name="skill"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.HasAllProfessions(StardewValley.Farmer,System.Boolean)">
            <summary>Determines whether the <paramref name="farmer"/> has all available professions (vanilla + modded).</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="includeCustom">Whether to include <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/>s in the count.</param>
            <returns><see langword="true"/> only if the <paramref name="farmer"/> has all 30 vanilla professions, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetCurrentBranchForSkill(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.ISkill)">
            <summary>
                Gets the most recent tier-one profession acquired by the <paramref name="farmer"/> in the specified
                <paramref name="skill"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="skill">The <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> to check.</param>
            <returns>The last acquired profession index, or -1 if none was found.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetCurrentProfessionForBranch(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.IProfession)">
            <summary>
                Gets the most recent tier-two profession acquired by the <paramref name="farmer"/> in the specified
                <paramref name="branch"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="branch">The branch (level 5 <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>) to check.</param>
            <returns>The last acquired profession index, or -1 if none was found.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetProfessionsForSkill(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.ISkill,System.Boolean)">
            <summary>Gets all the <paramref name="farmer"/>'s professions associated with a specific <paramref name="skill"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="skill">The <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> to check.</param>
            <param name="excludeTierOneProfessions">Whether to exclude level 5 professions from the result.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>s in <paramref name="skill"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetMissingProfessionsInSkill(StardewValley.Farmer,DaLion.Overhaul.Modules.Professions.ISkill,System.Boolean)">
            <summary>
                Gets the professions which the <paramref name="farmer"/> is missing in the specified
                <paramref name="skill"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="skill">The <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> to check.</param>
            <param name="excludeTierOneProfessions">Whether to exclude level 5 professions from the count.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of un-obtained <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>s.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetMostRecentProfession(StardewValley.Farmer,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Gets the last acquired profession by the <paramref name="farmer"/> in the specified subset, or simply the
                last acquired profession if no subset is specified.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="subset">An array of profession ids.</param>
            <returns>The last acquired profession, or -1 if none was found.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.RevalidateUltimate(StardewValley.Farmer)">
            <summary>
                Determines whether the <paramref name="farmer"/>'s registered <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> is valid, or whether they
                should be assigned one based on their professions.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetUnchosenUltimates(StardewValley.Farmer)">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> options which are not currently registered.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/>s, excluding the currently registered.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.HasCaughtMaxSized(StardewValley.Farmer,System.Int32)">
            <summary>
                Determines whether the <paramref name="farmer"/> has caught the fish with specified <paramref name="index"/>
                at max size.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="index">The fish's index.</param>
            <returns><see langword="true"/> if the fish with the specified <paramref name="index"/> has been caught with max size, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetProducerPriceBonus(StardewValley.Farmer)">
            <summary>Gets the price bonus applied to animal produce sold by <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Producer"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for animal products.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetFisherBonusCatchingBarSpeed(StardewValley.Farmer,System.Int32)">
            <summary>Gets the bonus catching bar speed for prestiged <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Fisher"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="whichFish">The fish index.</param>
            <returns>A <see cref="T:System.Single"/> catching bar height.</returns>
            <remarks>UNUSED.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetAnglerPriceBonus(StardewValley.Farmer)">
            <summary>Gets the price bonus applied to fish sold by <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Angler"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for fish prices.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetAquaristCatchingBarCompensation(StardewValley.Farmer)">
            <summary>Gets the amount of "catching" bar to compensate for <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Aquarist"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:System.Single"/> catching height.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetConservationistPriceMultiplier(StardewValley.Farmer)">
            <summary>Gets the price bonus applied to all items sold by <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Conservationist"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for general items.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetEcologistForageQuality(StardewValley.Farmer)">
            <summary>Gets the quality of items foraged by <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Ecologist"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality level.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetGemologistMineralQuality(StardewValley.Farmer)">
            <summary>Gets the quality of minerals collected by <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Gemologist"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality level.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.AddSpelunkerMomentum(StardewValley.Farmer)">
            <summary>Applies <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Spelunker"/> effects following interaction with a ladder or sink hole.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.GetRaisedSlimes(StardewValley.Farmer)">
            <summary>Enumerates the <see cref="T:StardewValley.Monsters.GreenSlime"/>s currently inhabiting owned <see cref="T:StardewValley.SlimeHutch"/>es.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:StardewValley.Monsters.GreenSlime"/>s currently inhabiting owned <see cref="T:StardewValley.SlimeHutch"/>es.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FarmerExtensions.IsInAmbush(StardewValley.Farmer)">
            <summary>
                Determines whether the <paramref name="farmer"/> is currently using the <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Poacher"/>
                <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if <see cref="F:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.PoacherAmbush"/> is active.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.FishPondExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Buildings.FishPond"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FishPondExtensions.HasUnlockedFinalPopulationGate(StardewValley.Buildings.FishPond)">
            <summary>Determines whether the <paramref name="pond"/>'s population has been fully unlocked.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns><see langword="true"/> if the last unlocked population gate matches the last gate in the <see cref="T:StardewValley.GameData.FishPond.FishPondData"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.FishPondExtensions.HasLegendaryFish(StardewValley.Buildings.FishPond)">
            <summary>Determines whether a legendary fish lives in this <paramref name="pond"/>.</summary>
            <param name="pond">The <see cref="T:StardewValley.Buildings.FishPond"/>.</param>
            <returns><see langword="true"/> if the <paramref name="pond"/> houses a legendary fish species, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.Game1Extensions">
            <summary>Extensions for the <see cref="T:StardewValley.Game1"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.Game1Extensions.DoesAnyPlayerHaveProfession(StardewValley.Game1,DaLion.Overhaul.Modules.Professions.IProfession,System.Int32@)">
            <summary>Determines whether any farmer in the current game session has the specified <paramref name="profession"/>.</summary>
            <param name="game1">The <see cref="T:StardewValley.Game1"/> instance.</param>
            <param name="profession">The <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/> to check.</param>
            <param name="count">How many players have this profession.</param>
            <returns><see langword="true"/> is at least one player in the game session has the <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.Game1Extensions.RevalidateFishPondPopulations(StardewValley.Game1)">
            <summary>Checks for and corrects invalid <see cref="T:StardewValley.Buildings.FishPond"/> populations in the game session.</summary>
            <param name="game1">The <see cref="T:StardewValley.Game1"/> instance.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.Game1Extensions.GlobalUpgradeCrystalariums(StardewValley.Game1,System.Int32,StardewValley.Farmer)">
            <summary>Upgrades the quality of gems or minerals held by all existing Crystalariums owned by <paramref name="who"/>.</summary>
            <param name="game1">The <see cref="T:StardewValley.Game1"/> instance.</param>
            <param name="newQuality">The new quality.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.GameLocation"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.DoesAnyPlayerHereHaveProfession(StardewValley.GameLocation,DaLion.Overhaul.Modules.Professions.IProfession)">
            <summary>
                Determines whether any <see cref="T:StardewValley.Farmer"/> in this <paramref name="location"/> has the specified
                <paramref name="profession"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="profession">The <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/> to check.</param>
            <returns><see langword="true"/> if the <paramref name="location"/> has at least one <see cref="T:StardewValley.Farmer"/> with the specified <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.DoesAnyPlayerHereHaveProfession(StardewValley.GameLocation,DaLion.Overhaul.Modules.Professions.IProfession,System.Collections.Generic.List{StardewValley.Farmer}@)">
            <summary>
                Determines whether any <see cref="T:StardewValley.Farmer"/> in this <paramref name="location"/> has the specified
                <paramref name="profession"/> and gets a <see cref="T:System.Collections.Generic.List`1"/> of those <see cref="T:StardewValley.Farmer"/>s.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="profession">The <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/> to check.</param>
            <param name="farmers">All the farmer instances in the location with the given profession.</param>
            <returns><see langword="true"/> if the <paramref name="location"/> has at least one <see cref="T:StardewValley.Farmer"/> with the specified <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.IsDungeon(StardewValley.GameLocation)">
            <summary>Determines whether this <paramref name="location"/> is a dungeon.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <returns><see langword="true"/> if the <paramref name="location"/> is a <see cref="T:StardewValley.Locations.MineShaft"/> or one of several recognized dungeon locations, otherwise <see langword="false"/>.</returns>
            <remarks>Includes locations from Stardew Valley Expanded, Ridgeside Village and Moon Misadventures.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.GetRawFishDataForCurrentSeason(StardewValley.GameLocation)">
            <summary>Gets the raw fish data for this <paramref name="location"/> during the current game season.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <returns>The raw fish data for <paramref name="location"/> and the current game season.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.GetRawFishDataForAllSeasons(StardewValley.GameLocation)">
            <summary>Gets the raw fish data for this <paramref name="location"/> including all seasons.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <returns>The raw fish data for <paramref name="location"/> and for all seasons.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.IsTileValidForTreasure(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <summary>Determines whether a <paramref name="tile"/> on a map is valid for spawning diggable treasure.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="tile">The tile to check.</param>
            <returns><see langword="true"/> if the <paramref name="tile"/> is completely clear of any <see cref="T:StardewValley.Object"/>, <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> or other map property that would make it inaccessible, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.IsTileClearOfDebris(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <summary>Determines whether a <paramref name="tile"/> is clear of <see cref="T:StardewValley.Debris"/>.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="tile">The tile to check.</param>
            <returns><see langword="true"/> if the <paramref name="tile"/> is clear of <see cref="T:StardewValley.Debris"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.GameLocationExtensions.MakeTileDiggable(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <summary>Forces a <paramref name="tile"/> to be susceptible to a <see cref="T:StardewValley.Tools.Hoe"/>.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="tile">The tile to change.</param>
            <returns><see langword="true"/> if the <paramref name="tile"/>'s "Diggable" property was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.IlHelperExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Harmony.ILHelper"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.IlHelperExtensions.MatchProfessionCheck(DaLion.Shared.Harmony.ILHelper,System.Int32,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Finds the first or next occurrence of the pattern corresponding to `player.professions.Contains()` in the
                active <see cref="T:HarmonyLib.CodeInstruction"/> list and moves the index pointer to it.
            </summary>
            <param name="helper">The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</param>
            <param name="index">The profession index.</param>
            <param name="search">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <paramref name="helper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.IlHelperExtensions.InsertProfessionCheck(DaLion.Shared.Harmony.ILHelper,System.Int32,System.Reflection.Emit.Label[],System.Boolean)">
            <summary>
                Inserts a sequence of <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index to test if the local player
                has a given
                profession.
            </summary>
            <param name="helper">The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</param>
            <param name="professionIndex">The profession id.</param>
            <param name="labels">Branch labels to add to the inserted sequence.</param>
            <param name="forLocalPlayer">Whether to load the local player.</param>
            <returns>The <paramref name="helper"/> instance.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.JunimoHarvesterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Characters.JunimoHarvester"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.JunimoHarvesterExtensions.GetOwner(StardewValley.Characters.JunimoHarvester)">
            <summary>
                Gets the <see cref="T:StardewValley.Farmer"/> who built the <see cref="T:StardewValley.Buildings.JunimoHut"/> which houses the
                <paramref name="junimo"/>.
            </summary>
            <param name="junimo">The <see cref="T:StardewValley.Characters.JunimoHarvester"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who constructed the hut where the <paramref name="junimo"/> lives, or the host of the game session if not found.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.MineShaftExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Locations.MineShaft"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.MineShaftExtensions.IsTreasureOrSafeRoom(StardewValley.Locations.MineShaft)">
            <summary>Determines whether the current mine level is a safe level; i.e. shouldn't spawn any monsters.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/> instance.</param>
            <returns><see langword="true"/> if the <paramref name="shaft"/>'s level is a regular mine level multiple of 10 or a skull cavern level with either a Qi event or the treasure net flag, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.MineShaftExtensions.GetLadderTiles(StardewValley.Locations.MineShaft)">
            <summary>Finds all tiles in a mine map containing either a ladder or sink-hole.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/> instance.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the <see cref="T:Microsoft.Xna.Framework.Vector2"/> tiles that contain a ladder or sink-hole.</returns>
            <remarks>Credit to <c>pomepome</c>.</remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.MonsterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Monsters.Monster"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.MonsterExtensions.CanBeSlowed(StardewValley.Monsters.Monster)">
            <summary>Determines whether the <paramref name="monster"/> can be afflicted with Slow status.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is not a <see cref="T:StardewValley.Monsters.GreenSlime"/>, <see cref="T:StardewValley.Monsters.BigSlime"/> or <see cref="T:StardewValley.Monsters.Ghost"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.SlingshotExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Tools.Slingshot"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.SlingshotExtensions.GetOvercharge(StardewValley.Tools.Slingshot)">
            <summary>Determines the extra power of shots fired by <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Desperado"/>.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <returns>A value between 1 and 2.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.SObjectExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.SObjectExtensions.IsArtisanMachine(StardewValley.Object)">
            <summary>Determines whether <paramref name="obj"/> is an artisan machine.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is a machine that creates artisan goods, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.SObjectExtensions.IsResourceNode(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is a resource node.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a mining node containing precious resources, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.SObjectExtensions.ShouldBeTrackedBy(StardewValley.Object,DaLion.Overhaul.Modules.Professions.Profession)">
            <summary>Determines whether the <paramref name="profession"/> should track <paramref name="obj"/>.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="profession">Either <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Scavenger"/> or <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Prospector"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> should be tracked by the <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.SObjectExtensions.DoesOwnerHaveProfession(StardewValley.Object,DaLion.Overhaul.Modules.Professions.IProfession,System.Boolean)">
            <summary>Determines whether the owner of this <paramref name="obj"/> has the specified <paramref name="profession"/>.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="profession">A <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>.</param>
            <param name="prestiged">Whether to check for the prestiged variant.</param>
            <returns><see langword="true"/> if the <see cref="T:StardewValley.Farmer"/> who owns the <paramref name="obj"/> has the <paramref name="profession"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.SObjectExtensions.DoesOwnerHaveProfession(StardewValley.Object,System.Int32,System.Boolean)">
            <summary>Determines whether the owner of the <paramref name="obj"/> has the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/> corresponding to <paramref name="index"/>.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="index">A valid profession index.</param>
            <param name="prestiged">Whether to check for the prestiged variant.</param>
            <returns><see langword="true"/> if the owner of <paramref name="obj"/> the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/> with the specified <paramref name="index"/>, otherwise <see langword="false"/>.</returns>
            <remarks>This overload exists only to be called by emitted ILCode. Expects a vanilla <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/>.</remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Extensions.TreeExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.TerrainFeatures.Tree"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Extensions.TreeExtensions.CanGrow(StardewValley.TerrainFeatures.Tree)">
            <summary>Determines whether the <paramref name="tree"/> satisfies all conditions to advance a stage.</summary>
            <param name="tree">The <see cref="T:StardewValley.TerrainFeatures.Tree"/>.</param>
            <returns><see langword="true"/> if the <paramref name="tree"/> is not yet fully mature and environment conditions are suitable for growth, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.FakeFarmer">
            <summary>A wrapper for fake <see cref="T:StardewValley.Farmer"/> instances used to manipulate aggro.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration.GetClosestContainerTo(StardewValley.Buildings.Building)">
            <summary>Get the closest <see cref="T:StardewValley.Objects.Chest"/> to the given automated <see cref="T:StardewValley.Buildings.Building"/> machine.</summary>
            <param name="machine">An automated <see cref="T:StardewValley.Buildings.Building"/> machine.</param>
            <returns>The <see cref="T:StardewValley.Objects.Chest"/> instance closest to the <paramref name="machine"/>, or <see langword="null"/> is none are found.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration.GetClosestContainerTo(StardewValley.Object,StardewValley.GameLocation)">
            <summary>Get the closest <see cref="T:StardewValley.Objects.Chest"/> to the given automated <see cref="T:StardewValley.Object"/> machine.</summary>
            <param name="machine">An automated <see cref="T:StardewValley.Object"/> machine.</param>
            <param name="location">The machine's location.</param>
            <returns>The <see cref="T:StardewValley.Objects.Chest"/> instance closest to the <paramref name="machine"/>, or <see langword="null"/> is none are found.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration.GetClosestContainerTo(StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>Get the closest <see cref="T:StardewValley.Objects.Chest"/> to the given automated <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> machine.</summary>
            <param name="machine">An automated <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> machine.</param>
            <returns>The <see cref="T:StardewValley.Objects.Chest"/> instance closest to the <paramref name="machine"/>, or <see langword="null"/> is none are found.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.AutomateIntegration.GetLocationKey(StardewValley.GameLocation)">
            <summary>Get a location key for looking up location-specific machine data.</summary>
            <param name="location">A machine group's location.</param>
            <returns>The <see cref="T:System.String"/> key for the given <paramref name="location"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.CustomOreNodesIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.CustomOreNodesIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.CustomResourceClumpsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.CustomResourceClumpsIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.LoveOfCookingIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.LoveOfCookingIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.LuckSkillIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.LuckSkillIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.LuckSkillIntegration.LoadLuckSkill">
            <summary>Instantiates and caches the <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/> instance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.SpaceCoreIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.SpaceCoreIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.SpaceCoreIntegration.LoadSpaceCoreSkills">
            <summary>Instantiates and caches one instance of every <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.StardewValleyExpandedIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.StardewValleyExpandedIntegration"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Integrations.StardewValleyExpandedIntegration.DisabeGaldoranTheme">
            <summary>Gets a value indicating whether the <c>DisableGaldoranTheme</c> config setting is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Integrations.StardewValleyExpandedIntegration.UseGaldoranThemeAllTimes">
            <summary>Gets a value indicating whether the <c>UseGaldoranThemeAllTimes</c> config setting is enabled.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.TehsFishingOverhaulIntegration.#cctor">
            <summary>
                Initializes static members of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.TehsFishingOverhaulIntegration"/> class.
                Lazily initializes the static getter fields. This is done lazily in case Teh's Fishing
                Overhaul isn't loaded and the types do not exist. By using expressions instead of
                reflection, we can avoid most of the overhead of dynamically accessing fields.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.TehsFishingOverhaulIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Integrations.TehsFishingOverhaulIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Integrations.TehsFishingOverhaulIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.IProfession">
            <summary>Interface for all of the <see cref="T:StardewValley.Farmer"/>'s professions.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.IProfession.StringId">
            <summary>Gets a string that uniquely identifies this profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.IProfession.Title">
            <summary>Gets the localized and gendered title for this profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.IProfession.Id">
            <summary>Gets the index used in-game to track professions acquired by the player.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.IProfession.Level">
            <summary>Gets the level at which this profession is offered.</summary>
            <remarks>Either 5 or 10.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.IProfession.Skill">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> which offers this profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.IProfession.BranchingProfessions">
            <summary>Gets get the professions which branch off from this profession, if any.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.IProfession.GetDescription(System.Boolean)">
            <summary>Get the localized description text for this profession.</summary>
            <param name="prestiged">Whether to get the prestiged or normal variant.</param>
            <returns>A human-readability <see cref="T:System.String"/> description of the profession.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.ISkill">
            <summary>Interface for all of the <see cref="T:StardewValley.Farmer"/>'s skills.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.ISkill.ExpAtLevel10">
            <summary>The vanilla experience cap.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.StringId">
            <summary>Gets the skill's unique string id.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.DisplayName">
            <summary>Gets the localized in-game name of this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.CurrentExp">
            <summary>Gets the current experience total gained by the local player for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.CurrentLevel">
            <summary>Gets the current level for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.MaxLevel">
            <summary>Gets the highest allowed level for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.ExperienceToNextLevel">
            <summary>Gets the amount of experience required for the next level-up.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.BaseExperienceMultiplier">
            <summary>Gets the base experience multiplier set by the player for this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.PrestigeLevel">
            <summary>Gets this skill's prestige level.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.PrestigeExperienceMultiplier">
            <summary>Gets the experience multiplier due to this skill's prestige level.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.NewLevels">
            <summary>Gets the new levels gained during the current game day, which have not yet been accomplished by an overnight menu.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.Professions">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Professions.IProfession"/>s associated with this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.ProfessionPairs">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Professions.ProfessionPair"/>s offered by this skill.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.ProfessionIds">
            <summary>Gets integer ids used in-game to track professions acquired by the player.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.TierOneProfessionIds">
            <summary>Gets subset of <see cref="P:DaLion.Overhaul.Modules.Professions.ISkill.ProfessionIds"/> containing only the level five profession ids.</summary>
            <remarks>Should always contain exactly 2 elements.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.TierTwoProfessionIds">
            <summary>Gets subset of <see cref="P:DaLion.Overhaul.Modules.Professions.ISkill.ProfessionIds"/> containing only the level ten profession ids.</summary>
            <remarks>
                Should always contains exactly 4 elements. The elements are assumed to be ordered correctly with respect to
                <see cref="P:DaLion.Overhaul.Modules.Professions.ISkill.TierOneProfessionIds"/>, such that elements 0 and 1 in this array correspond to branches of element 0
                in the latter, and elements 2 and 3 correspond to branches of element 1.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ISkill.ExperienceByLevel">
            <summary>Gets the experience required for each level.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.AddExperience(System.Int32)">
            <summary>Adds experience points for this skill.</summary>
            <param name="amount">The amount of experience to add.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.SetLevel(System.Int32)">
            <summary>Sets the level of this skill.</summary>
            <param name="level">The new level.</param>
            <remarks>Will not affect professions or recipes.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.CanReset">
            <summary>Determines whether this skill can be reset for prestige.</summary>
            <returns><see langword="true"/> if the local player meets all reset conditions, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.GetResetCost">
            <summary>Gets the cost of resetting this skill.</summary>
            <returns>A sum of gold to be paid.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.Reset">
            <summary>Resets the skill for prestige.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.ForgetRecipes(System.Boolean)">
            <summary>Removes all recipes associated with this skill from the local player.</summary>
            <param name="saveForRecovery">Whether to store crafted quantities for later recovery.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.Revalidate">
            <summary>Determines whether this skill's level matches the expected level for the current experience, and if not fixes those levels.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.CanResetAny">
            <summary>Determines whether any skill at all can be reset for prestige.</summary>
            <returns><see langword="true"/> if at least one vanilla or loaded custom skill can be reset, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ISkill.RevalidateAll">
            <summary>Revalidates all vanilla and custom skills.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.LuckSkill">
            <summary>Represents spacechase0's implementation of the Luck skill.</summary>
            <remarks>
                This is technically a vanilla skill and therefore does not use SpaceCore in its implementation despite being a
                mod-provided skill. As such, it stands in a murky place, as it is treated like a <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/> despite
                not being implemented as one.
            </remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.LuckSkill.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.LuckSkill.MaxLevel">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.LuckSkill.Instance">
            <summary>Gets the singleton <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/> instance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.LuckSkill.Revalidate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.CharacterInitNetFieldsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.CharacterInitNetFieldsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.CharacterInitNetFieldsPatcher.CharacterInitNetFieldsPostfix(StardewValley.Character)">
            <summary>Patch to add custom net fields.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.AngryRogerUpdateAnimationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.AngryRogerUpdateAnimationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.AngryRogerUpdateAnimationPatcher.AngryRogerUpdateAnimationTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to hide Poacher in ambush from Angry Roger gaze.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.BuffRemoveBuffPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.BuffRemoveBuffPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.DuggyBehaviorAtGameTickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.DuggyBehaviorAtGameTickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.DuggyBehaviorAtGameTickPatcher.DuggyBehaviorAtGameTickTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to hide Poacher from Duggies during Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.DustSpiritBehaviorAtGameTickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.DustSpiritBehaviorAtGameTickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.DustSpiritBehaviorAtGameTickPatcher.DustSpiritBehaviorAtGameTickPostfix(StardewValley.Monsters.DustSpirit,System.Boolean@)">
            <summary>Patch to hide Poacher from Dust Spirits during Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerCurrentToolIndexSetterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerCurrentToolIndexSetterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerCurrentToolIndexSetterPatcher.FarmerCurrentToolIndexPostfix(StardewValley.Farmer,System.Int32)">
            <summary>Set Rascal ammo slots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerEatObjectPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerEatObjectPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerEatObjectPatcher.FarmerEatObjectPrefix">
            <summary>Patch to prevent Frenzied Brute from eating.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.FarmerTakeDamagePatcher.FarmerTakeDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Patch to make Poacher invulnerable in Ambuscade + make Brute unkillable in Frenzy
                + increment Brute rage counter and ultimate meter.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GameLocationDamageMonsterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GameLocationDamageMonsterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Patch to move critical chance bonus from Scout to Poacher + patch Brute damage bonus + move critical damage
                bonus from Desperado to Poacher Ambush + perform Poacher steal and Piper buff actions + increment Piper Ultimate
                meter.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GameLocationIsMonsterDamageApplicablePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GameLocationIsMonsterDamageApplicablePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GameLocationIsMonsterDamageApplicablePatcher.GameLocationIsMonsterDamageApplicablePrefix(System.Boolean@,StardewValley.Farmer,StardewValley.Monsters.Monster)">
            <summary>Patch to make Slimes immune to slime ammo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeCollisionWithFarmerBehaviorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeCollisionWithFarmerBehaviorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeCollisionWithFarmerBehaviorPatcher.GreenSlimeCollisionWithFarmerBehaviorPostfix(StardewValley.Monsters.GreenSlime)">
            <summary>Patch to increment Piper Ultimate meter on contact with Slime.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeDrawPatcher.GreenSlimeDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to fix Green Slime eye and antenna position when inflated.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeGetExtraDropItemsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeGetExtraDropItemsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeGetExtraDropItemsPatcher.GreenSlimeGetExtraDropItemsPostfix(StardewValley.Monsters.GreenSlime,System.Collections.Generic.List{StardewValley.Item})">
            <summary>Patch Slime drop table for Piper.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeOnDealContactDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeOnDealContactDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeOnDealContactDamagePatcher.GreenSlimeOnDealContactDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to make Piper immune to slimed debuff.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeTakeDamagePatcher.MonsterTakeDamagePostfix(StardewValley.Monsters.GreenSlime)">
            <summary>Patch to reset monster aggro when a piped slime is defeated.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.GreenSlimeUpdatePatcher.GreenSlimeUpdatePostfix(StardewValley.Monsters.GreenSlime,Microsoft.Xna.Framework.GameTime)">
            <summary>Patch for Slimes to damage monsters around Piper.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MeleeWeaponDoAnimateSpecialMovePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MeleeWeaponDoAnimateSpecialMovePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MeleeWeaponDoAnimateSpecialMovePatcher.MeleeWeaponDoAnimateSpecialMoveTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to remove Acrobat cooldown reduction.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MeleeWeaponSetFarmerAnimatingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MeleeWeaponSetFarmerAnimatingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MeleeWeaponSetFarmerAnimatingPatcher.MeleeWeaponSetFarmerAnimatingTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to increase prestiged Brute attack speed with rage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MonsterFindPlayerPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MonsterFindPlayerPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MonsterFindPlayerPatcher.MonsterFindPlayerPrefix(StardewValley.Monsters.Monster,StardewValley.Farmer@)">
            <summary>Patch to override monster aggro.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MonsterWithinPlayerThresholdPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MonsterWithinPlayerThresholdPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.MonsterWithinPlayerThresholdPatcher.MonsterWithinPlayerThresholdPrefix(StardewValley.Monsters.Monster,System.Boolean@)">
            <summary>Patch to make Poacher invisible in Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.NpcWithinPlayerThresholdPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.NpcWithinPlayerThresholdPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.NpcWithinPlayerThresholdPatcher.NPCWithinPlayerThresholdPrefix(StardewValley.NPC,System.Boolean@)">
            <summary>Patch to make Poacher invisible in Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotAttachPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotAttachPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotAttachPatcher.SlingshotAttachPrefix(StardewValley.Tools.Slingshot,StardewValley.Object@,StardewValley.Object)">
            <summary>Patch to attach Rascal's additional ammo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotBeginUsingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotBeginUsingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotBeginUsingPatcher.SlingshotBeginUsingPostfix">
            <summary>Patch to trigger Desperado overcharge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCanAutoFirePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCanAutoFirePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCanAutoFirePatcher.SlingshotCanAutoFirePrefix(StardewValley.Tools.Slingshot,System.Boolean@)">
            <summary>Patch to add Desperado auto-fire during Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCanThisBeAttachedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCanThisBeAttachedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCanThisBeAttachedPatcher.SlingshotCanThisBeAttachedPostfix(StardewValley.Tools.Slingshot,System.Boolean@,StardewValley.Object)">
            <summary>Patch to allow Piper equipping Slime ammo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCtorPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCtorPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotCtorPatcher.SlingshotCtorPostfix(StardewValley.Tools.Slingshot)">
            <summary>Add Rascal ammo slot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotDrawAttachmentsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotDrawAttachmentsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotDrawAttachmentsPatcher.SlingshotDrawAttachmentsPostfix(StardewValley.Tools.Slingshot,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>Patch to draw Rascal's additional ammo slot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotGetHoverBoxTextPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotGetHoverBoxTextPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotGetHoverBoxTextPatcher.SlingshotGetHoverBoxTextPrefix(StardewValley.Tools.Slingshot,System.String@,StardewValley.Item)">
            <summary>Adjust tooltip for equipping secondary ammo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotGetRequiredChargeTimePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotGetRequiredChargeTimePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotGetRequiredChargeTimePatcher.SlingshotGetRequiredChargeTimePostfix(StardewValley.Tools.Slingshot,System.Single@)">
            <summary>Patch to reduce Slingshot charge time for Desperado.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotPerformFirePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotPerformFirePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SlingshotPerformFirePatcher.SlingshotPerformFirePrefix(StardewValley.Tools.Slingshot,System.Boolean@,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Patch to add Rascal bonus range damage + perform Desperado perks and Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SquidKidUpdateMonsterSlaveAnimationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SquidKidUpdateMonsterSlaveAnimationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Combat.SquidKidUpdateMonsterSlaveAnimationPatcher.SquidKidUpdateMonsterSlaveAnimationTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to hide Poacher in ambush from Squid Kid gaze.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.GreenSlimeBehaviorAtGameTickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.GreenSlimeBehaviorAtGameTickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.GreenSlimeBehaviorAtGameTickPatcher.GreenSlimeBehaviorAtGameTickPostfix(StardewValley.Monsters.GreenSlime,System.Int32@)">
            <summary>Patch to countdown jump timers.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.GreenSlimeDoJumpPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.GreenSlimeDoJumpPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.GreenSlimeDoJumpPatcher.GreenSlimeDoJumpPrefix(StardewValley.Monsters.GreenSlime)">
            <summary>Patch to detect jumping Slimes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.CraftingRecipeCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.CraftingRecipeCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.CraftingRecipeCtorPatcher.CraftingRecipeCtorPostfix(StardewValley.CraftingRecipe)">
            <summary>Patch for cheaper crafting recipes for Blaster and Tapper.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.CropHarvestPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.CropHarvestPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.CropHarvestPatcher.CropHarvestTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Patch to nerf Ecologist spring onion quality and increment forage counter + always allow iridium-quality crops
                for Agriculturist + Harvester bonus crop yield.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.AnimalHouseAddNewHatchedAnimalPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.AnimalHouseAddNewHatchedAnimalPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.AnimalHouseAddNewHatchedAnimalPatcher.AnimalHouseAddNewHatchedAnimalPostfix(StardewValley.AnimalHouse)">
            <summary>Patch for Rancher newborn animals to have random starting friendship.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalDayUpdatePatcher.FarmAnimalDayUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Patch for Producer to double produce frequency at max animal happiness + remove Shepherd and Coopmaster hidden
                produce quality boosts.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalGetSellPricePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalGetSellPricePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalGetSellPricePatcher.FarmAnimalGetSellPricePrefix(StardewValley.FarmAnimal,System.Int32@)">
            <summary>Patch to adjust Breeder animal sell price.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalPetPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalPetPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.FarmAnimalPetPatcher.FarmAnimalPetTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Rancher to combine Shepherd and Coopmaster friendship bonus.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.HoeDirtApplySpeedIncreases.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.HoeDirtApplySpeedIncreases"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.HoeDirtApplySpeedIncreases.HoeDirtApplySpeedIncreasesTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to increase prestiged Agriculturist crop growth speed.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.ObjectPerformDropDownActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.ObjectPerformDropDownActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.ObjectPerformDropDownActionPatcher.ObjectDayUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to increase production frequency of Producer Bee House.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.QuestionEventSetUpPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Farming.QuestionEventSetUpPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Farming.QuestionEventSetUpPatcher.QuestionEventSetUpTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Breeder to increase barn animal pregnancy chance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.BeachGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.BeachGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.BeachGetFishPatcher.BeachGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for prestiged Angler to recatch Crimsonfish.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.BobberBarUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.BobberBarUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.BobberBarUpdatePatcher.BobberBarUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to slow-down catching bar decrease for Aquarist.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CalderaGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CalderaGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CalderaGetFishPatcher.GameLocationGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Fisher to reroll reeled fish if first roll resulted in trash.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CollectionsPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CollectionsPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CollectionsPageDrawPatcher.CollectionsPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to overlay MAX fish size indicator on the Collections page fish tab.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotCheckForActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotCheckForActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotCheckForActionPatcher.CrabPotCheckForActionPrefix(StardewValley.Objects.CrabPot@,System.Boolean@,System.Boolean@,System.Single@,Microsoft.Xna.Framework.Vector2@,System.Single@,StardewValley.Farmer,System.Boolean)">
            <summary>Patch to handle Luremaster-caught non-trap fish.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotDayUpdatePatcher.CrabPotDayUpdatePrefix(StardewValley.Objects.CrabPot,StardewValley.GameLocation)">
            <summary>Patch for Trapper fish quality + Luremaster bait mechanics + Conservationist trash collection mechanics.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotDrawPatcher.CrabPotDrawPrefix(StardewValley.Objects.CrabPot,Microsoft.Xna.Framework.Vector2,System.Single@,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32)">
            <summary>Patch to draw weapons in Luremaster crabpots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotPerformObjectDropInActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotPerformObjectDropInActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.CrabPotPerformObjectDropInActionPatcher.CrabPotPerformObjectDropInActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to allow Conservationist to place bait.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FarmerHasOrWillReceiveMailPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FarmerHasOrWillReceiveMailPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FarmerHasOrWillReceiveMailPatcher.FarmerHasOrWillReceiveMailPrefix(System.Boolean@,System.String)">
            <summary>Patch to allow receiving multiple letters from the FRS.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FarmerShowItemIntakePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FarmerShowItemIntakePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FarmerShowItemIntakePatcher.FarmerShowItemIntakePrefix(StardewValley.Farmer)">
            <summary>Patch to show weapons during crab pot harvest animation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodCalculateTimeUntilFishingBitePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodCalculateTimeUntilFishingBitePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodCalculateTimeUntilFishingBitePatcher.FishingRodCalculateTimeUntilFishingBitePrefix(StardewValley.Tools.FishingRod,System.Single@)">
            <summary>Patch to reduce prestiged Fisher nibble delay.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodCalculateTimeUntilFishingBitePatcher.FishingRodCalculateTimeUntilFishingBitePostfix(StardewValley.Tools.FishingRod,System.Single@)">
            <summary>Patch to reduce Fisher nibble delay.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodPlayerCaughtFishEndFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodPlayerCaughtFishEndFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodPlayerCaughtFishEndFunctionPatcher.FishingRodPlayerCaughtFishEndFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for remove annoying repeated message for recatching legendary fish.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodPullFishFromWaterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodPullFishFromWaterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodPullFishFromWaterPatcher.FishingRodPullFishFromWaterPrefix(System.Int32)">
            <summary>Count trash fished by rod.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodStartMinigameEndFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodStartMinigameEndFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishingRodStartMinigameEndFunctionPatcher.FishingRodStartMinigameEndFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to remove Pirate bonus treasure chance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishPondIsLegalFishForPondsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishPondIsLegalFishForPondsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishPondIsLegalFishForPondsPatcher.FishPondIsLegalFishForPondsTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for prestiged Aquarist to raise legendary fish.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishPondUpdateMaximumOccupancyPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishPondUpdateMaximumOccupancyPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.FishPondUpdateMaximumOccupancyPatcher.FishPondUpdateMaximumOccupancyPostfix(StardewValley.Buildings.FishPond,StardewValley.GameData.FishPond.FishPondData)">
            <summary>Patch for Aquarist increased max fish pond capacity.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ForestGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ForestGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ForestGetFishPatcher.ForestGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for prestiged Angler to recatch Glacierfish.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.GameLocationGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.GameLocationGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.GameLocationGetFishPatcher.GameLocationGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Fisher to re-roll reeled fish if first roll resulted in trash.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ItemPopulateContextTagsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ItemPopulateContextTagsPatcher"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ItemPopulateContextTagsPatcher.ExtendedFamilyPairs">
            <summary>Gets extended family pairs by legendary fish id.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.ItemPopulateContextTagsPatcher.ItemPopulateContextTagsPostfix(StardewValley.Item,System.Collections.Generic.HashSet{System.String})">
            <summary>Patch to add pair context tag to extended family fish.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.MineShaftGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.MineShaftGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.MineShaftGetFishPatcher.GameLocationGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Fisher to reroll reeled fish if first roll resulted in trash.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.MountainGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.MountainGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.MountainGetFishPatcher.MountainGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for prestiged Angler to recatch Legend.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.PondQueryMenuDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.PondQueryMenuDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.PondQueryMenuDrawPatcher.PondQueryMenuDrawPrefix(StardewValley.Menus.PondQueryMenu,System.Single,Microsoft.Xna.Framework.Rectangle,System.String,System.Boolean,System.String,StardewValley.Object,StardewValley.Buildings.FishPond,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Patch to adjust fish pond query menu for Aquarist increased max capacity.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.SewerGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.SewerGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.SewerGetFishPatcher.SewerGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for prestiged Angler to recatch Mutant Carp.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.TownGetFishPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.TownGetFishPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Fishing.TownGetFishPatcher.TownGetFishTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for prestiged Angler to recatch Angler.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.BushShakePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.BushShakePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.BushShakePatcher.BushShakeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to nerf Ecologist berry quality and increment forage counter for wild berries.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.CropHitWithHoePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.CropHitWithHoePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.CropHitWithHoePatcher.CropHitWithHoeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to apply Ecologist perk to wild ginger.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreeDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreeDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreeDayUpdatePatcher.FruitTreeDayUpdatePostfix(StardewValley.TerrainFeatures.FruitTree)">
            <summary>Patch to increase Abrorist fruit tree growth speed.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreePerformToolActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreePerformToolActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreePerformToolActionPatcher.FruitTreePerformToolActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to add bonus wood for prestiged Lumberjack.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreeTickUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreeTickUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.FruitTreeTickUpdatePatcher.FruitTreeTickUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to add bonus wood for prestiged Lumberjack.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.GameLocationCheckActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.GameLocationCheckActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.GameLocationCheckActionPatcher.GameLocationCheckActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Patch to nerf Ecologist forage quality + add quality to foraged minerals for Gemologist + increment respective
                mod data fields.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.ObjectCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.ObjectCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.ObjectCtorPatcher.ObjectCtorPostfix(StardewValley.Object)">
            <summary>Patch for Ecologist wild berry recovery.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.ResourceClumpPerformToolAction.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.ResourceClumpPerformToolAction"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.ResourceClumpPerformToolAction.ResourceClumpPerformToolActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to add bonus wood for prestiged Lumberjack.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeDayUpdatePatcher.TreeDayUpdatePrefix(StardewValley.TerrainFeatures.Tree,System.Int32@)">
            <summary>Patch to increase Abrorist tree growth odds.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeDayUpdatePatcher.TreeDayUpdatePostfix(StardewValley.TerrainFeatures.Tree,System.Int32)">
            <summary>Patch to increase Abrorist non-fruit tree growth odds.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreePerformBushDestroyPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreePerformBushDestroyPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreePerformBushDestroyPatcher.TreePerformBushDestroyTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to add bonus wood for prestiged Lumberjack.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreePerformTreeFallPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreePerformTreeFallPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreePerformTreeFallPatcher.TreePerformTreeFallTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to add bonus wood for prestiged Lumberjack.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeShakePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeShakePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeShakePatcher.TreeShakeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to apply Ecologist perk to coconuts from shaken trees.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeTickUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeTickUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeTickUpdatePatcher.TreeTickUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to add bonus wood for prestiged Lumberjack.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeUpdateTapperProductPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeUpdateTapperProductPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Foraging.TreeUpdateTapperProductPatcher.TreeUpdateTapperProductPostfix(StardewValley.TerrainFeatures.Tree,StardewValley.Object)">
            <summary>Patch to decrease syrup production time for Tapper.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Game1DrawHudPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Game1DrawHudPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Game1DrawHudPatcher.Game1DrawHUDTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch for Scavenger and Prospector to track different stuff.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.FeedingBasketOverridesDoFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.FeedingBasketOverridesDoFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.FeedingBasketOverridesDoFunctionPatcher.InseminationSyringeOverridesDoFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Rancher to combine Shepherd and Coopmaster friendship bonus.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.InseminationSyringeOverridesDoFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.InseminationSyringeOverridesDoFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.InseminationSyringeOverridesDoFunctionPatcher.InseminationSyringeOverridesDoFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to reduce gestation of animals inseminated by Breeder.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PregnancyControllerAddNewHatchedAnimalPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PregnancyControllerAddNewHatchedAnimalPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PregnancyControllerAddNewHatchedAnimalPatcher.PregnancyControllerAddNewHatchedAnimalTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch for Rancher husbanded animals to have random starting friendship.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.BeeHouseMachineResetPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.BeeHouseMachineResetPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.BeeHouseMachineResetPatcher.ObjectDayUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to increase production frequency of Producer Bee House.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.BushMachineGetOutputPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.BushMachineGetOutputPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.BushMachineGetOutputPatcher.BushMachineGetOutputTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch for automated Berry Bush quality.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.CrabPotMachineGetStatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.CrabPotMachineGetStatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.CrabPotMachineGetStatePatcher.CrabPotMachineGetStateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch for conflicting Luremaster and Conservationist automation rules.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.GenericObjectMachinePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.GenericObjectMachinePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.GenericObjectMachinePatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.GenericObjectMachinePatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.GenericObjectMachinePatcher.GenericObjectMachineTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to apply Artisan effects to automated generic machines.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.TrackedItemCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.TrackedItemCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.TrackedItemCtorPatcher.TrackedItemCtorPrefix(StardewValley.Item@)">
            <summary>Patch to fix collected rings from crab pots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PlantCropsAbilityApplySpeedIncreasesPatcher.PlantCropsAbilityApplySpeedIncreasesTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to apply prestiged Agriculturist crop growth bonus to Better Junimos.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ProfessionsCheatSetProfessionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ProfessionsCheatSetProfessionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ProfessionsCheatSetProfessionPatcher.ProfessionsCheatSetProfessionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to move bonus health from Defender to Brute.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryReloadOreDataPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryReloadOreDataPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryReloadOreDataPatcher.ModEntryReloadOreDataPostfix">
            <summary>Register custom ores.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryGameLoopGameLaunchedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryGameLoopGameLaunchedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryGameLoopGameLaunchedPatcher.ModEntryGameLoopGameLaunchedPostfix">
            <summary>Register custom clumps.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryEventDrawRegenBarPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryEventDrawRegenBarPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ModEntryEventDrawRegenBarPatcher.ModEntryEvent_DrawRegenBarTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to displace food bar.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PropagatorPopExtraHeldMushroomsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PropagatorPopExtraHeldMushroomsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.PropagatorPopExtraHeldMushroomsPatcher.PropagatorPopExtraHeldMushroomsTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch for Propagator output quantity (Harvester) and quality (Ecologist).</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ProducerRuleControllerProduceOutputPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ProducerRuleControllerProduceOutputPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ProducerRuleControllerProduceOutputPatcher.ProducerRuleControllerProduceOutputPostfix(StardewValley.Object,StardewValley.Farmer,StardewValley.Object,System.Boolean)">
            <summary>Patch to apply modded Artisan perks to PFM artisan machines.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ExperienceBarDrawExperienceBarPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ExperienceBarDrawExperienceBarPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ExperienceBarDrawExperienceBarPatcher.ExperienceBarDrawExperienceBarTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to move skill icon to the right.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ExperienceBarGetExperienceRequiredToLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ExperienceBarGetExperienceRequiredToLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Integration.ExperienceBarGetExperienceRequiredToLevelPatcher.ExperienceBarGetExperienceRequiredToLevelPrefix(System.Int32@,System.Int32)">
            <summary>Patch to reflect adjusted base experience + extended progression experience.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuAddProfessionDescriptionsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuAddProfessionDescriptionsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuAddProfessionDescriptionsPatcher.LevelUpMenuAddProfessionDescriptionsPrefix(System.Collections.Generic.List{System.String},System.String)">
            <summary>Patch to apply modded profession descriptions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetImmediateProfessionPerkPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetImmediateProfessionPerkPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetImmediateProfessionPerkPatcher.LevelUpMenuGetImmediateProfessionPerkPostfix(System.Int32)">
            <summary>Patch to add modded immediate profession perks.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetImmediateProfessionPerkPatcher.LevelUpMenuGetImmediateProfessionPerkTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to move bonus health from Defender to Brute.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetProfessionNamePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetProfessionNamePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetProfessionNamePatcher.LevelUpMenuGetProfessionNamePrefix(System.String@,System.Int32)">
            <summary>Patch to apply modded profession names.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetProfessionTitleFromNumberPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetProfessionTitleFromNumberPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuGetProfessionTitleFromNumberPatcher.LevelUpMenuGetProfessionTitleFromNumberPrefix(System.String@,System.Int32)">
            <summary>Patch to apply modded profession names.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRemoveImmediateProfessionPerkPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRemoveImmediateProfessionPerkPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRemoveImmediateProfessionPerkPatcher.LevelUpMenuRemoveImmediateProfessionPerkPostfix(System.Int32)">
            <summary>Patch to remove modded immediate profession perks.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRemoveImmediateProfessionPerkPatcher.LevelUpMenuRemoveImmediateProfessionPerkTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to move bonus health from Defender to Brute.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRevalidateHealthPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRevalidateHealthPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.LevelUpMenuRevalidateHealthPatcher.LevelUpMenuRevalidateHealthPrefix(StardewValley.Farmer)">
            <summary>
                Patch revalidate player health after changes to the combat skill + revalidate fish pond capacity after changes
                to the fishing skill.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.BasicProjectileExplodeOnImpactPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.BasicProjectileExplodeOnImpactPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.BasicProjectileExplodeOnImpactPatcher.BasicProjectileExplodeOnImpactPrefix(StardewValley.GameLocation,System.Int32,System.Int32,StardewValley.Character)">
            <summary>Patch to increase Demolitionist explosive ammo radius.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.Game1CreateObjectDebrisPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.Game1CreateObjectDebrisPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.Game1CreateObjectDebrisPatcher.Game1CreateObjectDebrisPrefix(System.Int32,System.Int32,System.Int32,System.Int64,StardewValley.GameLocation)">
            <summary>Patch for Gemologist mineral quality and increment counter for mined minerals.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationBreakStonePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationBreakStonePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationBreakStonePatcher.GameLocationBreakStoneTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to remove Geologist extra gem chance + remove Prospector double coal chance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationExplodePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationExplodePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationExplodePatcher.GameLocationExplodePostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,System.Int32,StardewValley.Farmer)">
            <summary>Patch for Blaster double coal chance + Demolitionist speed burst.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationOnStoneDestroyedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationOnStoneDestroyedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.GameLocationOnStoneDestroyedPatcher.GameLocationOnStoneDestroyedTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to remove Prospector double coal chance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftCheckActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftCheckActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftCheckActionPatcher.MineShaftCheckActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Increment Spelunker buff on ladder interaction.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftCheckStoneForItemsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftCheckStoneForItemsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftCheckStoneForItemsPatcher.MineShaftCheckStoneForItemsTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>
                Patch for Spelunker ladder down chance bonus + remove Geologist paired gem chance + remove Excavator double
                geode chance + remove Prospector double coal chance.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftEnterMineShaftPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftEnterMineShaftPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.MineShaftEnterMineShaftPatcher.MineShaftEnterMineShaftPostfix">
            <summary>Increment Spelunker buff on shaft interaction.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.ObjectGetMinutesForCrystalariumPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.ObjectGetMinutesForCrystalariumPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.ObjectGetMinutesForCrystalariumPatcher.ObjectGetMinutesForCrystalariumPostfix(StardewValley.Object,System.Int32@)">
            <summary>Patch to speed up crystalarium processing time for each Gemologist.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.ObjectPlacementActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.ObjectPlacementActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.ObjectPlacementActionPatcher.ObjectPlacementActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to prevent quantum bombs when detonating manually.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.TemporaryAnimatedSpriteCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Mining.TemporaryAnimatedSpriteCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Mining.TemporaryAnimatedSpriteCtorPatcher.TemporaryAnimatedSpriteCtorPostfix(StardewValley.TemporaryAnimatedSprite,StardewValley.Farmer)">
            <summary>Patch to increase Demolitionist bomb radius + allow manual detonation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectCheckForActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.ObjectCheckForActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectCheckForActionPatcher.ObjectCheckForActionPrefix(StardewValley.Object,System.Boolean@)">
            <summary>Patch to remember object state.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectCheckForActionPatcher.ObjectCheckForActionPostfix(StardewValley.Object,System.Boolean,StardewValley.Farmer)">
            <summary>Patch to increment Ecologist counter for Mushroom Box.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectCheckForActionPatcher.ObjectCheckForActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to increase production frequency of Producer Bee House.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.ObjectDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectDayUpdatePatcher.ObjectDayUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to increase production frequency of Producer Bee House.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectGetPriceAfterMultipliersPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.ObjectGetPriceAfterMultipliersPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectGetPriceAfterMultipliersPatcher.ObjectGetPriceAfterMultipliersPrefix(StardewValley.Object,System.Single@,System.Single,System.Int64)">
            <summary>Patch to modify price multipliers for various modded professions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectPerformObjectDropInActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.ObjectPerformObjectDropInActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectPerformObjectDropInActionPatcher.ObjectPerformObjectDropInActionPrefix(StardewValley.Object,System.Boolean@)">
            <summary>Patch to remember initial machine state.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectPerformObjectDropInActionPatcher.ObjectPerformObjectDropInActionPostfix(StardewValley.Object,System.Boolean,StardewValley.Item,System.Boolean,StardewValley.Farmer)">
            <summary>Patch to increase Artisan production + integrate Quality Artisan Products.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.ObjectPerformObjectDropInActionPatcher.ObjectPerformObjectDropInActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to reduce prestiged Breeder incubation time + open high-quality Gemologist geodes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerCheckForLevelGainPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerCheckForLevelGainPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerCheckForLevelGainPatcher.FarmerCheckForLevelGainPostfix(System.Int32@,System.Int32,System.Int32)">
            <summary>Patch to allow level increase up to 20.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerGainExperiencePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerGainExperiencePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerGainExperiencePatcher.FarmerGainExperiencePrefix(StardewValley.Farmer,System.Int32,System.Int32@)">
            <summary>Patch to increase skill experience after each prestige + gate at level 10 until full prestige.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerGetProfessionForSkillPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerGetProfessionForSkillPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.FarmerGetProfessionForSkillPatcher.FarmerGetProfessionForSkillPrefix(StardewValley.Farmer,System.Int32@,System.Int32,System.Int32)">
            <summary>Patch to force select most recent profession for skill.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Game1ActiveClickbleMenuSetterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Game1ActiveClickbleMenuSetterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Game1ActiveClickbleMenuSetterPatcher.FarmerStaminaSetterPostfix(StardewValley.Menus.IClickableMenu)">
            <summary>Reload profession sprites on level-up.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationAnswerDialogueActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationAnswerDialogueActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationAnswerDialogueActionPatcher.GameLocationAnswerDialogueActionPrefix(StardewValley.GameLocation,System.Boolean@,System.String)">
            <summary>Patch to change Statue of Uncertainty into Statue of Prestige.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationCanRespecPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationCanRespecPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationCanRespecPatcher.GameLocationCanRespecPrefix(System.Boolean@,System.Int32)">
            <summary>Patch to change Statue of Uncertainty respec from (less than) 10 to (greater than) 10.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationPerformActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationPerformActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.GameLocationPerformActionPatcher.GameLocationPerformActionPrefix(StardewValley.GameLocation,System.String,StardewValley.Farmer)">
            <summary>Patch to change Statue of Uncertainty into Statue of Prestige.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPageCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPageCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPageCtorPatcher.NewSkillsPageCtorPostfix(SpaceCore.Interface.NewSkillsPage,StardewValley.Menus.ClickableTextureComponent,StardewValley.Menus.ClickableTextureComponent,StardewValley.Menus.ClickableTextureComponent,Microsoft.Xna.Framework.Rectangle@)">
            <summary>
                Patch to increase the width of the skills page in the game menu to fit prestige ribbons + color yellow skill
                bars to green for level >10.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPageDrawPatcher.NewSkillsPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to overlay skill bars above skill level 10 + draw prestige ribbons on the skills page.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPagePerformHoverActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPagePerformHoverActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.NewSkillsPagePerformHoverActionPatcher.NewSkillsPagePerformHoverActionPostfix(SpaceCore.Interface.NewSkillsPage,System.Int32,System.Int32,System.String@,System.Int32)">
            <summary>Patch to add prestige ribbon hover text + truncate profession descriptions in hover menu.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuCtorPatcher.LevelUpMenuCtorTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to prevent duplicate profession acquisition + display end of level up dialogues.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuDrawPatcher.SkillLevelUpMenuDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to draw Prestige tooltip during profession selection.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuUpdatePatcher.LevelUpMenuUpdatePrefix(SpaceCore.Interface.SkillLevelUpMenu,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>Patch to idiot-proof the level-up menu. </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillLevelUpMenuUpdatePatcher.SkillLevelUpMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to prevent duplicate profession acquisition.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillsAddExperiencePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillsAddExperiencePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillsAddExperiencePatcher.SkillsAddExperiencePrefix(System.String,System.Int32@)">
            <summary>Patch to apply prestige exp multiplier to custom skills.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillsGetProfessionForPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillsGetProfessionForPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.Integration.SkillsGetProfessionForPatcher.SkillsGetProfessionForPrefix(SpaceCore.Skills.Skill.Profession@,SpaceCore.Skills.Skill,System.Int32)">
            <summary>Patch to apply prestige ordering to skills page profession choices.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuCtorPatcher.LevelUpMenuCtorTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to allow choosing professions above level 10.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuDrawPatcher.LevelUpMenuDrawPrefix(StardewValley.Menus.LevelUpMenu,System.Int32)">
            <summary>Patch to increase the height of Level Up Menu to fit longer profession descriptions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuDrawPatcher.LevelUpMenuDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch to draw Prestige tooltip during profession selection.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuUpdatePatcher.LevelUpMenuUpdatePrefix(StardewValley.Menus.LevelUpMenu,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>Patch to idiot-proof the level-up menu. </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.LevelUpMenuUpdatePatcher.LevelUpMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to prevent duplicate profession acquisition + display end of level up dialogues.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPageCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPageCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPageCtorPatcher.SkillsPageCtorPostfix(StardewValley.Menus.SkillsPage)">
            <summary>
                Patch to increase the width of the skills page in the game menu to fit prestige ribbons + color yellow skill
                bars to green for level >10.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPageDrawPatcher.SkillsPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to overlay skill bars above skill level 10 + draw prestige ribbons on the skills page.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPagePerformHoverActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPagePerformHoverActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Patchers.Prestige.SkillsPagePerformHoverActionPatcher.SkillsPagePerformHoverActionPostfix(StardewValley.Menus.SkillsPage,System.Int32,System.Int32,System.String@)">
            <summary>Patch to add prestige ribbon hover text + truncate profession descriptions in hover menu.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Profession">
            <summary>Represents a vanilla profession.</summary>
            <remarks>
                Includes unused <see cref="N:Ardalis.SmartEnum"/> entries for professions offered by the
                <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/> as a fail-safe, since those are handled as <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/>s.
            </remarks>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Rancher">
            <summary>The Rancher profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Farming"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Harvester">
            <summary>The Harvester profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Farming"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Breeder">
            <summary>The Breeder profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Farming"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Producer">
            <summary>The Producer profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Farming"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Artisan">
            <summary>The Artisan profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Farming"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Agriculturist">
            <summary>The Agriculturist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Farming"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Fisher">
            <summary>The Fisher profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Trapper">
            <summary>The Trapper profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Angler">
            <summary>The Angler profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Aquarist">
            <summary>The Aquarist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Luremaster">
            <summary>The Luremaster profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Conservationist">
            <summary>The Conservationist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Lumberjack">
            <summary>The Lumberjack profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Forager">
            <summary>The Forager profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Arborist">
            <summary>The Arborist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Tapper">
            <summary>The Trapper profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Ecologist">
            <summary>The Ecologist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Scavenger">
            <summary>The Scavenger profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Miner">
            <summary>The Miner profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Mining"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Blaster">
            <summary>The Blaster profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Mining"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Spelunker">
            <summary>The Spelunker profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Mining"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Prospector">
            <summary>The Prospector profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Mining"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Demolitionist">
            <summary>The Demolitionist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Mining"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Gemologist">
            <summary>The Gemologist profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Mining"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Fighter">
            <summary>The Fighter profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Combat"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Rascal">
            <summary>The Rascal profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Combat"/> level 5.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Brute">
            <summary>The Brute profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Combat"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Poacher">
            <summary>The Poacher profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Combat"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Piper">
            <summary>The Piper profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Combat"/> level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Profession.Desperado">
            <summary>The Desperado profession, available at <see cref="F:DaLion.Overhaul.Modules.Professions.Skill.Combat"/> level 10.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Profession.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/> class.</summary>
            <param name="name">The profession name.</param>
            <param name="value">The profession index.</param>
            <param name="level">The level at which the profession is offered (either 5 or 10).</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.StringId">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.Title">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.Id">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.SourceSheetRect">
            <summary>Gets a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing the coordinates of the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/>'s icon in the mod's Professions spritesheet.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.TargetSheetRect">
            <summary>Gets a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing the coordinates of the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/>'s icon in the vanilla Cursors spritesheet.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.Level">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Profession.Skill">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Profession.TryFromLocalizedName(System.String,System.Boolean,DaLion.Overhaul.Modules.Professions.Profession@)">
            <summary>Get the <see cref="T:DaLion.Overhaul.Modules.Professions.Profession"/> with the specified localized name.</summary>
            <param name="name">A localized profession name.</param>
            <param name="ignoreCase">Whether to ignore capitalization.</param>
            <param name="result">The corresponding profession.</param>
            <returns><see langword="true"/> if a matching profession was found, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Profession.GetRange(System.Boolean)">
            <summary>Enumerate the range of indices corresponding to all vanilla professions.</summary>
            <param name="prestige">Whether to enumerate prestige professions instead.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all vanilla profession indices.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Profession.GetDescription(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.ProfessionPair">
            <summary>Represents a pair of profession choices offered to the player during level-up.</summary>
            <param name="First">The first profession in the pair.</param>
            <param name="Second">The second profession in the pair.</param>
            <param name="Requires">The level 5 profession from which this pair branches out of, if this is a level 10 pair.</param>
            <param name="Level">Either <c>5</c> or <c>10</c>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ProfessionPair.#ctor(DaLion.Overhaul.Modules.Professions.IProfession,DaLion.Overhaul.Modules.Professions.IProfession,DaLion.Overhaul.Modules.Professions.IProfession,System.Int32)">
            <summary>Represents a pair of profession choices offered to the player during level-up.</summary>
            <param name="First">The first profession in the pair.</param>
            <param name="Second">The second profession in the pair.</param>
            <param name="Requires">The level 5 profession from which this pair branches out of, if this is a level 10 pair.</param>
            <param name="Level">Either <c>5</c> or <c>10</c>.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ProfessionPair.First">
            <summary>The first profession in the pair.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ProfessionPair.Second">
            <summary>The second profession in the pair.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ProfessionPair.Requires">
            <summary>The level 5 profession from which this pair branches out of, if this is a level 10 pair.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.ProfessionPair.Level">
            <summary>Either <c>5</c> or <c>10</c>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.ProfessionPair.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile">
            <summary>A <see cref="T:StardewValley.Projectiles.BasicProjectile"/> with extra useful properties.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile"/> class.</summary>
            <remarks>Required for multiplayer syncing.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile.#ctor(StardewValley.Item,System.Int32,StardewValley.Tools.Slingshot,StardewValley.Farmer,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile"/> class.</summary>
            <param name="ammo">The <see cref="T:StardewValley.Object"/> that was fired, if any.</param>
            <param name="index">The index of the fired ammo (this may be different from the index of the <see cref="T:StardewValley.Object"/>).</param>
            <param name="source">The <see cref="T:StardewValley.Tools.Slingshot"/> which fired this projectile.</param>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired this projectile.</param>
            <param name="damage">The un-mitigated damage this projectile will cause.</param>
            <param name="knockback">The knockback this projectile will cause.</param>
            <param name="overcharge">The amount of overcharge with which the projectile was fired.</param>
            <param name="startingPosition">The projectile's starting position.</param>
            <param name="xVelocity">The projectile's starting velocity in the horizontal direction.</param>
            <param name="yVelocity">The projectile's starting velocity in the vertical direction.</param>
            <param name="rotationVelocity">The projectile's starting rotational velocity.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile.behaviorOnCollisionWithMonster(StardewValley.NPC,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile.behaviorOnCollisionWithOther(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile.update(Microsoft.Xna.Framework.GameTime,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Projectiles.ObjectProjectile.IsSquishy">
            <summary>Determines whether the projectile should pierce and bounce or make squishy noises upon collision.</summary>
            <returns><see langword="true"/> if the projectile is an egg, fruit, vegetable or slime, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.SCProfession">
            <summary>Represents a profession tied to a mod-provided <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/>.</summary>
            <remarks>This applies to both SpaceCore <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/>s and the special-case <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/>.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCProfession.#ctor(System.Int32,System.String,System.Func{System.String},System.Func{System.String},System.Int32,DaLion.Overhaul.Modules.Professions.ISkill)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/> class.</summary>
            <param name="id">The integer id used in-game to track professions acquired by the player.</param>
            <param name="stringId">The string used by SpaceCore to uniquely identify this profession.</param>
            <param name="getTitle">A function for getting the localized in-game title of this profession.</param>
            <param name="getDescription">A function for getting the localized in-game description of this profession.</param>
            <param name="level">The level at which this profession is offered.</param>
            <param name="skill">The <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> to which this profession belongs.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCProfession.#ctor(SpaceCore.Skills.Skill.Profession,System.Int32,DaLion.Overhaul.Modules.Professions.ISkill)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/> class from an equivalent <see cref="T:SpaceCore.Skills.Skill.Profession"/>.</summary>
            <param name="profession">The equivalent <see cref="T:SpaceCore.Skills.Skill.Profession"/>.</param>
            <param name="level">The level at which this profession is offered.</param>
            <param name="skill">The <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> to which this profession belongs.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.List">
            <summary>Enumerates all the loaded instances of <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.Id">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.StringId">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.Level">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.Skill">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.Title">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCProfession.Loaded">
            <summary>Gets professions for loaded <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/>s.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCProfession.GetAllIds(System.Boolean)">
            <summary>Enumerates all the ids of loaded <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/> instances.</summary>
            <param name="prestige">Whether to enumerate prestige professions instead.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all loaded SpaceCore profession indices.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCProfession.FromSpaceCore(SpaceCore.Skills.Skill.Profession)">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/> equivalent to the specified <see cref="T:SpaceCore.Skills.Skill.Profession"/>.</summary>
            <param name="profession">The <see cref="T:SpaceCore.Skills.Skill.Profession"/>.</param>
            <returns>The equivalent <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCProfession.ToSpaceCore">
            <summary>Gets the <see cref="T:SpaceCore.Skills.Skill.Profession"/> equivalent to this <see cref="T:DaLion.Overhaul.Modules.Professions.SCProfession"/>.</summary>
            <returns>The equivalent <see cref="T:SpaceCore.Skills.Skill.Profession"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCProfession.GetDescription(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.SCSkill">
            <summary>Represents a SpaceCore-provided custom skill.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/> class.</summary>
            <param name="id">The unique id of skill.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.StringId">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.CurrentExp">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.CurrentLevel">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.MaxLevel">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.BaseExperienceMultiplier">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.NewLevels">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.Professions">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.ProfessionPairs">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.Loaded">
            <summary>Gets the currently loaded <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/>s.</summary>
            <remarks>The value type is <see cref="T:DaLion.Overhaul.Modules.Professions.ISkill"/> because this also includes <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/>, which is not a SpaceCore skill.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.SCSkill.CanPrestige">
            <summary>Gets or sets a value indicating whether this skill can gain prestige levels.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.FromSpaceCore(SpaceCore.Skills.Skill)">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/> equivalent to the specified <see cref="T:SpaceCore.Skills.Skill"/>.</summary>
            <param name="skill">The <see cref="T:SpaceCore.Skills.Skill"/>.</param>
            <returns>The equivalent <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.ToSpaceCore">
            <summary>Gets the <see cref="T:SpaceCore.Skills.Skill"/> equivalent to this <see cref="T:DaLion.Overhaul.Modules.Professions.SCSkill"/>.</summary>
            <returns>The equivalent <see cref="T:SpaceCore.Skills.Skill"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.AddExperience(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.SetLevel(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.ForgetRecipes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.SCSkill.Revalidate">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Skill">
            <summary>Represents a vanilla skill.</summary>
            <remarks>
                Despite including a <see cref="N:Ardalis.SmartEnum"/> entry for the Luck skill, that skill is treated specially
                by its own implementation (see <see cref="T:DaLion.Overhaul.Modules.Professions.LuckSkill"/>).
            </remarks>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Skill.Farming">
            <summary>The Farming skill.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Skill.Fishing">
            <summary>The Fishing skill.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Skill.Foraging">
            <summary>The Foraging skill.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Skill.Mining">
            <summary>The Mining skill.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Skill.Combat">
            <summary>The Combat skill.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Skill.Luck">
            <summary>The Luck skill, if loaded.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Skill"/> class.</summary>
            <param name="name">The skill name.</param>
            <param name="value">The skill index.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.StringId">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.CurrentExp">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.CurrentLevel">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.MaxLevel">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.BaseExperienceMultiplier">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.NewLevels">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.Professions">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Skill.ProfessionPairs">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.GetRange">
            <summary>Get the range of indices corresponding to vanilla skills.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all vanilla skill indices.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.AddExperience(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.SetExperience(System.Int32)">
            <summary>Sets the experience points for this skill.</summary>
            <param name="experience">The new amount of experience points.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.SetLevel(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.ForgetRecipes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Skill.Revalidate">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx">
            <summary>A custom <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/> that can be played through the game's <see cref="T:Microsoft.Xna.Framework.Audio.SoundBank"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.BruteRage">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> played when <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy"/> activates.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.PoacherAmbush">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> played when <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush"/> activates.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.PoacherSteal">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> played when a <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Poacher"/> successfully steals an item.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.PiperConcerto">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> played when <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto"/> activates.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.DesperadoBlossom">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> played when <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom"/> activates.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.DogStatuePrestige">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> played when the Statue of Prestige does its magic.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Sounds.Sfx"/> class.</summary>
            <param name="name">The sound effect name.</param>
            <param name="value">The sound effect enum index.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.SinWave">
            <summary>Gets the sound played by a charging <see cref="T:StardewValley.Tools.FishingRod"/> or <see cref="T:StardewValley.Tools.Slingshot"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.Play">
            <summary>Plays the corresponding <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Sounds.Sfx.PlayAfterDelay(System.Int32)">
            <summary>Plays the corresponding <see cref="T:Microsoft.Xna.Framework.Audio.SoundEffect"/> after the specified delay.</summary>
            <param name="delay">The delay in milliseconds.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.State">
            <summary>The runtime state variables for PROFS.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Textures">
            <summary>Caches custom mod textures and related functions.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.HuntNotification">
            <summary>HUD message for treasure hunts.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.HuntNotification.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.HuntNotification"/> class.</summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.HuntNotification.#ctor(System.String,Microsoft.Xna.Framework.Rectangle)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.HuntNotification"/> class.</summary>
            <param name="message">The message to display.</param>
            <param name="iconSourceRect">Source rectangle of the icon to display.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.HuntNotification.draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32)">
            <summary>Draws the notification to the game sprite batch.</summary>
            <param name="b">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="i">Unclear.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt">
            <summary>Interface for treasure hunts.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.Type">
            <summary>
                Gets whether this instance pertains to a <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Scavenger"/> or a
                <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Prospector"/>.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.Location">
            <summary>Gets the active hunt's <see cref="T:StardewValley.GameLocation"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.TreasureTile">
            <summary>Gets the target tile containing treasure.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.IsActive">
            <summary>Gets a value indicating whether the <see cref="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.TreasureTile"/> is set to a valid target.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.TryStart(StardewValley.GameLocation)">
            <summary>Tries to start a new hunt at the specified <paramref name="location"/>.</summary>
            <param name="location">The game location.</param>
            <returns><see langword="true"/> if a hunt was started, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <summary>Forcefully starts a new hunt at the specified <paramref name="location"/>.</summary>
            <param name="location">The game location.</param>
            <param name="target">The target treasure tile.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.Fail">
            <summary>Ends the active hunt unsuccessfully.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt">
            <summary>Manages treasure hunt events for Prospector profession.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.Shaft">
            <summary>Gets the current hunt location as <see cref="T:StardewValley.Locations.MineShaft"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.TryStart(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.Fail">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.ChooseTreasureTile(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.CheckForCompletion">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.End(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ProspectorHunt.GetStoneTreasure(System.Int32)">
            <summary>Spawns hunt spoils as debris.</summary>
            <remarks>Adapted from FishingRod.openTreasureMenuEndFunction.</remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt">
            <summary>Manages treasure hunt events for Scavenger professions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.TryStart(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.Fail">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.ChooseTreasureTile(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.CheckForCompletion">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.End(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.BeginFindTreasure">
            <summary>Plays treasure chest found animation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.OpenChestEndFunction(System.Int32)">
            <summary>Plays open treasure chest animation.</summary>
            <param name="extra">Not applicable.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.OpenTreasureMenuEndFunction(System.Int32)">
            <summary>Opens the treasure chest menu.</summary>
            <param name="extra">Not applicable.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ScavengerHunt.GetTreasureContents">
            <summary>Chooses the contents of the treasure chest.</summary>
            <remarks>Adapted from FishingRod.openTreasureMenuEndFunction.</remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt">
            <summary>Base class for treasure hunts.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.#ctor(DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,System.String,System.String,Microsoft.Xna.Framework.Rectangle)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt"/> class.</summary>
            <param name="type">Either <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Scavenger"/> or <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Prospector"/>.</param>
            <param name="huntStartedMessage">The message displayed to the player when the hunt starts.</param>
            <param name="huntFailedMessage">The message displayed to the player when the hunt fails.</param>
            <param name="iconSourceRect">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/> area of the corresponding profession's icon.</param>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Started">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.OnStarted"/>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Ended">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.OnEnded(System.Boolean)"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Type">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.IsActive">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.TreasureTile">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Location">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Random">
            <summary>Gets a random number generator.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.IconSourceRect">
            <summary>Gets the profession icon source <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.HuntStartedMessage">
            <summary>Gets the hunt started message.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.HuntFailedMessage">
            <summary>Gets the hunt failed message.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Elapsed">
            <summary>Gets or sets the elapsed time of the active hunt.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.TimeLimit">
            <summary>Gets or sets the time limit of the active hunt.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.TryStart(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Fail">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.ResetChanceAccumulator">
            <summary>Reset the accumulated bonus chance to trigger a new hunt.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.Update(System.UInt32)">
            <summary>Check for completion or failure.</summary>
            <param name="ticks">The number of ticks elapsed since the game started.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.TryStart">
            <summary>Rolls the dice for a new treasure hunt or adjusts the odds for the next attempt.</summary>
            <returns><see langword="true"/> if the dice roll was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.ForceStart">
            <summary>Forcefully sets the odds for the next hunt start attempt to 100%.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.ChooseTreasureTile(StardewValley.GameLocation)">
            <summary>Selects a random tile and determines whether it is a valid treasure target.</summary>
            <param name="location">The game location.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> tile.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.CheckForCompletion">
            <summary>Determines whether the treasure tile has been found.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.End(System.Boolean)">
            <summary>Resets treasure tile and releases the treasure hunt update event.</summary>
            <param name="found">Whether the treasure was successfully found.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.OnStarted">
            <summary>Raised when a Treasure Hunt starts.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHunt.OnEnded(System.Boolean)">
            <summary>Raised when a Treasure Hunt ends.</summary>
            <param name="found">Whether the player successfully discovered the treasure.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType">
            <summary>
                The type of <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/>; either <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Scavenger"/> or
                <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Prospector"/>.
            </summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType.Scavenger">
            <summary>A <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Scavenger"/> hunt.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType.Prospector">
            <summary>A <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Prospector"/> hunt.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush">
            <summary>Handles Poacher ultimate activation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.Description">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.Profession">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.MillisecondsDuration">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.ActivationSfx">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.GlowColor">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.IsGrantingCritBuff">
            <summary>Gets a value indicating whether determines whether the double crit. power buff is active.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.Activate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.Deactivate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.Countdown">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ambush.GetBuffPronoun">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto">
            <summary>Handles Piper ultimate activation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.CanActivate">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.Profession">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.MillisecondsDuration">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.ActivationSfx">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.GlowColor">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.SlimeContactTimer">
            <summary>Gets or sets the number of ticks since the latest contact with a Slime.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.Activate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.Deactivate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto.Countdown">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom">
            <summary>Handles Desperado ultimate activation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.Profession">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.MillisecondsDuration">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.ActivationSfx">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.GlowColor">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.Activate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.DeathBlossom.Countdown">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy">
            <summary>Handles Brute ultimate activation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.Profession">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.MillisecondsDuration">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.ActivationSfx">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.GlowColor">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.KillCount">
            <summary>Gets or sets the number of enemies defeated while active.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.Activate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.Deactivate">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Frenzy.Countdown">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate">
            <summary>Interface for Ultimate abilities.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.Profession">
            <summary>Gets the corresponding combat profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.DisplayName">
            <summary>Gets the localized and gendered name for this <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.Description">
            <summary>Gets get the localized description text for this <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.Index">
            <summary>Gets the index of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/>, which equals the index of the corresponding combat profession.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.IsActive">
            <summary>Gets a value indicating whether whether the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> is currently active.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.ChargeValue">
            <summary>Gets or sets the current charge value.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.MaxValue">
            <summary>Gets the maximum charge value.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.CanActivate">
            <summary>Gets a value indicating whether whether all activation conditions for the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> are currently met.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate.IsHudVisible">
            <summary>Gets a value indicating whether whether the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud"/> is currently rendering.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime">
            <summary>A <see cref="T:StardewValley.Monsters.GreenSlime"/> under influence of <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.#ctor(StardewValley.Monsters.GreenSlime,StardewValley.Farmer)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime"/> class.</summary>
            <param name="slime">The <see cref="T:StardewValley.Monsters.GreenSlime"/> instance.</param>
            <param name="piper">The <see cref="T:StardewValley.Farmer"/> who cast <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto"/>.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.Instance">
            <summary>Gets the <see cref="T:StardewValley.Monsters.GreenSlime"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.Piper">
            <summary>Gets the <see cref="T:StardewValley.Farmer"/> who cast <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.PipeTimer">
            <summary>Gets or sets the time left on the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Concerto"/> effect.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.Inflated">
            <summary>Gets a value indicating whether the instance has been fully inflated.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.OriginalHealth">
            <summary>Gets the original health of the instance, before it was piped.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.OriginalRange">
            <summary>Gets the original aggro range of the instance, before it was piped.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.OriginalScale">
            <summary>Gets the original scale of the instance, before it was piped.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.FakeFarmer">
            <summary>Gets the fake <see cref="T:StardewValley.Farmer"/> instance used to aggro other <see cref="T:StardewValley.Monsters.Monster"/>s.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.Inflate">
            <summary>Grows the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime"/> one stage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.Deflate">
            <summary>Shrinks this <see cref="P:DaLion.Overhaul.Modules.Professions.Ultimates.PipedSlime.Piper"/> one stage.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate">
            <summary>Base class for handling Ultimate activation.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.BaseMaxValue">
            <summary>The maximum charge value at base level 10.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.BruteFrenzy">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> of <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Brute"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.PoacherAmbush">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> of <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Poacher"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.PiperConcerto">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> of <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Piper"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.DesperadoBlossom">
            <summary>The <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> of <see cref="F:DaLion.Overhaul.Modules.Professions.Profession.Desperado"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.#ctor(System.String,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> class.</summary>
            <param name="name">The name of the enum entry.</param>
            <param name="value">The value of the enum entry.</param>
            <param name="meterColor">The color applied to the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud"/>.</param>
            <param name="overlayColor">The color of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay"/>.</param>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Activated">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnActivated"/>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Deactivated">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnDeactivated"/>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.ChargeInitiated">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnChargeInitiated(System.Double)"/>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.ChargeIncreased">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnChargeIncreased(System.Double,System.Double)"/>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.FullyCharged">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnFullyCharged"/>
        </member>
        <member name="E:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Emptied">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnEmptied"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Profession">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.DisplayName">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Description">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Index">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.IsActive">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.ChargeValue">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.MaxValue">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.CanActivate">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.IsHudVisible">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.BuffId">
            <summary>Gets the ID of the buff that displays while the instance is active.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.BuffSheetIndex">
            <summary>Gets tilesheet index of the buff that displays while the instance is active.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.MillisecondsDuration">
            <summary>Gets the default duration of the buff.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Hud">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Overlay">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.ActivationSfx">
            <summary>Gets the sound effect that plays when this Ultimate is activated.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.GlowColor">
            <summary>Gets the glow color applied to the player while this Ultimate is active.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Activate">
            <summary>Activates the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> for the local player.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Deactivate">
            <summary>Deactivates the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/> for the local player.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.CheckForActivation">
            <summary>Detects and handles activation input.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.UpdateInput">
            <summary>Updates internal activation state.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.Countdown">
            <summary>Counts down the charge value.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.GetBuffPronoun">
            <summary>Get the localized pronoun for the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/>'s buff.</summary>
            <returns>A localized and gendered pronoun to qualify <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate"/>'s buff.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnActivated">
            <summary>Raised when a player activates their combat Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnDeactivated">
            <summary>Raised when a player's combat Ultimate ends.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnChargeInitiated(System.Double)">
            <summary>Raised when a player's combat Ultimate gains any charge while it was previously empty.</summary>
            <param name="newValue">The new charge value.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnChargeIncreased(System.Double,System.Double)">
            <summary>Raised when a player's combat Ultimate gains any charge.</summary>
            <param name="oldValue">The old charge value.</param>
            <param name="newValue">The new charge value.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnFullyCharged">
            <summary>Raised when the local player's ultimate charge value reaches max value.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.Ultimate.OnEmptied">
            <summary>Raised when the local player's ultimate charge value returns to zero.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateEventAttribute">
            <summary>Specifies that a class is deprecated and should not be available.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud">
            <summary>HUD component to show the player their current Ultimate charge value.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.#ctor(DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate,Microsoft.Xna.Framework.Color)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud"/> class.</summary>
            <param name="ultimate">The <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/> instance that owns this bar.</param>
            <param name="color">The color that will be used to fill the "S" icon above the bar.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.Texture">
            <summary>Gets the texture that will be used to draw the gauge.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.IsVisible">
            <summary>Gets a value indicating whether determines whether the gauge is being drawn.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws the gauge and all it's components to the HUD.</summary>
            <param name="b">A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <remarks>This should be called from a <see cref="T:DaLion.Shared.Events.RenderingHudEvent"/>.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.UpdateShake">
            <summary>Countdown the gauge shake timer .</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.ForceStopShake">
            <summary>Forcefully sets shaking state to <c>False</c>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateHud.FadeOut">
            <summary>Gradually reduces the gauge's opacity value.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay">
            <summary>Fullscreen tinted overlay activated during Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay.#ctor(Microsoft.Xna.Framework.Color)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay"/> class.</summary>
            <param name="color">The overlay <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws the overlay over the world.</summary>
            <param name="b">A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <remarks>This should be called from a <see cref="T:DaLion.Shared.Events.RenderedWorldEvent"/>.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay.FadeIn">
            <summary>Gradually increases the overlay's opacity.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Professions.Ultimates.UltimateOverlay.FadeOut">
            <summary>Gradually decrease the overlay's opacity.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Commands.AddGemstonesCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Commands.AddGemstonesCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Commands.AddGemstonesCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Commands.AddGemstonesCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Commands.AddGemstonesCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Commands.ClearGemstonesCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Commands.ClearGemstonesCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Commands.ClearGemstonesCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Commands.ClearGemstonesCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Commands.ClearGemstonesCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Commands.GetInfinityBandCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Commands.GetInfinityBandCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Commands.GetInfinityBandCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Commands.GetInfinityBandCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Commands.GetInfinityBandCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Config">
            <summary>The user-configurable settings for RNGS.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Config.ResonanceLightsourceTexture">
            <summary>The texture that should be used as the resonance light source.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Config.ResonanceLightsourceTexture.Sconce">
            <summary>The default, Vanilla sconce light texture.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Config.ResonanceLightsourceTexture.Stronger">
            <summary>A more opaque sconce light texture.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Config.ResonanceLightsourceTexture.Patterned">
            <summary>A floral-patterned light texture.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.RebalancedRings">
            <summary>Gets a value indicating whether to improve certain underwhelming rings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.CraftableGemRings">
            <summary>Gets a value indicating whether to add new combat recipes for crafting gemstone rings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.BetterGlowstoneProgression">
            <summary>Gets a value indicating whether to impadd new mining recipes for crafting Glow and Magnet rings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.TheOneInfinityBand">
            <summary>Gets a value indicating whether to replace the Iridium Band recipe and effect.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.EnableResonance">
            <summary>Gets a value indicating whether to allow gemstone resonance to take place.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.ColorfulResonance">
            <summary>Gets a value indicating whether the resonance glow should inherit the root note's color.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Config.LightsourceTexture">
            <summary>Gets a value indicating the texture that should be used as the resonance light source.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.RingAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.RingAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.RingAssetRequestedEvent.EditCraftingRecipesData(StardewModdingAPI.IAssetData)">
            <summary>Edits crafting recipes with new ring recipes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.RingAssetRequestedEvent.EditObjectInformationData(StardewModdingAPI.IAssetData)">
            <summary>Edits object information with rebalanced ring descriptions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.RingAssetRequestedEvent.EditSpringObjectsMaps(StardewModdingAPI.IAssetData)">
            <summary>Edits spring objects with new and custom rings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.RingGameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.RingGameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.RingGameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.SavageUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.SavageUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.SavageUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.WarriorUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.WarriorUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.WarriorUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.WarriorUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.WarriorWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.WarriorWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.WarriorWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.YobaCanReceiveUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.YobaCanReceiveUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.YobaCanReceiveUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.YobaRemoveUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Events.YobaRemoveUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Events.YobaRemoveUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Extensions.ChestExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Objects.Chest"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.ChestExtensions.ConsumeRing(StardewValley.Objects.Chest,System.Int32,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Objects.Ring"/> from the <paramref name="chest"/>'s inventory.</summary>
            <param name="chest">The <see cref="T:StardewValley.Objects.Chest"/>.</param>
            <param name="index">The <see cref="T:StardewValley.Objects.Ring"/> index.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.ChestExtensions.ConsumeObject(StardewValley.Objects.Chest,System.Int32,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Object"/> from the <paramref name="chest"/>'s inventory.</summary>
            <param name="chest">The <see cref="T:StardewValley.Objects.Chest"/>.</param>
            <param name="index">The <see cref="T:StardewValley.Object"/> index.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.FarmerExtensions.GetRingItemCount(StardewValley.Farmer,System.Int32,System.Collections.Generic.IList{StardewValley.Item})">
            <summary>
                Counts the units of a specific <see cref="T:StardewValley.Objects.Ring"/> in the <paramref name="farmer"/>'s inventory, or the
                specified <paramref name="list"/> of items.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="index">The <see cref="T:StardewValley.Objects.Ring"/> index.</param>
            <param name="list">An optional list of items to override the <paramref name="farmer"/>'s inventory.</param>
            <returns>The number of <see cref="T:StardewValley.Objects.Ring"/>s with the specified <paramref name="index"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.FarmerExtensions.ConsumeRing(StardewValley.Farmer,System.Int32,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Objects.Ring"/> from the <paramref name="farmer"/>'s inventory.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="index">The <see cref="T:StardewValley.Objects.Ring"/> index.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.FarmerExtensions.ConsumeObject(StardewValley.Farmer,System.Int32,System.Int32)">
            <summary>Removes the specified <see cref="T:StardewValley.Object"/> from the <paramref name="farmer"/>'s inventory.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="index">The <see cref="T:StardewValley.Object"/> index.</param>
            <param name="amount">How many should be consumed.</param>
            <returns>The leftover amount, if not enough were consumed.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Extensions.Int32Extensions">
            <summary>Extensions for the <see cref="T:System.Int32"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.Int32Extensions.IsRingIndex(System.Int32)">
            <summary>Determines whether the number corresponds to a valid <see cref="T:StardewValley.Objects.Ring"/> index.</summary>
            <param name="index">A <see cref="T:StardewValley.Item"/> index.</param>
            <returns><see langword="true"/> if the <paramref name="index"/> corresponds any <see cref="T:StardewValley.Objects.Ring"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Extensions.RingExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Objects.Ring"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.RingExtensions.IsGemRing(StardewValley.Objects.Ring)">
            <summary>Determines whether the <paramref name="ring"/> is one of the gemstone rings.</summary>
            <param name="ring">The <see cref="T:StardewValley.Objects.Ring"/>.</param>
            <returns>
                <see langword="true"/> if the <paramref name="ring"/>'s index matches any of the gemstone ring indices, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.RingExtensions.IsCombinedInfinityBand(StardewValley.Objects.Ring,StardewValley.Objects.CombinedRing@)">
            <summary>
                Determines whether the <paramref name="ring"/> is a combined instance of Infinity Band, and if so cast to
                <see cref="T:StardewValley.Objects.CombinedRing"/>.
            </summary>
            <param name="ring">The <see cref="T:StardewValley.Objects.Ring"/>.</param>
            <param name="infinity">The ring as a <see cref="T:StardewValley.Objects.CombinedRing"/> instance.</param>
            <returns>
                <see langword="true"/> if the <paramref name="ring"/> can be casted to <see cref="T:StardewValley.Objects.CombinedRing"/>, it's
                index is that of Infinity Band, and it contains combined gemstone rings, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Extensions.ToolExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Objects.Ring"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.ToolExtensions.CanResonateWith(StardewValley.Tool,DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Determines whether the <paramref name="tool"/> has the <see cref="T:StardewValley.BaseWeaponEnchantment"/> which corresponds to the specified <paramref name="gemstone"/>.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <param name="gemstone">A <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</param>
            <returns>
                <see langword="true"/> if the <paramref name="tool"/> has at least one corresponding <see cref="T:StardewValley.BaseWeaponEnchantment"/> to <paramref name="gemstone"/>, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.ToolExtensions.CanResonateWith``1(StardewValley.Tool)">
            <summary>Determines whether the <paramref name="tool"/> has the <see cref="T:StardewValley.BaseWeaponEnchantment"/> which corresponds to the specified <typeparamref name="TGemstone"/>.</summary>
            <typeparam name="TGemstone">A <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> type.</typeparam>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <returns>
                <see langword="true"/> if the <paramref name="tool"/> has at least one corresponding <see cref="T:StardewValley.BaseWeaponEnchantment"/> to <typeparamref name="TGemstone"/>, otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.ToolExtensions.CountEnchantmentsOfType(StardewValley.Tool,DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Counts the number of <see cref="T:StardewValley.BaseWeaponEnchantment"/>s in the <paramref name="tool"/> which correspond to the specified <paramref name="gemstone"/>.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <param name="gemstone">A <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</param>
            <returns>The number of <see cref="T:StardewValley.BaseWeaponEnchantment"/>s in <paramref name="tool"/> which correspond to <paramref name="gemstone"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Extensions.ToolExtensions.CountEnchantmentsOfType``1(StardewValley.Tool)">
            <summary>Counts the number of <see cref="T:StardewValley.BaseWeaponEnchantment"/>s in the <paramref name="tool"/> which correspond to the specified <typeparamref name="TGemstone"/>.</summary>
            <typeparam name="TGemstone">A <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> type.</typeparam>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <returns>The number of <see cref="T:StardewValley.BaseWeaponEnchantment"/>s in <paramref name="tool"/> which correspond to <typeparamref name="TGemstone"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone">
            <summary>A gemstone which can be applied to an Infinity Band.</summary>
            <remarks>
                Each <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> vibrates with a characteristic wavelength, which allows it to resonate with
                others in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> of <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.
            </remarks>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby">
            <summary>The Ruby gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Aquamarine">
            <summary>The Aquamarine gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Amethyst">
            <summary>The Amethyst gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Garnet">
            <summary>The Garnet gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Emerald">
            <summary>The Emerald gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Jade">
            <summary>The Jade gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.Topaz">
            <summary>The Topaz gemstone.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.FromRingDict">
            <summary>Look-up to obtain the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> from a ring index.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Gemstone.RubyScale">
            <summary>The canonical <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> with <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/> as the root.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Single,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> class.</summary>
            <param name="name">The gemstone's name.</param>
            <param name="value">The gemstone's canonical index in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> of <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/>.</param>
            <param name="objectIndex">The index of the corresponding <see cref="T:StardewValley.Object"/>.</param>
            <param name="ringIndex">The index of the corresponding <see cref="T:StardewValley.Objects.Ring"/>.</param>
            <param name="frequency">The characteristic wavelength with which the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> vibrates.</param>
            <param name="stoneColor">The characteristic color of the stone itself.</param>
            <param name="glowColor">The characteristic glow of the emitted lightsource.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.DisplayName">
            <summary>Gets the localized name of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.ObjectIndex">
            <summary>Gets the index of the corresponding <see cref="T:StardewValley.Object"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.RingIndex">
            <summary>Gets the index of the corresponding <see cref="T:StardewValley.Objects.Ring"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Frequency">
            <summary>Gets the characteristic frequency with which the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> vibrates.</summary>
            <remarks>Measured in units of inverse <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/> wavelengths.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.StoneColor">
            <summary>Gets the characteristic color which results from <see cref="P:DaLion.Overhaul.Modules.Rings.Gemstone.Frequency"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.GlowColor">
            <summary>Gets the inverse of <see cref="P:DaLion.Overhaul.Modules.Rings.Gemstone.StoneColor"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.TextColor">
            <summary>Gets the color used to render text. A slightly darker tone of <see cref="P:DaLion.Overhaul.Modules.Rings.Gemstone.StoneColor"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Second">
            <summary>Gets the second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Third">
            <summary>Gets the third <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Fourth">
            <summary>Gets the fourth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Fifth">
            <summary>Gets the fifth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Sixth">
            <summary>Gets the sixth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.Seventh">
            <summary>Gets the seventh <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.EnchantmentType">
            <summary>Gets the corresponding <see cref="T:StardewValley.BaseWeaponEnchantment"/> type.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.IntervalWith(DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>
                Gets the ascending diatonic <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/> between this and some other
                <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.
            </summary>
            <param name="other">Some other <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</param>
            <returns>The <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/> of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/> between this and <paramref name="other"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.Equals(DaLion.Overhaul.Modules.Rings.Gemstone)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.CompareTo(DaLion.Overhaul.Modules.Rings.Gemstone)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.FromRing(System.Int32)">
            <summary>Get the gemstone associated with the specified ring index.</summary>
            <param name="ringIndex">The index of a gemstone ring.</param>
            <returns>The <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> which embedded in the <see cref="T:StardewValley.Objects.Ring"/> with the specified <paramref name="ringIndex"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.TryFromRing(System.Int32,DaLion.Overhaul.Modules.Rings.Gemstone@)">
            <summary>Try to get the gemstone associated with the specified ring index.</summary>
            <param name="ringIndex">The index of a gemstone ring.</param>
            <param name="gemstone">The matched gemstone, if any.</param>
            <returns><see langword="true"/> if a matching gemstone exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.FromType(System.Type)">
            <summary>Get the static gemstone instance with the specified <paramref name="type"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/> of a <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</param>
            <returns>The <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> whose type matches <paramref name="type"/>, if any, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.Resonate(StardewValley.Farmer,System.Single)">
            <summary>
                Resonates with the specified <paramref name="amplitude"/>, adding the corresponding stat bonuses to
                <paramref name="who"/>.
            </summary>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="amplitude">The resonance amplitude.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <summary>Removes the corresponding resonance stat bonuses from <paramref name="who"/>.</summary>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="amplitude">The resonance amplitude.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <summary>Adds the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>'s stat bonus to a buffer.</summary>
            <param name="buffer">Shared buffer of aggregated stat modifiers.</param>
            <param name="magnitude">A multiplier over the base stat modifiers.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.RubyGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AquamarineGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.AmethystGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.GarnetGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.EmeraldGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.JadeGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone.EnchantmentType">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone.Resonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone.Dissonate(StardewValley.Farmer,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Gemstone.TopazGemstone.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer,System.Single)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.IGemstone">
            <summary>A gemstone which can be applied to an Infinity Band.</summary>
            <remarks>
                Each <see cref="T:DaLion.Overhaul.Modules.Rings.IGemstone"/> vibrates with a characteristic wavelength, which allows it to resonate with
                others in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> of <see cref="T:DaLion.Overhaul.Modules.Rings.IGemstone"/>.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.ObjectIndex">
            <summary>Gets the index of the corresponding <see cref="T:StardewValley.Object"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.RingIndex">
            <summary>Gets the index of the corresponding <see cref="T:StardewValley.Objects.Ring"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Frequency">
            <summary>Gets the characteristic frequency with which the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> vibrates.</summary>
            <remarks>Measured in units of inverse <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/> wavelengths.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.StoneColor">
            <summary>Gets the characteristic color which results from <see cref="P:DaLion.Overhaul.Modules.Rings.IGemstone.Frequency"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.GlowColor">
            <summary>Gets the inverse of <see cref="P:DaLion.Overhaul.Modules.Rings.IGemstone.StoneColor"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Second">
            <summary>Gets the second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Third">
            <summary>Gets the third <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Fourth">
            <summary>Gets the fourth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Fifth">
            <summary>Gets the fifth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Sixth">
            <summary>Gets the sixth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.IGemstone.Seventh">
            <summary>Gets the seventh <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the corresponding <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.IGemstone.IntervalWith(DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>
                Gets the ascending diatonic <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/> between this and some other
                <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.
            </summary>
            <param name="other">Some other <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</param>
            <returns>The <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/> of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/> between this and <paramref name="other"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.BetterCraftingIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Integrations.BetterCraftingIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.BetterCraftingIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider">
            <summary>Provides <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> wrappers for Ring recipes with consume other Rings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider.#ctor(DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider"/> class.</summary>
            <param name="api">The Better Crafting API.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider.RecipePriority">
            <summary>
                Gets the priority of this recipe provider, for sorting purposes.
                When handling CraftingRecipe instances, the first provider
                to return a result is used.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider.CacheAdditionalRecipes">
            <summary>
                Gets a value indicating whether whether or not additional recipes from this provider should be
                cached. If the list should be updated every time the player
                opens the menu, this should return false.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider.GetRecipe(StardewValley.CraftingRecipe)">
            <summary>Get an <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> wrapper for a <see cref="T:StardewValley.CraftingRecipe"/>.</summary>
            <param name="recipe">The vanilla <c>CraftingRecipe</c> to wrap.</param>
            <returns>A <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> wrapper, or null if this provider does not handle this recipe.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.RingRecipeProvider.GetAdditionalRecipes(System.Boolean)">
            <summary>
                Get any additional recipes in <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> form. Additional recipes are
                those recipes not included in either <see cref="F:StardewValley.CraftingRecipe.cookingRecipes"/>
                or <see cref="F:StardewValley.CraftingRecipe.craftingRecipes"/>.
            </summary>
            <param name="cooking">Whether we want cooking recipes or crafting recipes.</param>
            <returns>An enumeration of this provider's additional recipes, or null.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.BetterRingsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Integrations.BetterRingsIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.BetterRingsIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.JsonAssetsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Integrations.JsonAssetsIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.JsonAssetsIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.JsonAssetsIntegration.OnIdsAssigned(System.Object,System.EventArgs)">
            <summary>Gets assigned IDs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.VanillaTweaksIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Integrations.VanillaTweaksIntegration"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Integrations.VanillaTweaksIntegration.RingsCategoryEnabled">
            <summary>Gets a value indicating whether the <c>RingsCategoryEnabled</c> config setting is enabled.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.VanillaTweaksIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Integrations.WearMoreRingsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Integrations.WearMoreRingsIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingDrawInMenuPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingDrawInMenuPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingDrawInMenuPatcher.CombinedRingDrawInMenuPrefix(StardewValley.Objects.CombinedRing,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,StardewValley.StackDrawType,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>Draw gemstones on combined Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingDrawInMenuPatcher.CombinedRingDrawInMenuPostfix(StardewValley.Objects.CombinedRing,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single)">
            <summary>Draw gemstones on combined Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingGetOneFromPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingGetOneFromPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingGetOneFromPatcher.CombinedRingGetOneFromPrefix(StardewValley.Objects.CombinedRing,StardewValley.Item)">
            <summary>Changes combined ring to Infinity Band when getting one.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingLoadDisplayFieldsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingLoadDisplayFieldsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingLoadDisplayFieldsPatcher.CombinedRingsLoadDisplayFieldsPrefix(StardewValley.Objects.CombinedRing,System.Boolean@)">
            <summary>Iridium description is always first, and gemstone descriptions are grouped together.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnEquipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnEquipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnEquipPatcher.CombinedRingOnEquipPostfix(StardewValley.Objects.CombinedRing,StardewValley.Farmer)">
            <summary>Add Infinity Band resonance effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnLeaveLocationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnLeaveLocationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnLeaveLocationPatcher.CombinedRingOnLeaveLocationPostfix(StardewValley.Objects.CombinedRing,StardewValley.GameLocation)">
            <summary>Remove Infinity Band resonance location effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnNewLocationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnNewLocationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnNewLocationPatcher.CombinedRingOnNewLocationPostfix(StardewValley.Objects.CombinedRing,StardewValley.GameLocation)">
            <summary>Add Infinity Band resonance location effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnUnequipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnUnequipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingOnUnequipPatcher.CombinedRingOnUnequipPostfix(StardewValley.Objects.CombinedRing,StardewValley.Farmer)">
            <summary>Remove Infinity Band resonance effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CombinedRingUpdatePatcher.CombinedRingUpdatePostfix(StardewValley.Objects.CombinedRing,StardewValley.Farmer)">
            <summary>Update Infinity Band resonances.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeConsumeIngredientsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeConsumeIngredientsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeConsumeIngredientsPatcher.CraftingRecipeConsumeIngredientsPrefix(StardewValley.CraftingRecipe,System.Collections.Generic.IList{StardewValley.Objects.Chest})">
            <summary>Overrides ingredient consumption to allow non-SObject types.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeCtorPatcher.CraftingRecipeCtorPrefix(StardewValley.CraftingRecipe,System.String,System.Boolean)">
            <summary>Fix localized display name for custom ring recipes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeDoesFarmerHaveIngredientsInInventoryPatcher.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeDoesFarmerHaveIngredientsInInventoryPatcher"/>
                class.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeDoesFarmerHaveIngredientsInInventoryPatcher.CraftingRecipeDoesFarmerHaveIngredientsInInventoryPrefix(StardewValley.CraftingRecipe,System.Boolean@,System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Overrides ingredient search to allow non-Ammo types.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeDrawRecipeDescriptionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeDrawRecipeDescriptionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeDrawRecipeDescriptionPatcher.CraftingRecipeDrawRecipeDescriptionPrefix(StardewValley.CraftingRecipe,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Int32,System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Correctly draws recipes with non-Ammo types.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeGetCraftableCountPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeGetCraftableCountPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.CraftingRecipeGetCraftableCountPatcher.CraftingRecipeGetCraftableCountPrefix(StardewValley.CraftingRecipe,System.Int32@,System.Collections.Generic.IList{StardewValley.Item})">
            <summary>Overrides craftable count for non-SObject types.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.FarmerCanBeDamagedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.FarmerCanBeDamagedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.FarmerCanBeDamagedPatcher.FarmerCanBeDamagedPostfix(StardewValley.Farmer,System.Boolean@)">
            <summary>Ring of Yoba rebalance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.FarmerTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.FarmerTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Ring of Thorns and Ring of Yoba rebalance.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuCraftItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuCraftItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuCraftItemPatcher.ForgeMenuCraftItemPostfix(StardewValley.Item@,StardewValley.Item,StardewValley.Item,System.Boolean)">
            <summary>Allow forging Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuGetForgeCostPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuGetForgeCostPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuGetForgeCostPatcher.ForgeMenuGetForgeCostPrefix(System.Int32@,StardewValley.Item,StardewValley.Item)">
            <summary>Modify forge cost for Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuIsValidCraftPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuIsValidCraftPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuIsValidCraftPatcher.ForgeMenuIsValidCraftPostfix(System.Boolean@,StardewValley.Item,StardewValley.Item)">
            <summary>Allow forging Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ForgeMenuUpdatePatcher.ForgeMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Modify unforge behavior of combined Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AmethystEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AmethystEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AmethystEnchantmentApplyToPatcher.AmethystEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Amethyst chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AmethystEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AmethystEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AmethystEnchantmentUnapplyToPatcher.AmethystEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Amethyst chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AquamarineEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AquamarineEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AquamarineEnchantmentApplyToPatcher.AquamarineEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Aquamarine chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AquamarineEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AquamarineEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.AquamarineEnchantmentUnapplyToPatcher.AquamarineEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Aquamarine chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.EmeraldEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.EmeraldEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.EmeraldEnchantmentApplyToPatcher.EmeraldEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Emerald chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.EmeraldEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.EmeraldEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.EmeraldEnchantmentUnapplyToPatcher.EmeraldEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Emerald chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.GarnetEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.GarnetEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.GarnetEnchantmentApplyToPatcher.GarnetEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Garnet chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.GarnetEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.GarnetEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.GarnetEnchantmentUnapplyToPatcher.GarnetEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Garnet chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.JadeEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.JadeEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.JadeEnchantmentApplyToPatcher.JadeEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Jade chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.JadeEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.JadeEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.JadeEnchantmentUnapplyToPatcher.JadeEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Jade chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.RubyEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.RubyEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.RubyEnchantmentApplyToPatcher.RubyEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Ruby chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.RubyEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.RubyEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.RubyEnchantmentUnapplyToPatcher.RubyEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Ruby chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.TopazEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.TopazEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.TopazEnchantmentApplyToPatcher.TopazEnchantmentApplyToPostfix(StardewValley.Item)">
            <summary>Resonate with Topaz chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.TopazEnchantmentUnapplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Forges.TopazEnchantmentUnapplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Forges.TopazEnchantmentUnapplyToPatcher.TopazEnchantmentUnapplyToPostfix(StardewValley.Item)">
            <summary>Remove resonance with Topaz chord.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Game1DrawHudPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Game1DrawHudPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Game1DrawHudPatcher.Game1DrawHUDTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Patch draw over-healed health.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuCraftItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuCraftItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuCraftItemPatcher.NewForgeMenuCraftItemPostfix(StardewValley.Item@,StardewValley.Item,StardewValley.Item,System.Boolean)">
            <summary>Allow forging Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuGetForgeCostPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuGetForgeCostPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuGetForgeCostPatcher.NewForgeMenuGetForgeCostPrefix(System.Int32@,StardewValley.Item,StardewValley.Item)">
            <summary>Modify forge cost of Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuIsValidCraftPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuIsValidCraftPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuIsValidCraftPatcher.NewForgeMenuIsValidCraftPostfix(System.Boolean@,StardewValley.Item,StardewValley.Item)">
            <summary>Allow forging Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.Integration.NewForgeMenuUpdatePatcher.NewForgeMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Modify unforge behavior of combined Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.LightSourceLoadTextureFromConstantValuePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.LightSourceLoadTextureFromConstantValuePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.LightSourceLoadTextureFromConstantValuePatcher.LightSourceLoadTextureFromConstantValuePostfix(StardewValley.LightSource,System.Int32)">
            <summary>Load custom phase light textures.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.MeleeWeaponDoAnimateSpecialMovePatcher.MeleeWeaponDoAnimateSpecialMovePostfix(StardewValley.Tools.MeleeWeapon)">
            <summary>Implement Garnet ring CDR.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingCanCombinePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingCanCombinePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingCanCombinePatcher.RingCanCombinePrefix(StardewValley.Objects.Ring,System.Boolean@,StardewValley.Objects.Ring)">
            <summary>Allows feeding up to four gemstone rings into an Infinity Band.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingCombinePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingCombinePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingCombinePatcher.RingCombinePrefix(StardewValley.Objects.Ring,StardewValley.Objects.Ring@,StardewValley.Objects.Ring)">
            <summary>Changes combined ring to Infinity Band when combining.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingDrawInMenuPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingDrawInMenuPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingDrawInMenuPatcher.RingDrawInMenuReverse(System.Object,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,StardewValley.StackDrawType,Microsoft.Xna.Framework.Color,System.Boolean)">
            <summary>Stub for base <see cref="M:StardewValley.Objects.Ring.drawInMenu(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,StardewValley.StackDrawType,Microsoft.Xna.Framework.Color,System.Boolean)"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingDrawTooltipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingDrawTooltipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingDrawTooltipPatcher.RingDrawTooltipPrefix(StardewValley.Objects.Ring,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single)">
            <summary>Draw combined Infinity Band effects in tooltip.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingGetExtraSpaceNeededForTooltipSpecialIconsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingGetExtraSpaceNeededForTooltipSpecialIconsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingGetExtraSpaceNeededForTooltipSpecialIconsPatcher.RingGetExtraSpaceNeededForTooltipSpecialIconsPostfix(StardewValley.Objects.Ring,Microsoft.Xna.Framework.Point@,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>Fix combined Infinity Band tooltip box height.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnEquipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingOnEquipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnEquipPatcher.RingOnEquipPrefix(StardewValley.Objects.Ring,StardewValley.Farmer)">
            <summary>Rebalances Jade and Topaz rings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnLeaveLocationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingOnLeaveLocationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnLeaveLocationPatcher.RingOnLeaveLocationPrefix(StardewValley.Objects.Ring)">
            <summary>Rebalances Jade and Topaz rings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnMonsterSlayPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingOnMonsterSlayPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnMonsterSlayPatcher.RingOnMonsterSlayPrefix(StardewValley.Objects.Ring,StardewValley.Farmer)">
            <summary>Jinx up the Savage and Warrior ring.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnNewLocationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingOnNewLocationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnNewLocationPatcher.RingOnNewLocationPrefix(StardewValley.Objects.Ring)">
            <summary>Rebalances Jade and Topaz rings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnUnequipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.RingOnUnequipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.RingOnUnequipPatcher.RingOnUnequipPrefix(StardewValley.Objects.Ring,StardewValley.Farmer)">
            <summary>Rebalances Jade and Topaz rings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ToolActionWhenBeingHeldPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.ToolActionWhenBeingHeldPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ToolActionWhenBeingHeldPatcher.ToolActionWhenBeingHeldPostfix(StardewValley.Tool,StardewValley.Farmer)">
            <summary>Reset applied arsenal resonances.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ToolActionWhenStopBeingHeldPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Patchers.ToolActionWhenStopBeingHeldPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Patchers.ToolActionWhenStopBeingHeldPatcher.ToolActionWhenStopBeingHeldPostfix(StardewValley.Tool)">
            <summary>Reset applied arsenal resonances.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IChord"/>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.#ctor(DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/> class.Construct a Dyad instance.</summary>
            <param name="first">The first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Dyad.</param>
            <param name="second">The second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the  Dyad.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.#ctor(DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/> class.Construct a Triad instance.</summary>
            <param name="first">The first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Triad.</param>
            <param name="second">The second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Triad.</param>
            <param name="third">The third <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Triad.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.#ctor(DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/> class.Construct a Tetrad instance.</summary>
            <param name="first">The first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Tetrad.</param>
            <param name="second">The second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Tetrad.</param>
            <param name="third">The third <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Tetrad.</param>
            <param name="fourth">The fourth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the Tetrad.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Notes">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Root">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Amplitude">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.Chord.ResonanceByGemstone">
            <summary>Gets the total resonance of each <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> due to interference with its neighbors.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Apply(StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Adds resonance stat bonuses to the farmer.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Unapply(StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Removes resonating stat bonuses from the farmer.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.OnNewLocation(StardewValley.GameLocation)">
            <summary>Adds resonance effects to the new <paramref name="location"/>.</summary>
            <param name="location">The new location.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.OnLeaveLocation(StardewValley.GameLocation)">
            <summary>Removes resonance effects from the old <paramref name="location"/>.</summary>
            <param name="location">The left location.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Update(StardewValley.Farmer)">
            <summary>Updates resonance effects.</summary>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Buffer(DaLion.Overhaul.Modules.Rings.StatBuffer)">
            <summary>Adds the total resonance stat bonuses to the <paramref name="buffer"/>.</summary>
            <param name="buffer">A <see cref="T:DaLion.Overhaul.Modules.Rings.StatBuffer"/> for aggregating stat bonuses.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.InitializeLightSource">
            <summary>Initializes the <see cref="F:DaLion.Overhaul.Modules.Rings.Resonance.Chord._lightSource"/> if a resonant harmony exists in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.ResetLightSource">
            <summary>Initializes the <see cref="F:DaLion.Overhaul.Modules.Rings.Resonance.Chord._lightSource"/> if a resonant harmony exists in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Harmonize">
            <summary>Evaluate the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s between <see cref="P:DaLion.Overhaul.Modules.Rings.Resonance.Chord.Notes"/> and the resulting harmonies.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.Chord.GetLightSourceRadius">
            <summary>Evaluates the current amplitude of the <see cref="F:DaLion.Overhaul.Modules.Rings.Resonance.Chord._lightSource"/>.</summary>
            <returns>The amplitude of the <see cref="F:DaLion.Overhaul.Modules.Rings.Resonance.Chord._lightSource"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale">
            <summary>A heptatonic scale that includes five whole steps (whole tones) and two half steps (semitones) in each octave.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> struct with
                <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/> as the root <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.#ctor(DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>
                Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> struct with the
                specified root <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.
            </summary>
            <param name="root">The <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> with which is the root of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> struct.Constructs an instance, with the
                <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> at the specified index in the <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/> scale as the root..
            </summary>
            <param name="indexInRubyScale">
                The index of the root <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the canonical
                <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/> of <see cref="F:DaLion.Overhaul.Modules.Rings.Gemstone.Ruby"/>.
            </param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.Notes">
            <summary>Gets the ordered set of <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>s that make up the notes in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.Root">
            <summary>Gets the first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.Item(System.Int32)">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> at the specified <paramref name="index"/>.</summary>
            <param name="index">A <see cref="T:System.Int32"/> index.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.IndexOf(DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Gets the index of the specified <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the current <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
            <param name="gemstone">Some <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>.</param>
            <returns>The <see cref="T:System.Int32"/> index of the <paramref name="gemstone"/> in the current <seealso cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.Transpose(System.Int32)">
            <summary>Shift all notes to the left by the specified <paramref name="count"/>.</summary>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale.Transpose(DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber)">
            <summary>Shift all notes to the left by the specified <paramref name="interval"/>.</summary>
            <param name="interval">The <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/>.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber">
            <summary>The number of steps between two <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>s in a <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Unison">
            <summary>Zero. Both <see cref="T:DaLion.Overhaul.Modules.Rings.IGemstone"/>s are identical.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Second">
            <summary>The second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Third">
            <summary>The third <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Fourth">
            <summary>The fourth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Fifth">
            <summary>The fifth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>, also known as the Dominant.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Sixth">
            <summary>The sixth <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Seventh">
            <summary>The seventh <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Octave">
            <summary>A full scale. Effectively the same as <see cref="F:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber.Unison"/>.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumberExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/> enum.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumberExtensions.Inverse(DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber)">
            <summary>Gets the complement of the specified <paramref name="intervalNumber"/>.</summary>
            <param name="intervalNumber">The <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/>.</param>
            <returns>The complement of <paramref name="intervalNumber"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval">
            <summary>The difference in pitch between a <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> pair.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.#ctor(DaLion.Overhaul.Modules.Rings.Gemstone,DaLion.Overhaul.Modules.Rings.Gemstone)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/> class.</summary>
            <param name="first">The first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the pair.</param>
            <param name="second">The second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the pair.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.First">
            <summary>Gets the first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the pair.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.Second">
            <summary>Gets the second <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in the pair.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.Number">
            <summary>Gets the number of steps between <see cref="P:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.First"/> and <see cref="P:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.Second"/> in a <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.DiatonicScale"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.op_Addition(DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval,DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval)">
            <summary>Adds two <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s.</summary>
            <param name="a">The first <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>.</param>
            <param name="b">The second <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>.</param>
            <returns>The sum of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicIntervalMatrixExtensions">
            <summary>Extensions for matrices for <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicIntervalMatrixExtensions.GroupByIntervalNumber(DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval[][])">
            <summary>Groups the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in the specified <paramref name="intervalMatrix"/> by their respective <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/>s.</summary>
            <param name="intervalMatrix">A 2D matrix of <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in a <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</param>
            <returns>An <see cref="T:System.Linq.ILookup`2"/> of all <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in the <paramref name="intervalMatrix"/> by their respective <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/>s.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicIntervalMatrixExtensions.GroupByGemstone(DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval[][])">
            <summary>Groups the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in the specified <paramref name="intervalMatrix"/> by the first <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> in each interval pair.</summary>
            <param name="intervalMatrix">A 2D matrix of <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in a <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</param>
            <returns>An <see cref="T:System.Linq.ILookup`2"/> of all <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in the <paramref name="intervalMatrix"/> by their respective <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/>s.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicIntervalMatrixExtensions.GroupByNotePosition(DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval[][])">
            <summary>Groups the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in the specified <paramref name="intervalMatrix"/> by the position of <see cref="P:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval.First"/> in the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</summary>
            <param name="intervalMatrix">A 2D matrix of <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in a <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</param>
            <returns>An <see cref="T:System.Linq.ILookup`2"/> of all <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.HarmonicInterval"/>s in the <paramref name="intervalMatrix"/> by their respective <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IntervalNumber"/>s.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Resonance.IChord">
            <summary>A harmonic set of <see cref="T:DaLion.Overhaul.Modules.Rings.IGemstone"/> wavelengths.</summary>
            <remarks>
                The interference of vibration patterns between neighboring <see cref="T:DaLion.Overhaul.Modules.Rings.IGemstone"/>s may amplify, dampen or
                even create new overtones.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.IChord.Notes">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/>s that make up the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.Chord"/>.</summary>
            <remarks>
                The notes are sorted by resulting harmony, with the <see cref="P:DaLion.Overhaul.Modules.Rings.Resonance.IChord.Root"/> at index zero and remaining notes
                ordered by increasing intervals with the former.
            </remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.IChord.Root">
            <summary>
                Gets the root <see cref="T:DaLion.Overhaul.Modules.Rings.Gemstone"/> of the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IChord"/>, which determines the
                perceived wavelength.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.Resonance.IChord.Amplitude">
            <summary>Gets the amplitude of the <see cref="P:DaLion.Overhaul.Modules.Rings.Resonance.IChord.Root"/> note's resonance.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.StatBuffer">
            <summary>A buffer for aggregating stat bonuses.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.StatBuffer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.StatBuffer"/> class.Constructs an instance, initializing all
                stat bonuses to zero.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.StatBuffer.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Rings.StatBuffer"/> class.Constructs an instance, initializing all
                stat bonuses to the specified values.
            </summary>
            <param name="damageModifier">The damage modifier.</param>
            <param name="critChanceModifier">The critical chance modifier.</param>
            <param name="critPowerModifier">The critical power modifier.</param>
            <param name="knockbackModifier">The knockback modifier.</param>
            <param name="precisionModifier">The precision modifier.</param>
            <param name="swingSpeedModifier">The swing speed modifier.</param>
            <param name="cooldownReduction">The cooldown reduction.</param>
            <param name="defenseModifier">The added defense.</param>
            <param name="addedMagneticRadius">The added magnetic radius.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.MagneticRadius">
            <summary>Gets or sets the added magnetic radius.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.CooldownReduction">
            <summary>Gets or sets the cooldown reduction.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.CritChanceModifier">
            <summary>Gets or sets the critical chance modifier.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.CritPowerModifier">
            <summary>Gets or sets the critical power modifier.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.DamageModifier">
            <summary>Gets or sets the damage modifier.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.DefenseModifier">
            <summary>Gets or sets the added defense.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.KnockbackModifier">
            <summary>Gets or sets the knockback modifier.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.PrecisionModifier">
            <summary>Gets or sets the precision modifier.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Rings.StatBuffer.SwingSpeedModifier">
            <summary>Gets or sets the swing speed modifier.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.StatBuffer.Any">
            <summary>Determines whether any of the buffered stats is non-zero.</summary>
            <returns><see langword="true"/> if at least one of the buffered stats is greater than zero, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Rings.StatBuffer.Count">
            <summary>Gets the number of non-zero buffered stats.</summary>
            <returns>The number of non-zero buffered stats.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.State">
            <summary>The runtime state variable for RNGS.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Rings.Textures">
            <summary>Caches custom mod textures and related functions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Commands.FireProjectileCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Commands.FireProjectileCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Commands.FireProjectileCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Commands.FireProjectileCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Commands.FireProjectileCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.Config">
            <summary>The user-configurable settings for SLNGS.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.EnableRebalance">
            <summary>Gets a value indicating whether to re-balance the damage and knockback modifiers of Slingshots.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.EnableCriticalHits">
            <summary>Gets a value indicating whether to allow slingshots to deal critical damage and be affected by critical modifiers.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.EnableEnchantments">
            <summary>Gets a value indicating whether to allow slingshots to be enchanted with weapon forges (gemstones) at the Forge.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.EnableSpecialMove">
            <summary>Gets a value indicating whether to enable the custom slingshot stun smack special move.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.EnableInfinitySlingshot">
            <summary>Gets a value indicating whether to allow forging the Infinity Slingshot.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.DisableGracePeriod">
            <summary>Gets a value indicating whether projectiles should not be useless for the first 100ms.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.BullseyeReplacesCursor">
            <summary>Gets a value indicating whether to replace the mouse cursor with a bulls-eye while firing.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.FaceMouseCursor">
            <summary>Gets a value indicating whether face the current cursor position before swinging your slingshot (for special moves).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.SlickMoves">
            <summary>Gets a value indicating whether to allow drifting in the movement direction when charging slingshots.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.EnableAutoSelection">
            <summary>Gets a value indicating whether to allow auto-selecting a slingshot.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.SelectionKey">
            <summary>Gets the chosen mod key(s).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.SelectionBorderColor">
            <summary>Gets the <see cref="T:Microsoft.Xna.Framework.Color"/> used to indicate tools enabled for auto-selection.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Config.AutoSelectionRange">
            <summary>Gets a value indicating how close an enemy must be to auto-select a slingshot, in tiles.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Slingshots"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.BullseyeRenderedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.BullseyeRenderedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.BullseyeRenderedEvent.OnRenderedImpl(System.Object,StardewModdingAPI.Events.RenderedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlickMovesUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlickMovesUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlickMovesUpdateTickingEvent.OnUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotArtfulSpecialUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotArtfulSpecialUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotArtfulSpecialUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotAssetRequestedEvent.EditWeaponsData(StardewModdingAPI.IAssetData)">
            <summary>Edits weapons data with Infinity Slingshot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotAssetRequestedEvent.EditWeaponsTileSheet(StardewModdingAPI.IAssetData)">
            <summary>Edits weapons tilesheet with touched up textures.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotButtonPressedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSavingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSavingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSavingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSavingEvent.OnSavingImpl(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSpecialUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSpecialUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Events.SlingshotSpecialUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.FarmerExtensions.GetTotalFiringSpeedModifier(StardewValley.Farmer,StardewValley.Tools.Slingshot)">
            <summary>Gets the total firing speed modifier for the <paramref name="farmer"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="slingshot">The <paramref name="farmer"/>'s slingshot.</param>
            <returns>The total firing speed modifier, a number between 0 and 1.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.FarmerExtensions.IsSteppingOnSnow(StardewValley.Farmer)">
            <summary>Determines whether the <paramref name="farmer"/> is stepping on a snowy tile.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the corresponding <see cref="T:StardewValley.FarmerSprite"/> is using snowy step sounds, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Tools.Slingshot"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.AnimateSpecialMove(StardewValley.Tools.Slingshot)">
            <summary>Analogous to <see cref="M:StardewValley.Tools.MeleeWeapon.animateSpecialMove(StardewValley.Farmer)"/>.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.BeginSpecialMove(StardewValley.Tools.Slingshot,StardewValley.Farmer)">
            <summary>Analogous to "MeleeWeapon.beginSpecialMove".</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> using the <paramref name="slingshot"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.DoDamage(StardewValley.Tools.Slingshot,System.Int32,System.Int32,StardewValley.Farmer)">
            <summary>Analogous to <see cref="M:StardewValley.Tools.MeleeWeapon.DoDamage(StardewValley.GameLocation,System.Int32,System.Int32,System.Int32,System.Int32,StardewValley.Farmer)"/>.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="x">The X pixel position of the <paramref name="slingshot"/>.</param>
            <param name="y">The Y pixel position of the <paramref name="slingshot"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> using the <paramref name="slingshot"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.GetAreaOfEffect(StardewValley.Tools.Slingshot,System.Int32,System.Int32,StardewValley.Farmer)">
            <summary>Analogous to <see cref="M:StardewValley.Tools.MeleeWeapon.getAreaOfEffect(System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Rectangle,System.Int32)"/>.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="x">The target x-coordinate.</param>
            <param name="y">The target y-coordinate.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> using the <paramref name="slingshot"/>.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing the attack's area of effect.</returns>
            <remarks>Doesn't need to <see langword="switch"/> based on weapon type, so the <see cref="T:StardewValley.Tools.Slingshot"/> instance itself is unused.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.DrawDuringUse(StardewValley.Tools.Slingshot,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,Microsoft.Xna.Framework.Rectangle)">
            <summary>Analogous to <see cref="M:StardewValley.Tools.MeleeWeapon.drawDuringUse(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,Microsoft.Xna.Framework.Rectangle,System.Int32,System.Boolean)"/>, for overhead swipes (smash).</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="frameOfFarmerAnimation">The frame of the <see cref="T:StardewValley.Farmer"/>'s current animation.</param>
            <param name="facingDirection">The <see cref="T:StardewValley.Farmer"/>'s facing direction.</param>
            <param name="b">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="playerPosition">The <see cref="T:StardewValley.Farmer"/>'s position.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> using the <paramref name="slingshot"/>.</param>
            <param name="sourceRect">The source <see cref="T:Microsoft.Xna.Framework.Rectangle"/> of the <paramref name="slingshot"/>'s texture.</param>
            <remarks>Doesn't need to <see langword="switch"/> based on weapon type, so the <see cref="T:StardewValley.Tools.Slingshot"/> instance itself is unused.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.DrawDuringArtfulUse(StardewValley.Tools.Slingshot,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,Microsoft.Xna.Framework.Rectangle)">
            <summary>Analogous to <see cref="M:StardewValley.Tools.MeleeWeapon.drawDuringUse(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,Microsoft.Xna.Framework.Rectangle,System.Int32,System.Boolean)"/>, for horizontal swipes.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="frameOfFarmerAnimation">The frame of the <see cref="T:StardewValley.Farmer"/>'s current animation.</param>
            <param name="facingDirection">The <see cref="T:StardewValley.Farmer"/>'s facing direction.</param>
            <param name="b">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="playerPosition">The <see cref="T:StardewValley.Farmer"/>'s position.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> using the <paramref name="slingshot"/>.</param>
            <param name="sourceRect">The source <see cref="T:Microsoft.Xna.Framework.Rectangle"/> of the <paramref name="slingshot"/>'s texture.</param>
            <remarks>Doesn't need to <see langword="switch"/> based on weapon type, so the <see cref="T:StardewValley.Tools.Slingshot"/> instance itself is unused.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Extensions.SlingshotExtensions.ShowSwordSwipe(StardewValley.Tools.Slingshot,StardewValley.Farmer)">
            <summary>Analogous to <see cref="M:StardewValley.Farmer.showSwordSwipe(StardewValley.Farmer)"/>.</summary>
            <param name="slingshot">The <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/> using the <paramref name="slingshot"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher.BaseEnchantmentGetEnchantmentFromItemPostfix(StardewValley.BaseEnchantment@,StardewValley.Item,StardewValley.Item)">
            <summary>Allow Galaxy Soul forge into Galaxy Slingshot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseEnchantmentGetEnchantmentFromItemPatcher.BaseEnchantmentGetEnchantmentFromItemTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Allow Slingshot gemstone enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseWeaponEnchantmentCanApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseWeaponEnchantmentCanApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BaseWeaponEnchantmentCanApplyToPatcher.BaseWeaponEnchantmentCanApplyToPostfix(StardewValley.BaseWeaponEnchantment,System.Boolean@,StardewValley.Item)">
            <summary>Allow Slingshot gemstone enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BasicProjectileExplosionAnimationPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.BasicProjectileExplosionAnimationPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.BasicProjectileExplosionAnimationPatcher.BasicProjectileExplosionAnimationPostfix(StardewValley.Projectiles.BasicProjectile,StardewValley.GameLocation)">
            <summary>
                Snowball collision animation, which prefers <see cref="F:StardewValley.Projectiles.Projectile.position"/> instead of the <see cref="P:Microsoft.Xna.Framework.Rectangle.Center"/>
                of <see cref="M:StardewValley.Projectiles.Projectile.getBoundingBox"/>.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ForgeMenuIsValidUnforgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ForgeMenuIsValidUnforgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ForgeMenuIsValidUnforgePatcher.ForgeMenuIsValidUnforgePostfix(StardewValley.Menus.ForgeMenu,System.Boolean@)">
            <summary>Allow unforging Slingshots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ForgeMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ForgeMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ForgeMenuUpdatePatcher.ForgeMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Implement unforge behavior of Slingshot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1DrawMouseCursorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1DrawMouseCursorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1DrawMouseCursorPatcher.Game1DrawMouseCursorPrefix">
            <summary>Hide mouse behind bullseye.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1DrawToolPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1DrawToolPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1DrawToolPatcher.Game1DrawToolPrefix(StardewValley.Farmer)">
            <summary>Draw slingshot during stunning slam.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1PressActionButtonPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1PressActionButtonPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Game1PressActionButtonPatcher.Game1PressActionButtonPostfix(System.Boolean@)">
            <summary>Trigger slingshot special move.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.GameLocationDamageMonsterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.GameLocationDamageMonsterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Guaranteed crit on underground Duggy from club smash attack + record knockback and crit + slingshot special stun.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.IClickableMenuDrawHoverTextPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.IClickableMenuDrawHoverTextPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.IClickableMenuDrawHoverTextPatcher.IClickableMenuDrawHoverTextTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Adds "Forged" text to Slingshots.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Integration.NewForgeMenuIsValidUnforgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.Integration.NewForgeMenuIsValidUnforgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Integration.NewForgeMenuIsValidUnforgePatcher.NewForgeMenuIsValidUnforgePostfix(SpaceCore.Interface.NewForgeMenu,System.Boolean@)">
            <summary>Allow unforge Slingshot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Integration.NewForgeMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.Integration.NewForgeMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.Integration.NewForgeMenuUpdatePatcher.NewForgeMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Modify unforge behavior of Holy Blade.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageDrawPatcher.InventoryPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Draw selectable indicator.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageReceiveClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageReceiveClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageReceiveClickPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageReceiveClickPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.InventoryPageReceiveClickPatcher.InventoryPageReceiveClickPrefix(StardewValley.Item,System.Boolean)">
            <summary>Toggle selectable tool.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ItemDrawTooltipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ItemDrawTooltipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ItemDrawTooltipPatcher.ItemDrawTooltipReverse(System.Object,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single,System.Text.StringBuilder)">
            <summary>Stub for base <see cref="M:StardewValley.Item.drawTooltip(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single,System.Text.StringBuilder)"/>.</summary>
            <remarks>Required by <see cref="M:StardewValley.Tool.drawTooltip(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single,System.Text.StringBuilder)"/> prefix.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ProjectileIsCollidingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ProjectileIsCollidingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ProjectileIsCollidingPatcher.ProjectileIsCollidingPostfix(System.Boolean@,StardewValley.Network.NetPosition,StardewValley.GameLocation)">
            <summary>Allows projectiles to keep traveling over water.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotBeginUsingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotBeginUsingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotBeginUsingPatcher.SlingshotBeginUsingPostfix">
            <summary>Override bullseye.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotCanThisBeAttachedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotCanThisBeAttachedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotCanThisBeAttachedPatcher.SlingshotCanThisBeAttachedPostfix(System.Boolean@,StardewValley.Object)">
            <summary>Patch to allow equipping radioactive ore.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotDrawInMenuPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotDrawInMenuPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotDrawInMenuPatcher.SlingshotDrawInMenuPostfix(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.Single,StardewValley.StackDrawType,System.Boolean)">
            <summary>Draw slingshot cooldown.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotDrawPatcher.SlingshotDrawPrefix">
            <summary>Override bullseye.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotGetRequiredChargeTimePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotGetRequiredChargeTimePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotGetRequiredChargeTimePatcher.SlingshotGetRequiredChargeTimePostfix(StardewValley.Tools.Slingshot,System.Single@)">
            <summary>Apply Emerald Ring and Enchantment effects to Slingshot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotPerformFirePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotPerformFirePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.SlingshotPerformFirePatcher.SlingshotPerformFirePrefix(StardewValley.Tools.Slingshot,System.Boolean@,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Patch to add Rascal bonus range damage + perform Desperado perks and Ultimate.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolAddEnchantmentPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolAddEnchantmentPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolAddEnchantmentPatcher.ToolAddEnchantmentTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Allow Slingshot gemstone enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarDrawPatcher.ToolbarDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Draw selectable indicator.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarReceiveClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarReceiveClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarReceiveClickPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarReceiveClickPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolbarReceiveClickPatcher.ToolbarReceiveClickPrefix(StardewValley.Item,System.Boolean)">
            <summary>Toggle selectable tool.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolCanAddEnchantmentPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolCanAddEnchantmentPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolCanAddEnchantmentPatcher.ToolCanAddEnchantmentPrefix(StardewValley.Tool,System.Boolean@,StardewValley.BaseEnchantment)">
            <summary>Allow slingshot enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolDrawTooltipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolDrawTooltipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolDrawTooltipPatcher.ToolDrawTooltipPrefix(StardewValley.Tool,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single,System.Text.StringBuilder)">
            <summary>Draw Slingshot enchantment effects in tooltip.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolForgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolForgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolForgePatcher.ToolForgePrefix(StardewValley.Tool,System.Boolean@,StardewValley.Item,System.Boolean)">
            <summary>Transform Galaxy Slingshot into Infinity Slingshot.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolForgePatcher.ToolForgePostfix(StardewValley.Tool,System.Boolean)">
            <summary>Invalidate stats on forge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolGetExtraSpaceNeededForTooltipSpecialIconsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolGetExtraSpaceNeededForTooltipSpecialIconsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolGetExtraSpaceNeededForTooltipSpecialIconsPatcher.ToolGetExtraSpaceNeededForTooltipSpecialIconsPostfix(StardewValley.Tool,Microsoft.Xna.Framework.Point@,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>Fix forged Slingshot tooltip box height.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolGetMaxForgesPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolGetMaxForgesPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Patchers.ToolGetMaxForgesPatcher.ToolGetMaxForgesPrefix(StardewValley.Tool,System.Int32@)">
            <summary>Custom forge slots for slingshots.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile">
            <summary>An <see cref="T:StardewValley.Object"/> fired by a <see cref="T:StardewValley.Tools.Slingshot"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile"/> class.</summary>
            <remarks>Required for multiplayer syncing.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile.#ctor(StardewValley.Item,System.Int32,StardewValley.Tools.Slingshot,StardewValley.Farmer,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile"/> class.</summary>
            <param name="ammo">The <see cref="T:StardewValley.Object"/> that was fired.</param>
            <param name="index">The index of the fired ammo (this may be different from the index of the <see cref="T:StardewValley.Object"/>).</param>
            <param name="source">The <see cref="T:StardewValley.Tools.Slingshot"/> which fired this projectile.</param>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired this projectile.</param>
            <param name="damage">The un-mitigated damage this projectile will cause.</param>
            <param name="knockback">The knockback this projectile will cause.</param>
            <param name="overcharge">The amount of overcharge with which the projectile was fired.</param>
            <param name="startingPosition">The projectile's starting position.</param>
            <param name="xVelocity">The projectile's starting velocity in the horizontal direction.</param>
            <param name="yVelocity">The projectile's starting velocity in the vertical direction.</param>
            <param name="rotationVelocity">The projectile's starting rotational velocity.</param>
            <param name="canRecover">Whether the fired <paramref name="ammo"/> can be recovered.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile.behaviorOnCollisionWithMonster(StardewValley.NPC,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile.behaviorOnCollisionWithOther(StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile.update(Microsoft.Xna.Framework.GameTime,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.ObjectProjectile.IsSquishy">
            <summary>Determines whether the projectile should pierce and bounce or make squishy noises upon collision.</summary>
            <returns><see langword="true"/> if the projectile is an egg, fruit, vegetable or slime, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.Projectiles.SnowballProjectile">
            <summary>A harmless ball of snow fired by a <see cref="T:StardewValley.Tools.Slingshot"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.SnowballProjectile.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Projectiles.SnowballProjectile"/> class.</summary>
            <remarks>Required for multiplayer syncing.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.SnowballProjectile.#ctor(StardewValley.Farmer,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Slingshots.Projectiles.SnowballProjectile"/> class.</summary>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired this projectile.</param>
            <param name="overcharge">The amount of overcharge with which the projectile was fired.</param>
            <param name="startingPosition">The projectile's starting position.</param>
            <param name="xVelocity">The projectile's starting velocity in the horizontal direction.</param>
            <param name="yVelocity">The projectile's starting velocity in the vertical direction.</param>
            <param name="rotationVelocity">The projectile's starting rotational velocity.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Slingshots.Projectiles.SnowballProjectile.ExplosionAnimation(StardewValley.GameLocation)">
            <summary>Replaces BasicProjectile.explosionAnimation.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.SlingshotSelector">
            <summary>Smart <see cref="T:StardewValley.Tool"/> selector.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Slingshots.State">
            <summary>The runtime state variable for SLNGS.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Commands.DoTaxesCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Commands.DoTaxesCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Commands.DoTaxesCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Commands.DoTaxesCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Commands.DoTaxesCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Commands.SendLetterCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Commands.SendLetterCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Commands.SendLetterCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Commands.SendLetterCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Commands.SendLetterCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Commands.SetModDataCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Commands.SetModDataCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Commands.SetModDataCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Commands.SetModDataCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Commands.SetModDataCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.Config">
            <summary>The user-configurable settings for TXS.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.IncomeBrackets">
            <summary>Gets the income thresholds that determine each tax bracket.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.IncomeTaxPerBracket">
            <summary>Gets the taxable percentage of income at each bracket. If there are n brackets, this array should contain n+1 elements.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.AnnualInterest">
            <summary>
                Gets the interest rate charged annually over any outstanding debt. Interest is accrued daily at a rate of 1/112 the
                annual rate.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.IncomeTaxLatenessFine">
            <summary>Gets the flat rate charged over due income taxes not paid in time.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.DeductibleAnimalExpenses">
            <summary>Gets a value indicating whether or not any gold spent on animal purchases and supplies should be tax-deductible.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.DeductibleBuildingExpenses">
            <summary>Gets a value indicating whether or not any gold spent constructing farm buildings should be tax-deductible.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.DeductibleSeedExpenses">
            <summary>Gets a value indicating whether or not any gold spent on seed purchases should be tax-deductible.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.DeductibleToolExpenses">
            <summary>Gets a value indicating whether or not any gold spent on tool purchases and upgrades should be tax-deductible.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.DeductibleObjects">
            <summary>Gets a value indicating the list of extra objects that should be tax-deductible.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.PropertyTaxLatenessFine">
            <summary>Gets the flat rate charged over due income taxes not paid in time.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.UnusedTileTaxRate">
            <summary>Gets the property tax rate of an unused tile.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.UsedTileTaxRate">
            <summary>Gets the property tax rate of a tile used for agriculture or livestock.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.BuildingTaxRate">
            <summary>Gets the property tax rate of a tile used for real-estate.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Config.ExemptMagicalBuilding">
            <summary>Gets a value indicating whether or not magical buildings are exempted from property taxes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Config.Validate">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Taxes"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.HostModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Events.HostModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Events.HostModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.HostModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.HostPeerConnectedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Events.HostPeerConnectedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Taxes.Events.HostPeerConnectedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.HostPeerConnectedEvent.OnPeerConnectedImpl(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Events.TaxAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxDayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Events.TaxDayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxDayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Events.TaxDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Events.TaxSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Events.TaxSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Extensions.FarmerExtensions.ShouldPayTaxes(StardewValley.Farmer)">
            <summary>Determines whether the <paramref name="farmer"/> is liable for paying taxes.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="farmer"/> is the main player or using separate wallets, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.Extensions.FarmExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farm"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Extensions.FarmExtensions.Appraise(StardewValley.Farm,System.Boolean)">
            <summary>Determines the total property value of the <paramref name="farm"/>.</summary>
            <param name="farm">The <see cref="T:StardewValley.Farm"/>.</param>
            <param name="forReal">Optional flag to avoid recording the new appraisal.</param>
            <returns>The total values of agriculture activities, livestock and buildings on the <paramref name="farm"/>, as well as the total number of tiles used by all of those activities.</returns>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Taxes.Mail.FrsIntro">
            <summary>The FRS intro letter.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Taxes.Mail.FrsNotice">
            <summary>The FRS taxation notice letter.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Taxes.Mail.FrsOutstanding">
            <summary>The FRS outstanding debt letter.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Taxes.Mail.FrsDeduction">
            <summary>The FRS tax deduction letter.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Taxes.Mail.LewisNotice">
            <summary>Lewis' taxation notice letter.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Taxes.Mail.LewisOutstanding">
            <summary>Lewis' outstanding debt letter.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.BluePrintConsumeResourcesPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Patchers.BluePrintConsumeResourcesPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.BluePrintConsumeResourcesPatcher.BluePrintConsumeResourcesPostfix(StardewValley.BluePrint)">
            <summary>Patch to deduct building expenses.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.FarmerHasOrWillReceiveMailPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Patchers.FarmerHasOrWillReceiveMailPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.FarmerHasOrWillReceiveMailPatcher.FarmerHasOrWillReceiveMailPrefix(System.Boolean@,System.String)">
            <summary>Patch to allow receiving multiple letters from the FRS.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.PurchaseAnimalsSetUpForReturnAfterPurchasingAnimalPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Patchers.PurchaseAnimalsSetUpForReturnAfterPurchasingAnimalPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.PurchaseAnimalsSetUpForReturnAfterPurchasingAnimalPatcher.PurchaseAnimalsMenuReceiveLeftClickPostfix(StardewValley.FarmAnimal,System.Int32)">
            <summary>Patch to deduct animal expenses.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.ShopMenuTryToPurchaseItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Taxes.Patchers.ShopMenuTryToPurchaseItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.Patchers.ShopMenuTryToPurchaseItemPatcher.ShopMenuTryToPurchaseItemTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to deduct tool and other expenses.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.PostalService">
            <summary>Responsible for collecting and delivering mail.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.PostalService.Send(DaLion.Overhaul.Modules.Taxes.Mail)">
            <summary>Sends the post to the local player.</summary>
            <param name="mail">The <see cref="T:DaLion.Overhaul.Modules.Taxes.Mail"/> to send.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.PostalService.HasSent(DaLion.Overhaul.Modules.Taxes.Mail)">
            <summary>Checks whether the local player has received this post.</summary>
            <param name="mail">The <see cref="T:DaLion.Overhaul.Modules.Taxes.Mail"/> to be sent.</param>
            <returns><see langword="true"/> if the player has or will receive the post, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.RevenueService">
            <summary>Responsible for collecting federal taxes and administering the Ferngill Revenue Code.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Taxes.RevenueService.CalculateTaxes(StardewValley.Farmer)">
            <summary>Calculates due income tax for the <paramref name="who"/>.</summary>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The amount of income tax due in gold.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Taxes.State">
            <summary>The runtime state variables for TXS.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Commands.GetToolsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Commands.GetToolsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Commands.GetToolsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Commands.GetToolsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Commands.GetToolsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Commands.UpgradeToolsCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Commands.UpgradeToolsCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Commands.UpgradeToolsCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Commands.UpgradeToolsCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Commands.UpgradeToolsCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Commands.UpgradeToolsCommand.GetUsage">
            <summary>Tell the dummies how to use the console command.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Config">
            <summary>The user-configurable settings for TOLS.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.Axe">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.Pick">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.Hoe">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Tools.Configs.HoeConfig"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.Can">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.Scythe">
            <inheritdoc cref="T:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig"/>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.ModKey">
            <summary>Gets the chosen mod key(s).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.ChargingRequiresModKey">
            <summary>Gets a value indicating whether determines whether charging requires a mod key to activate.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.HideAffectedTiles">
            <summary>Gets a value indicating whether determines whether to show affected tiles overlay while charging.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.TicksBetweenWaves">
            <summary>Gets affects the shockwave travel speed. Lower is faster. Set to 0 for instant.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.FaceMouseCursor">
            <summary>Gets a value indicating whether face the current cursor position before swinging your tools.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.EnableAutoSelection">
            <summary>Gets a value indicating whether to allow auto-selecting tools.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.SelectionBorderColor">
            <summary>Gets the <see cref="T:Microsoft.Xna.Framework.Color"/> used to indicate tools enabled or auto-selection.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Config.ColorCodedForYourConvenience">
            <summary>Gets a value indicating whether to color the title text of upgraded tools.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Config.Validate">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig">
            <summary>Configs related to the <see cref="T:StardewValley.Tools.Axe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.BaseStaminaMultiplier">
            <summary>Gets the multiplier to base stamina consumed by the <see cref="T:StardewValley.Tools.Axe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.EnableCharging">
            <summary>Gets a value indicating whether enables charging the <see cref="T:StardewValley.Tools.Axe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.RequiredUpgradeForCharging">
            <summary>Gets axe must be at least this level to charge.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.RadiusAtEachPowerLevel">
            <summary>Gets the radius of affected tiles at each upgrade level.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ChargedStaminaMultiplier">
            <summary>Gets a value which multiplies the stamina consumption for a <see cref="T:DaLion.Overhaul.Modules.Tools.Shockwave"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearFruitTreeSeeds">
            <summary>Gets a value indicating whether to clear fruit tree seeds.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearFruitTreeSaplings">
            <summary>Gets a value indicating whether to clear fruit trees that aren't fully grown.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.CutGrownFruitTrees">
            <summary>Gets a value indicating whether to cut down fully-grown fruit trees.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearTreeSeeds">
            <summary>Gets a value indicating whether to clear non-fruit tree seeds.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearTreeSaplings">
            <summary>Gets a value indicating whether to clear non-fruit trees that aren't fully grown.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.CutGrownTrees">
            <summary>Gets a value indicating whether to cut down full-grown non-fruit trees.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.CutTappedTrees">
            <summary>Gets a value indicating whether to cut down non-fruit trees that have a tapper.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.CutGiantCrops">
            <summary>Gets a value indicating whether to harvest giant crops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearBushes">
            <summary>Gets a value indicating whether to clear bushes.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearLiveCrops">
            <summary>Gets a value indicating whether to clear live crops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearDeadCrops">
            <summary>Gets a value indicating whether to clear dead crops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.ClearDebris">
            <summary>Gets a value indicating whether to clear debris like twigs, giant stumps, fallen logs and weeds.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.PlayShockwaveAnimation">
            <summary>Gets a value indicating whether to play the shockwave animation when the charged Axe is released.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.AllowMasterEnchantment">
            <summary>Gets a value indicating whether the Axe can be enchanted with Master.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.AxeConfig.AllowReachingEnchantment">
            <summary>Gets a value indicating whether the Axe can be enchanted with Reaching.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Configs.HoeConfig">
            <summary>Configs related to the <see cref="T:StardewValley.Tools.Hoe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.HoeConfig.BaseStaminaMultiplier">
            <summary>Gets the multiplier to base stamina consumed by the <see cref="T:StardewValley.Tools.Axe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.HoeConfig.OverrideAffectedTiles">
            <summary>
                Gets a value indicating whether to apply custom tile area for the Hoe. Keep this at false if using defaults to improve
                performance.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.HoeConfig.AffectedTilesAtEachPowerLevel">
            <summary>Gets the area of affected tiles at each power level for the Hoe, in units lengths x units radius.</summary>
            <remarks>Note that radius extends to both sides of the farmer.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.HoeConfig.AllowMasterEnchantment">
            <summary>Gets a value indicating whether the Hoe can be enchanted with Master.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig">
            <summary>Configs related to the <see cref="T:StardewValley.Tools.Pickaxe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.BaseStaminaMultiplier">
            <summary>Gets the multiplier to base stamina consumed by the <see cref="T:StardewValley.Tools.Axe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.EnableCharging">
            <summary>Gets a value indicating whether enables charging the Pick.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.RequiredUpgradeForCharging">
            <summary>Gets pickaxe must be at least this level to charge. Must be greater than zero.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.RadiusAtEachPowerLevel">
            <summary>Gets the radius of affected tiles at each upgrade level.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ChargedStaminaMultiplier">
            <summary>Gets a value which multiplies the stamina consumption for a <see cref="T:DaLion.Overhaul.Modules.Tools.Shockwave"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.BreakBouldersAndMeteorites">
            <summary>Gets a value indicating whether to break boulders and meteorites.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.HarvestMineSpawns">
            <summary>Gets a value indicating whether to harvest spawned items in the mines.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.BreakMineContainers">
            <summary>Gets a value indicating whether to break containers in the mine.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ClearObjects">
            <summary>Gets a value indicating whether to clear placed objects.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ClearFlooring">
            <summary>Gets a value indicating whether to clear placed paths and flooring.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ClearDirt">
            <summary>Gets a value indicating whether to clear tilled dirt.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ClearLiveCrops">
            <summary>Gets a value indicating whether to clear live crops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ClearDeadCrops">
            <summary>Gets a value indicating whether to clear dead crops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.ClearDebris">
            <summary>Gets a value indicating whether to clear debris like stones, boulders and weeds.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.PlayShockwaveAnimation">
            <summary>Gets a value indicating whether to play the shockwave animation when the charged Pick is released.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.AllowMasterEnchantment">
            <summary>Gets a value indicating whether the Pick can be enchanted with Master.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig.AllowReachingEnchantment">
            <summary>Gets a value indicating whether the Pick can be enchanted with Reaching.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig">
            <summary>Configs related to the Scythe.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.RegularRadius">
            <summary>Gets the radius of the regular Scythe.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.GoldRadius">
            <summary>Gets the radius of the Golden Scythe.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.ClearTreeSaplings">
            <summary>Gets a value indicating whether to clear tree saplings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.HarvestCrops">
            <summary>Gets a value indicating whether to harvest crops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.HarvestFlowers">
            <summary>Gets a value indicating whether to harvest flowers.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.HarvestForage">
            <summary>Gets a value indicating whether to harvest forage.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.GoldScytheOnly">
            <summary>Gets a value indicating whether the harvest settings apply only to Golden Scythe.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.ScytheConfig.AllowHaymakerEnchantment">
            <summary>Gets a value indicating whether the scythes can be enchanted with Haymaker.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig">
            <summary>Configs related to the <see cref="T:StardewValley.Tools.WateringCan"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig.BaseStaminaMultiplier">
            <summary>Gets the multiplier to base stamina consumed by the <see cref="T:StardewValley.Tools.Axe"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig.OverrideAffectedTiles">
            <summary>Gets a value indicating whether use custom tile area for the Watering Can. Keep this at false if using defaults to improve performance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig.AffectedTilesAtEachPowerLevel">
            <summary>Gets the area of affected tiles at each power level for the Can, in units lengths x units radius.</summary>
            <remarks>Note that radius extends to both sides of the farmer.</remarks>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig.AllowMasterEnchantment">
            <summary>Gets a value indicating whether the Watering Can can be enchanted with Master.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Configs.WateringCanConfig.AllowSwiftEnchantment">
            <summary>Gets a value indicating whether the Watering Can can be enchanted with Swift.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Tools"/>.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect">
            <summary>Applies <see cref="T:StardewValley.Tools.Axe"/> effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect.#ctor(DaLion.Overhaul.Modules.Tools.Configs.AxeConfig)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect"/> class.</summary>
            <param name="config">The mod configs for the <see cref="T:StardewValley.Tools.Axe"/>.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect.UpgradeLevelsNeededForResource">
            <summary>Gets the <see cref="T:StardewValley.Tools.Axe"/> upgrade levels needed to break supported resource clumps.</summary>
            <remarks>Derived from <see cref="M:StardewValley.TerrainFeatures.ResourceClump.performToolAction(StardewValley.Tool,System.Int32,Microsoft.Xna.Framework.Vector2,StardewValley.GameLocation)"/>.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect.Apply(Microsoft.Xna.Framework.Vector2,StardewValley.Object,StardewValley.TerrainFeatures.TerrainFeature,StardewValley.Tool,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect.ShouldCut(StardewValley.TerrainFeatures.Tree)">
            <summary>Determines whether the given <paramref name="tree"/> should be chopped.</summary>
            <param name="tree">The tree to check.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect.ShouldCut(StardewValley.TerrainFeatures.FruitTree)">
            <summary>Determines whether the given <paramref name="fruitTree"/> should be chopped.</summary>
            <param name="fruitTree">The tree to check.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.AxeEffect.ShouldCut(StardewValley.TerrainFeatures.Bush)">
            <summary>Determines whether <see cref="T:StardewValley.TerrainFeatures.Bush"/>es should be chopped.</summary>
            <param name="bush">A bush.</param>
            <remarks>
                The <see cref="T:StardewValley.TerrainFeatures.Bush"/> instance is irrelevant, and only kept in the method signature to overload other
                <c>ShouldCut</c> variations.
            </remarks>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Effects.IToolEffect">
            <summary>Interface for applying a <see cref="T:StardewValley.Tool"/>'s effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.IToolEffect.Apply(Microsoft.Xna.Framework.Vector2,StardewValley.Object,StardewValley.TerrainFeatures.TerrainFeature,StardewValley.Tool,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Applies the <paramref name="tool"/> to the <paramref name="tile"/>.</summary>
            <param name="tile">The tile to modify.</param>
            <param name="tileObj">The object on the tile.</param>
            <param name="tileFeature">The feature on the tile.</param>
            <param name="tool">The tool selected by the player (if any).</param>
            <param name="location">The current location.</param>
            <param name="who">The current player.</param>
            <returns><see langword="true"/> if the <paramref name="tool"/> was successfully applied, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Effects.PickaxeEffect">
            <summary>Applies <see cref="T:StardewValley.Tools.Pickaxe"/> effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.PickaxeEffect.#ctor(DaLion.Overhaul.Modules.Tools.Configs.PickaxeConfig)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Effects.PickaxeEffect"/> class.</summary>
            <param name="config">The mod configs for the <see cref="T:StardewValley.Tools.Axe"/>.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Effects.PickaxeEffect.UpgradeLevelsNeededForResource">
            <summary>Gets the <see cref="T:StardewValley.Tools.Pickaxe"/> upgrade levels needed to break supported resource clumps.</summary>
            <remarks>Derived from <see cref="M:StardewValley.TerrainFeatures.ResourceClump.performToolAction(StardewValley.Tool,System.Int32,Microsoft.Xna.Framework.Vector2,StardewValley.GameLocation)"/>.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.PickaxeEffect.Apply(Microsoft.Xna.Framework.Vector2,StardewValley.Object,StardewValley.TerrainFeatures.TerrainFeature,StardewValley.Tool,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Effects.PickaxeEffect.TryBreakContainer(Microsoft.Xna.Framework.Vector2,StardewValley.Object,StardewValley.Tool,StardewValley.GameLocation)">
            <summary>Breaks open a container using a tool, if applicable.</summary>
            <param name="tile">The tile position.</param>
            <param name="tileObj">The object on the tile.</param>
            <param name="tool">The tool selected by the player (if any).</param>
            <param name="location">The current location.</param>
            <returns><see langword="true"/> if the tool did break a container, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ShockwaveUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Events.ShockwaveUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Events.ShockwaveUpdateTickedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ShockwaveUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Events.ToolButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Events.ToolButtonPressedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolGameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Events.ToolGameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolGameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolInventoryChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Events.ToolInventoryChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Events.ToolInventoryChangedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolInventoryChangedEvent.OnInventoryChangedImpl(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Events.ToolSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Events.ToolSaveLoadedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolSavingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Events.ToolSavingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tools.Events.ToolSavingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Events.ToolSavingEvent.OnSavingImpl(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.FarmerExtensions.CanSickleHarvest(StardewValley.Farmer,StardewValley.Crop)">
            <summary>Checks whether the <paramref name="crop"/> can be harvested with a sickle.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="crop">The <see cref="T:StardewValley.Crop"/>.</param>
            <returns><see langword="true"/> if the <paramref name="farmer"/> is holding a sickle and the user's config settings allow sickle-harvesting the given <paramref name="crop"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.FarmerExtensions.TemporarilyFakeInteraction(StardewValley.Farmer,System.Action)">
            <summary>
                Temporarily sets up the <paramref name="farmer"/> to interact with a tile, then return it to the original
                state.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.FarmerExtensions.CancelAnimation(StardewValley.Farmer,System.Int32[])">
            <summary>Cancels the <paramref name="farmer"/>'s current animation if it matches one of the given IDs.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="animationIds">The animation IDs to detect.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Extensions.GameLocationExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.GameLocation"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.GameLocationExtensions.GetNormalResourceClumps(StardewValley.GameLocation)">
            <summary>Gets the <see cref="T:StardewValley.TerrainFeatures.ResourceClump"/> in the <paramref name="location"/>.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the <see cref="T:StardewValley.TerrainFeatures.ResourceClump"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.GameLocationExtensions.GetResourceClumpCoveringTile(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,System.Func{StardewValley.Tool,System.Boolean}@)">
            <summary>Gets the <see cref="T:StardewValley.TerrainFeatures.ResourceClump"/> which covers the given <paramref name="tile"/>, if any.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="tile">The tile to check.</param>
            <param name="who">The current player.</param>
            <param name="applyTool">Applies a tool to the resource clump.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.ResourceClump"/> located at <paramref name="tile"/> if any, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Extensions.SObjectExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.SObjectExtensions.IsHarvestableForage(StardewValley.Object)">
            <summary>Determines whether the <paramref name="object"/> can be harvested with a sickle.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/>'s category should be harvestable as defined by the player's config settings, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Extensions.ToolExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Tool"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Extensions.ToolExtensions.UseOnTile(StardewValley.Tool,Microsoft.Xna.Framework.Vector2,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Uses the <paramref name="tool"/> on the given <paramref name="tile"/>.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <param name="tile">The tile to affect.</param>
            <param name="location">The current location.</param>
            <param name="who">The current player.</param>
            <returns>Always <see langword="true"/>, for convenience when implementing tools.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Integrations.MoonMisadventuresIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Integrations.MoonMisadventuresIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Integrations.MoonMisadventuresIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.AxeBeginUsingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.AxeBeginUsingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.AxeBeginUsingPatcher.AxeBeginUsingPrefix(StardewValley.Tool,StardewValley.Farmer)">
            <summary>Enable Axe power level increase.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.AxeDoFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.AxeDoFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.AxeDoFunctionPatcher.AxeDoFunctionPostfix(StardewValley.Farmer)">
            <summary>Charge shockwave stamina cost.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.AxeDoFunctionPatcher.AxeDoFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Apply base stamina multiplier + stamina cost cap.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.BaseWeaponEnchantmentCanApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.BaseWeaponEnchantmentCanApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.BaseWeaponEnchantmentCanApplyToPatcher.BaseWeaponEnchantmentCanApplyToTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Allow Haymaker Scythe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.CropHarvestPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.CropHarvestPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.CropHarvestPatcher.CropHarvestTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Proper spring onion harvest with scythe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetFarmingLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetFarmingLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetFarmingLevelPatcher.FarmerGetFarmingLevelPostfix(StardewValley.Farmer,System.Int32@)">
            <summary>Master Hoe and Watering Can enchantment effect.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetForagingLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetForagingLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetForagingLevelPatcher.FarmerGetForagingLevelPostfix(StardewValley.Farmer,System.Int32@)">
            <summary>Master Axe enchantment effect.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetMiningLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetMiningLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerGetMiningLevelPatcher.FarmerGetMiningLevelPostfix(StardewValley.Farmer,System.Int32@)">
            <summary>Master Pick enchantment effect.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerToolPowerIncreasePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.FarmerToolPowerIncreasePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FarmerToolPowerIncreasePatcher.FarmerToolPowerIncreaseTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>Allow first two power levels on Pick.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FishingRodEnchantmentCanApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.FishingRodEnchantmentCanApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.FishingRodEnchantmentCanApplyToPatcher.FishingRodEnchantmentCanApplyTo(StardewValley.FishingRodEnchantment,System.Boolean@,StardewValley.Item)">
            <summary>Allow apply Master enchantment to other tools.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.HoeDirtPerformToolActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.HoeDirtPerformToolActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.HoeDirtPerformToolActionPatcher.HoeDirtPerformToolActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Patch to allow harvest with scythe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.HoeDirtPerformUseActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.HoeDirtPerformUseActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.HoeDirtPerformUseActionPatcher.HoeDirtPerformUseActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Allow harvest with scythe + optimize this dumb method.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.HoeDoFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.HoeDoFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.HoeDoFunctionPatcher.HoeDoFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Apply base stamina multiplier + stamina cost cap.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.IClickableMenuDrawHoverTextPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.IClickableMenuDrawHoverTextPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.IClickableMenuDrawHoverTextPatcher.IClickableMenuDrawHoverTextTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Set hover text color for upgraded tools weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageDrawPatcher.InventoryPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Draw selectable indicator.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageReceiveClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageReceiveClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageReceiveClickPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageReceiveClickPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.InventoryPageReceiveClickPatcher.InventoryPageReceiveClickPrefix(StardewValley.Item,System.Boolean)">
            <summary>Toggle selectable tool.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponDoDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponDoDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponDrawTooltipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponDrawTooltipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponDrawTooltipPatcher.MeleeWeaponDrawTooltipPostfix(StardewValley.Tools.MeleeWeapon,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single)">
            <summary>Draw Scythe enchantment effects in tooltip.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponForgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponForgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.MeleeWeaponForgePatcher.ToolForgeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>Allow enchanting Scythe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ObjectPerformToolActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.ObjectPerformToolActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ObjectPerformToolActionPatcher.ObjectPerformToolActionPrefix(StardewValley.Object,System.Boolean@,StardewValley.Tool,StardewValley.GameLocation)">
            <summary>Patch to allow harvesting forage with scythe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeBeginUsingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeBeginUsingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeBeginUsingPatcher.PickaxeBeginUsingPrefix(StardewValley.Tool,StardewValley.Farmer)">
            <summary>Enable Pick power level increase.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeDoFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeDoFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeDoFunctionPatcher.PickaxeDoFunctionPostfix(StardewValley.Farmer)">
            <summary>Charge shockwave stamina cost.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PickaxeDoFunctionPatcher.PickaxeDoFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Apply base stamina multiplier + stamina cost cap.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PowerfulEnchantmentApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.PowerfulEnchantmentApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.PowerfulEnchantmentApplyToPatcher.PowerfulEnchantmentApplyToPrefix(StardewValley.Item)">
            <summary>Rebalance powerful enchantment so it is not redundant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ReachingToolEnchantmentCanApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.ReachingToolEnchantmentCanApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ReachingToolEnchantmentCanApplyToPatcher.ReachingToolEnchantmentCanApplyToPrefix(System.Boolean@,StardewValley.Item)">
            <summary>Allow apply Reaching enchant to Axe and Pick.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.SkillsPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.SkillsPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.SkillsPageDrawPatcher.SkillsPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Allows new Master Enchantments to draw as green levels in the skills page.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.SwiftToolEnchantmentCanApplyToPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.SwiftToolEnchantmentCanApplyToPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.SwiftToolEnchantmentCanApplyToPatcher.SwiftToolEnchantmentCanApplyToPrefix(System.Boolean@,StardewValley.Item)">
            <summary>Allow apply Swift enchant to Watering Can.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarDrawPatcher.ToolbarDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Draw selectable indicator.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarReceiveClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarReceiveClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarReceiveClickPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarReceiveClickPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolbarReceiveClickPatcher.ToolbarReceiveClickPrefix(StardewValley.Item,System.Boolean)">
            <summary>Toggle selectable tool.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolEndUsingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.ToolEndUsingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolEndUsingPatcher.ToolEndUsingPostfix(StardewValley.Farmer)">
            <summary>Do shockwave.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolTilesAffectedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.ToolTilesAffectedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolTilesAffectedPatcher.ToolTilesAffectedPrefix(StardewValley.Tool,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2}@,Microsoft.Xna.Framework.Vector2,System.Int32@,StardewValley.Farmer)">
            <summary>Override affected tiles for farming tools.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.ToolTilesAffectedPatcher.ToolTilesAffectedPostfix(StardewValley.Tool,System.Collections.Generic.List{Microsoft.Xna.Framework.Vector2},Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>Override affected tiles for resource tools.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.TreePerformToolActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.TreePerformToolActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.TreePerformToolActionPatcher.TreePerformToolActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Prevent clearing tree saplings.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.WateringCanDoFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Patchers.WateringCanDoFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Patchers.WateringCanDoFunctionPatcher.WateringCanDoFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Apply base stamina multiplier + stamina cost cap.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.Shockwave">
            <summary>Spreads a tool's effect across all tiles in a circular area.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Shockwave.#ctor(System.UInt32,StardewValley.Farmer,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tools.Shockwave"/> class.</summary>
            <param name="radius">The maximum radius of the <see cref="T:DaLion.Overhaul.Modules.Tools.Shockwave"/>.</param>
            <param name="who">The player who initiated the <see cref="T:DaLion.Overhaul.Modules.Tools.Shockwave"/>.</param>
            <param name="milliseconds">
                The total elapsed <see cref="T:Microsoft.Xna.Framework.GameTime"/> in milliseconds at the moment the tool was
                released.
            </param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Shockwave.Update(System.Double)">
            <summary>Expands the affected radius by one unit and applies the tool's effects.</summary>
            <param name="milliseconds">The current elapsed <see cref="T:Microsoft.Xna.Framework.GameTime"/> in milliseconds.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.Shockwave.GetRadialAdjacentTile(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@,System.Int32@)">
            <summary>
                Gets the tile coordinate which is adjacent to the given <paramref name="tile"/> along a radial line from the
                player.
            </summary>
            <param name="epicenter">The tile containing the player.</param>
            <param name="tile">The tile to face.</param>
            <param name="adjacent">The tile radially adjacent to the <paramref name="tile"/>.</param>
            <param name="facingDirection">The direction to face.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.State">
            <summary>The runtime state variables for TOLS.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.ToolSelector">
            <summary>Smart <see cref="T:StardewValley.Tool"/> selector.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.ToolSelector.TryFor(Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,StardewValley.GameLocation,System.Nullable{DaLion.Overhaul.Modules.Tools.SelectableTool}@)">
            <summary>Attempts to select the most appropriate tool for the given <paramref name="tile"/>.</summary>
            <param name="tile">The action tile.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="location">The current <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="selectable">The <see cref="T:DaLion.Overhaul.Modules.Tools.SelectableTool"/>.</param>
            <returns>The integer index of the appropriate <see cref="T:StardewValley.Tool"/> in <paramref name="who"/>'s inventory.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.UpgradeLevel">
            <summary>The upgrade level of a <see cref="T:StardewValley.Tool"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.None">
            <summary>No upgrade.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Copper">
            <summary>Copper upgrade.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Steel">
            <summary>Steel upgrade.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Gold">
            <summary>Gold upgrade.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Iridium">
            <summary>Iridium upgrade.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Radioactive">
            <summary>Radioactive upgrade. Requires Moon Misadventures.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Mythicite">
            <summary>Mythicite upgrade. Requires Moon Misadventures.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Tools.UpgradeLevel.Enchanted">
            <summary>Extra upgrade for tools with the Reaching Enchantment.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tools.UpgradeLevelExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Overhaul.Modules.Tools.UpgradeLevel"/> enum.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tools.UpgradeLevelExtensions.GetColor(DaLion.Overhaul.Modules.Tools.UpgradeLevel)">
            <summary>Returns the color associated with this <paramref name="upgrade"/>.</summary>
            <param name="upgrade">The <see cref="T:DaLion.Overhaul.Modules.Tools.UpgradeLevel"/>.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Commands.SetAgeCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Commands.SetAgeCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Commands.SetAgeCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Commands.SetAgeCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Commands.SetAgeCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tweex.Config">
            <summary>The user-configurable settings for TWX.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.BeeHouseAgingFactor">
            <summary>Gets the degree to which Bee House age improves honey quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.MushroomBoxAgingFactor">
            <summary>Gets the degree to which Mushroom Box age improves mushroom quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.TreeAgingFactor">
            <summary>Gets the degree to which Tree age improves sap quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.FruitTreeAgingFactor">
            <summary>Gets the degree to which Fruit Tree age improves fruit quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.TeaBushAgingFactor">
            <summary>Gets the degree to which Tea Bush age improves Tea Leaf quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.DeterministicAgeQuality">
            <summary>Gets a value indicating whether determines whether age-dependent qualities should be deterministic (true) or stochastic/random (false).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.MillsPreserveQuality">
            <summary>Gets a value indicating whether the Mill's output should consider the quality of the ingredient.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.BerryBushExpReward">
            <summary>Gets the amount of Foraging experience rewarded for harvesting berry bushes. Set to zero to disable.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.MushroomBoxExpReward">
            <summary>Gets the amount of Foraging experience rewarded for harvesting Mushroom Boxes. Set to zero to disable.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.TapperExpReward">
            <summary>Gets the amount of Foraging experience rewarded for harvesting Tappers. Set to zero to disable.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.PreventFruitTreeWinterGrowth">
            <summary>Gets a value indicating whether if regular trees can't grow in winter, neither should fruit trees.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.LargeProducsYieldQuantityOverQuality">
            <summary>Gets a value indicating whether large input products should yield more processed output instead of higher quality.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.DairyArtisanMachines">
            <summary>
                Gets a list of Artisan machines which should be compatible with
                LargeProductsYieldQuantityOverQuality.
            </summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.ExplosionTriggeredBombs">
            <summary>Gets a value indicating whether bombs within any explosion radius are immediately triggered.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.LegendaryFishAlwaysBestQuality">
            <summary>Gets a value indicating whether to set the quality of legendary fish at best.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Tweex.Config.SpawnCrowsOnTheseMaps">
            <summary>Gets a set of maps in which to attempt to spawn crows.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tweex.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Tweex"/>.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tweex.Extensions.BushExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.TerrainFeatures.Tree"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Extensions.BushExtensions.GetQualityFromAge(StardewValley.TerrainFeatures.Bush)">
            <summary>Gets an object quality value based on this <paramref name="bush"/> age.</summary>
            <param name="bush">The <see cref="T:StardewValley.TerrainFeatures.Bush"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality value.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tweex.Extensions.FruitTreeExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.TerrainFeatures.Tree"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Extensions.FruitTreeExtensions.GetQualityFromAge(StardewValley.TerrainFeatures.FruitTree)">
            <summary>Gets an object quality value based on this <paramref name="fruitTree"/> age.</summary>
            <param name="fruitTree">The <see cref="T:StardewValley.TerrainFeatures.FruitTree"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality value.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tweex.Extensions.SObjectExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Extensions.SObjectExtensions.GetQualityFromAge(StardewValley.Object)">
            <summary>Gets an object quality value based on this <paramref name="object"/>'s age.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality value.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Tweex.Extensions.TreeExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.TerrainFeatures.Tree"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Extensions.TreeExtensions.CanBeTapped(StardewValley.TerrainFeatures.Tree)">
            <summary>Determines whether the <paramref name="tree"/> can hold a Tapper.</summary>
            <param name="tree">The <see cref="T:StardewValley.TerrainFeatures.Tree"/>.</param>
            <returns><see langword="true"/> if the <paramref name="tree"/>'s type accepts a Tapper, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Extensions.TreeExtensions.NameFromType(StardewValley.TerrainFeatures.Tree)">
            <summary>Gets a string representation for the <paramref name="tree"/>'s species.</summary>
            <param name="tree">The <see cref="T:StardewValley.TerrainFeatures.Tree"/>.</param>
            <returns>A human-readable <see cref="T:System.String"/> representation of the <paramref name="tree"/>'s type.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Extensions.TreeExtensions.GetQualityFromAge(StardewValley.TerrainFeatures.Tree)">
            <summary>Gets an object quality value based on this <paramref name="tree"/>'s age.</summary>
            <param name="tree">The <see cref="T:StardewValley.TerrainFeatures.Tree"/>.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality value.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.BushShakePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.BushShakePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.BushShakePatcher.BushShakePrefix(StardewValley.TerrainFeatures.Bush,System.Boolean@)">
            <summary>Detects if the bush is ready for harvest.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.BushShakePatcher.BushShakePostfix(StardewValley.TerrainFeatures.Bush,System.Boolean)">
            <summary>Adds foraging experience if the bush was harvested.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.BushShakePatcher.BushShakeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Adds quality tea bushes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FishingRodPullFishFromWaterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.FishingRodPullFishFromWaterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FishingRodPullFishFromWaterPatcher.FishingRodPullFishFromWaterPrefix(System.Int32,System.Int32@)">
            <summary>Legendary fish always best quality.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeDayUpdatePatcher.FruitTreeDayUpdatePrefix(StardewValley.TerrainFeatures.FruitTree,System.ValueTuple{System.Int32,System.Int32}@)">
            <summary>Record growth stage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeDayUpdatePatcher.FruitTreeDayUpdatePostfix(StardewValley.TerrainFeatures.FruitTree,System.ValueTuple{System.Int32,System.Int32})">
            <summary>Undo growth during winter.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeShakePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeShakePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.FruitTreeShakePatcher.FruitTreeShakeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Customize Fruit Tree age quality.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.GameLocationDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.GameLocationDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.GameLocationDayUpdatePatcher.GameLocationDayUpdatePostfix(StardewValley.GameLocation)">
            <summary>Spawn crows on Island Farm.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.GameLocationExplodePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.GameLocationExplodePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.GameLocationExplodePatcher.GameLocationExplodePostfix(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,System.Int32)">
            <summary>Explosions trigger nearby bombs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.BeeHouseMachineGetOutputPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.BeeHouseMachineGetOutputPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.BeeHouseMachineGetOutputPatcher.BeeHouseMachineGetOutputTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Adds aging quality to automated bee houses.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.BushMachineOnOutputReducedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.BushMachineOnOutputReducedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.BushMachineOnOutputReducedPatcher.BushMachineOnOutputReducedPostfix(System.Object)">
            <summary>Adds foraging experience for automated berry bushes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.FruitTreeMachineGetOutputPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.FruitTreeMachineGetOutputPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.FruitTreeMachineGetOutputPatcher.FruitTreeMachineGetOutputTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Adds custom aging quality to automated fruit tree.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.GenericObjectMachinePatchers.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.GenericObjectMachinePatchers"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.GenericObjectMachinePatchers.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.GenericObjectMachinePatchers.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.GenericObjectMachinePatchers.GenericObjectMachineTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Replaces large egg output quality with quantity + add flower memory to automated kegs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.MushroomBoxMachineGetOutputPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.MushroomBoxMachineGetOutputPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.MushroomBoxMachineGetOutputPatcher.MushroomBoxMachineGetOutputPrefix(System.Object)">
            <summary>Adds foraging experience for automated Mushroom Boxes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.TapperMachineResetPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.TapperMachineResetPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.TapperMachineResetPatcher.TapperMachineResetPostfix(System.Object)">
            <summary>Adds foraging experience for automated Tappers.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.ProducerRuleControllerProduceOutputPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.ProducerRuleControllerProduceOutputPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.Integration.ProducerRuleControllerProduceOutputPatcher.ProducerRuleControllerProduceOutputPostfix(StardewValley.Object,StardewValley.Object,System.Boolean)">
            <summary>Replaces large egg and milk output quality with quantity for PFM machines.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.MillDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.MillDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.MillDayUpdatePatcher.MillDayUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Mills preserve quality.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectCheckForActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectCheckForActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectCheckForActionPatcher.ObjectCheckForActionPrefix(StardewValley.Object,System.Boolean@)">
            <summary>Detects if an object is ready for harvest.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectCheckForActionPatcher.ObjectCheckForActionPostfix(StardewValley.Object,System.Boolean)">
            <summary>Adds foraging experience if a tapper or mushroom box was harvested.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectCheckForActionPatcher.ObjectCheckForActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Applies quality to aged bee house.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectDayUpdatePatcher.ObjectDayUpdatePostfix(StardewValley.Object)">
            <summary>Age bee houses and mushroom boxes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformDropDownActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformDropDownActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformDropDownActionPatcher.ObjectPerformDropDownActionPostfix(StardewValley.Object)">
            <summary>Clear the age of bee houses and mushroom boxes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformObjectDropInActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformObjectDropInActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformObjectDropInActionPatcher.ObjectPerformObjectDropInActionPrefix(StardewValley.Object,System.Boolean@)">
            <summary>Remember state before action.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.ObjectPerformObjectDropInActionPatcher.ObjectPerformObjectDropInActionPostfix(StardewValley.Object,System.Boolean,StardewValley.Item,System.Boolean)">
            <summary>Tweaks golden and ostrich egg artisan products + gives flower memory to kegs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.TreeDayUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.TreeDayUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.TreeDayUpdatePatcher.TreeDayUpdatePostfix(StardewValley.TerrainFeatures.Tree)">
            <summary>Age trees for quality tapper.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.TreeUpdateTapperProductPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Tweex.Patchers.TreeUpdateTapperProductPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Tweex.Patchers.TreeUpdateTapperProductPatcher.TreeUpdateTapperProductPostfix(StardewValley.TerrainFeatures.Tree,StardewValley.Object)">
            <summary>Adds age quality to tapper product.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.ComboHitStep">
            <summary>The hit steps of a <see cref="T:StardewValley.Tools.MeleeWeapon"/> combo.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.ComboHitStep.Idle">
            <summary>Not currently attacking.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.ComboHitStep.FirstHit">
            <summary>The first hit of the combo.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.ComboHitStep.SecondHit">
            <summary>The second hit of the combo.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.ComboHitStep.ThirdHit">
            <summary>The third hit of the combo.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.ComboHitStep.FourthHit">
            <summary>The fourth hit of the combo.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.ComboHitStep.Infinite">
            <summary>The infinity-th hit of the combo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.AdvanceQuestCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Commands.AdvanceQuestCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.AdvanceQuestCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.AdvanceQuestCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.AdvanceQuestCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.GetCustomItemCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Commands.GetCustomItemCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.GetCustomItemCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.GetCustomItemCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.GetCustomItemCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.RefreshWeaponCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Commands.RefreshWeaponCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.RefreshWeaponCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.RefreshWeaponCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.RefreshWeaponCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.SpecialMonstersCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Commands.SpecialMonstersCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.SpecialMonstersCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.SpecialMonstersCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.SpecialMonstersCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.SwordBlessCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Commands.SwordBlessCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.SwordBlessCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.SwordBlessCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.SwordBlessCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.SwordCurseCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Commands.SwordCurseCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.SwordCurseCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Commands.SwordCurseCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Commands.SwordCurseCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Config">
            <summary>The user-configurable settings for WPNZ.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Config.TooltipStyle">
            <summary>The style used to display stat bonuses in weapon tooltips.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Config.TooltipStyle.Absolute">
            <summary>Display the absolute value of the stat, minus it's default value for the weapon type.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Config.TooltipStyle.Relative">
            <summary>Display the relative value of the stat, with respect to the default value for the weapon type.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Config.TrialDifficulty">
            <summary>The difficulty level of the proven conditions for the virtue trials.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Config.TrialDifficulty.Easy">
            <summary>Easy.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Config.TrialDifficulty.Medium">
            <summary>Medium.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Config.TrialDifficulty.Hard">
            <summary>Hard.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.EnableRebalance">
            <summary>Gets a value indicating whether to apply all features relating to the weapon re-balance, including weapon tiers, shops, Mine chests and drops.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.WeaponTooltipStyle">
            <summary>Gets the style of the tooltips for displaying stat bonuses for weapons.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.ColorCodedForYourConvenience">
            <summary>Gets a value indicating whether to color-code weapon and slingshot names, <see href="https://tvtropes.org/pmwiki/pmwiki.php/Main/ColourCodedForYourConvenience">for your convenience</see>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.EnableComboHits">
            <summary>Gets a value indicating whether to replace vanilla weapon spam with a more strategic combo system.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.SwipeHold">
            <summary>Gets a value indicating whether to keep swiping while the "use tool" key is held.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.ComboHitsPerWeapon">
            <summary>Gets the number of hits in each weapon type's combo.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.EnableStabbySwords">
            <summary>Gets a value indicating whether replace the defensive special move of some swords with an offensive lunge move.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.StabbingSwords">
            <summary>Gets a set of user-defined modded swords which should be treated as Stabby swords.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.EnableRetexture">
            <summary>Gets a value indicating whether to apply the corresponding weapon retexture.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.DwarvenLegacy">
            <summary>Gets a value indicating whether to enable Clint's forging mechanic for Masterwork weapons.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.InfinityPlusOne">
            <summary>Gets a value indicating whether replace lame Galaxy and Infinity weapons with something truly legendary.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.IridiumBarsPerGalaxyWeapon">
            <summary>Gets a value indicating the number of Iridium Bars required to receive a Galaxy weapon.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.RuinBladeDotMultiplier">
            <summary>Gets a factor that can be used to reduce the Ruined Blade's damage-over-time effect.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.CanStoreRuinBlade">
            <summary>Gets a value indicating whether the Blade of Ruin can be deposited in chests.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.VirtueTrialTrialDifficulty">
            <summary>Gets a value indicating the difficulty of the proven conditions for each virtue trial.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.DefenseImprovesParry">
            <summary>Gets a value indicating whether defense should improve parry damage.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.GroundedClubSmash">
            <summary>Gets a value indicating whether to guarantee smash crit on Duggies and guarantee miss on gliders.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.WoodyReplacesRusty">
            <summary>Gets a value indicating whether replace the starting Rusty Sword with a Wooden Blade.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.FaceMouseCursor">
            <summary>Gets a value indicating whether face the current cursor position before swinging your weapon.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.SlickMoves">
            <summary>Gets a value indicating whether to allow drifting in the movement direction when swinging weapons.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.EnableAutoSelection">
            <summary>Gets a value indicating whether to allow auto-selecting a weapon or slingshot.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.SelectionKey">
            <summary>Gets the chosen mod key(s).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.SelectionBorderColor">
            <summary>Gets the <see cref="T:Microsoft.Xna.Framework.Color"/> used to indicate tools enabled or auto-selection.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Config.AutoSelectionRange">
            <summary>Gets a value indicating how close an enemy must be to auto-select a weapon, in tiles.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.DataKeys">
            <summary>Holds the string keys of mod data fields used by <see cref="F:DaLion.Overhaul.Modules.OverhaulModule.Weapons"/>.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Holy Blade.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment._OnEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.BlessedEnchantment._OnSwing(StardewValley.Tools.MeleeWeapon,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Dark Sword.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment._OnEquip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment._OnUnequip(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.CursedEnchantment._OnMonsterSlay(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.DaggerEnchantment">
            <summary>A secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> shared by all daggers.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.DaggerEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.DaggerEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.DaggerEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.DaggerEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.DaggerEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes Infinity weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment.CanApplyTo(StardewValley.Item)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment._OnSwing(StardewValley.Tools.MeleeWeapon,StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.KillerBugEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.KillerBugEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.KillerBugEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.KillerBugEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.KillerBugEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.LavaEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.LavaEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.LavaEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.LavaEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.LavaEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.LavaEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.NeedleEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeedleEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeedleEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeedleEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeedleEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.NeptuneEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeptuneEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeptuneEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeptuneEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.NeptuneEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.ObsidianEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.ObsidianEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.ObsidianEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.ObsidianEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.ObsidianEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.ObsidianEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Enchantments.YetiEnchantment">
            <summary>The secondary <see cref="T:StardewValley.BaseWeaponEnchantment"/> which characterizes the Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.YetiEnchantment.IsSecondaryEnchantment">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.YetiEnchantment.IsForge">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.YetiEnchantment.GetMaximumLevel">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.YetiEnchantment.ShouldBeDisplayed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Enchantments.YetiEnchantment._OnDealDamage(StardewValley.Monsters.Monster,StardewValley.GameLocation,StardewValley.Farmer,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.BlueprintDayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.BlueprintDayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.BlueprintDayStartedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.BlueprintDayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonPressedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonReleasedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonReleasedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboButtonReleasedEvent.OnButtonReleasedImpl(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboResetUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.ComboResetUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboResetUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.ComboResetUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.CurseUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.CurseUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.CurseUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.SlickMovesUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.SlickMovesUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.SlickMovesUpdateTickingEvent.OnUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.SpecialItemHandicapNpcListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.SpecialItemHandicapNpcListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Events.SpecialItemHandicapNpcListChangedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.SpecialItemHandicapNpcListChangedEvent.OnNpcListChangedImpl(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialHomingUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialHomingUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialHomingUpdateTickedEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialHomingUpdateTickedEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialHomingUpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialInterruptedButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialInterruptedButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialInterruptedButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialUpdateTickingEvent.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialUpdateTickingEvent.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.StabbingSwordSpecialUpdateTickingEvent.OnUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.SveWarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.SveWarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.SveWarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditBlacksmithEventsData(StardewModdingAPI.IAssetData)">
            <summary>Edits events data with custom Dwarvish Blueprint introduction event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditGilDialogue(StardewModdingAPI.IAssetData)">
            <summary>Patches custom Gil dialogue.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditLocationsStrings(StardewModdingAPI.IAssetData)">
            <summary>Edits location string data with custom legendary sword rhyme.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditMailData(StardewModdingAPI.IAssetData)">
            <summary>Patches mail data with mail from the Ferngill Revenue Service.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditMonstersData(StardewModdingAPI.IAssetData)">
            <summary>Edits monsters data for ancient weapon crafting materials.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditObjectInformationData(StardewModdingAPI.IAssetData)">
            <summary>Edits galaxy soul description.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditProjectilesTileSheet(StardewModdingAPI.IAssetData)">
            <summary>Adds the infinity enchantment projectile.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditQuestsData(StardewModdingAPI.IAssetData)">
            <summary>Edits quests data with custom Dwarvish Blueprint introduction quest.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditSveEventsData(StardewModdingAPI.IAssetData)">
            <summary>Edits Marlon's Galaxy Sword event in SVE, removing references to purchasable Galaxy weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditWeaponsData(StardewModdingAPI.IAssetData)">
            <summary>Edits weapons data with rebalanced stats.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditWeaponsTileSheetEarly(StardewModdingAPI.IAssetData)">
            <summary>Edits weapons tilesheet with touched up textures.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditWeaponsTileSheetLate(StardewModdingAPI.IAssetData)">
            <summary>Edits weapons tilesheet with touched up textures.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponAssetRequestedEvent.EditWizardEventsData(StardewModdingAPI.IAssetData)">
            <summary>Edits events data with custom Blade of Ruin introduction event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.WeaponButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Events.WeaponButtonPressedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponGameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.WeaponGameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponGameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavedEvent.OnSavedImpl(System.Object,StardewModdingAPI.Events.SavedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponSaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.WeaponSaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponSaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavingEvent.InstrinsicWeapons">
            <summary>Gets the cache of weapons with intrinsic enchantments.</summary>
            <remarks>For recovery immediately after saving.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Events.WeaponSavingEvent.OnSavingImpl(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Extensions.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.FarmerExtensions.GetTotalSwingSpeedModifier(StardewValley.Farmer,StardewValley.Tools.MeleeWeapon)">
            <summary>Gets the total swing speed modifier for the <paramref name="farmer"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="weapon">The <paramref name="farmer"/>'s weapon.</param>
            <returns>The total swing speed modifier, a number between 0 and 1.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.FarmerExtensions.IsCursed(StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="farmer"/> suffers from Viego's curse.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="farmer"/> has received the Dark Sword but not the Holy Blade, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.FarmerExtensions.IsCursed(StardewValley.Farmer,StardewValley.Tools.MeleeWeapon@)">
            <summary>Checks whether the <paramref name="farmer"/> suffers from Viego's curse.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="darkSword">The curse's origin.</param>
            <returns><see langword="true"/> if the <paramref name="farmer"/> has received the Dark Sword but not the Holy Blade, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.FarmerExtensions.NumMonsterSlayerQuestsCompleted(StardewValley.Farmer)">
            <summary>Counts the number of completed Monster Eradication goals.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The number of completed Monster Eradication goals.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Tools.MeleeWeapon"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.IsInfinityWeapon(StardewValley.Tools.MeleeWeapon)">
            <summary>Determines whether the <paramref name="weapon"/> is an Infinity weapon.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/>'s index correspond to one of the Infinity weapon, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.IsCursedOrBlessed(StardewValley.Tools.MeleeWeapon)">
            <summary>Determines whether the <paramref name="weapon"/> is an Infinity weapon.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/>'s index corresponds to either Dark Sword or Holy Blade, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.IsUnique(StardewValley.Tools.MeleeWeapon)">
            <summary>Determines whether the <paramref name="weapon"/> is unique.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a Galaxy, Infinity or other unique weapon, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.IsRelic(StardewValley.Tools.MeleeWeapon)">
            <summary>Determines whether the <paramref name="weapon"/> is a mythic relic weapon.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a Galaxy, Infinity or other unique weapon, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.IsLegacyWeapon(StardewValley.Tools.MeleeWeapon)">
            <summary>Determines whether the <paramref name="weapon"/> is a legacy Dwarven weapon.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> if DwarvenLegacy option is enabled and the weapon is a Dwarven, Dragontooth or Elven weapon, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.ShouldBeStabbySword(StardewValley.Tools.MeleeWeapon)">
            <summary>Determines whether the <paramref name="weapon"/> should be converted to stabbing sword.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is StabbySwords option is enabled and the weapon should be a stabbing sword, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.DefaultCritChance(StardewValley.Tools.MeleeWeapon)">
            <summary>Gets the default crit. chance for this weapon type.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns>The default crit. chance for the weapon type.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.DefaultCritPower(StardewValley.Tools.MeleeWeapon)">
            <summary>Gets the default crit. power for this weapon type.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns>The default crit. power for the weapon type.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.GetFinalHitStep(StardewValley.Tools.MeleeWeapon)">
            <summary>Gets the maximum number of hits in a combo for this <paramref name="weapon"/>.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns>The final <see cref="T:DaLion.Overhaul.Modules.Weapons.ComboHitStep"/> for <paramref name="weapon"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.RefreshStats(StardewValley.Tools.MeleeWeapon,DaLion.Overhaul.Modules.Weapons.RefreshOption)">
            <summary>Refreshes the stats of the specified <paramref name="weapon"/>.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <param name="option">The <see cref="T:DaLion.Overhaul.Modules.Weapons.RefreshOption"/>.</param>
            <returns>The modified <paramref name="weapon"/>, for use by transpilers.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.RandomizeDamage(StardewValley.Tools.MeleeWeapon,System.Double)">
            <summary>Randomizes the damage of the <paramref name="weapon"/>.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <param name="bias">An optional bias to influence the range of allowed damage values (positive values mean higher stats on average).</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.ShouldRandomizeDamage(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/>'s damage should be randomized.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a Galaxy, Infinity or other unique weapon, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.AddIntrinsicEnchantments(StardewValley.Tools.MeleeWeapon)">
            <summary>Adds hidden weapon enchantments related to Rebalance or Infinity +1.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.RemoveIntrinsicEnchantments(StardewValley.Tools.MeleeWeapon)">
            <summary>Removes hidden weapon enchantments related Rebalance or Infinity +1.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.HasIntrinsicEnchantment(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/> has one of the special intrinsic enchantments.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> has an intrinsic mythic or legendary enchantment, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MeleeWeaponExtensions.ShouldHaveIntrinsicEnchantment(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/> should have one of the special intrinsic enchantments.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/>'s index corresponds to one of the mythic or legendary weapons with intrinsic enchantments, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Extensions.MineShaftExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Locations.MineShaft"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MineShaftExtensions.ChooseOre(StardewValley.Locations.MineShaft)">
            <summary>Selects an appropriate ore for the current mine level.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/>.</param>
            <returns>An ore index.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MineShaftExtensions.ChooseGem(StardewValley.Locations.MineShaft)">
            <summary>Selects an appropriate gemstone for the current mine level.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/>.</param>
            <returns>A gemstone index.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MineShaftExtensions.ChooseGeode(StardewValley.Locations.MineShaft)">
            <summary>Selects an appropriate geode for the current mine level.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/>.</param>
            <returns>A geode index.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Extensions.MineShaftExtensions.ChooseForageMineral(StardewValley.Locations.MineShaft)">
            <summary>Selects an appropriate ore for the current mine level.</summary>
            <param name="shaft">The <see cref="T:StardewValley.Locations.MineShaft"/>.</param>
            <returns>An ore index.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.JsonAssetsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Integrations.JsonAssetsIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.JsonAssetsIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.JsonAssetsIntegration.OnIdsAssigned(System.Object,System.EventArgs)">
            <summary>Gets assigned IDs.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.SimpleWeaponsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Integrations.SimpleWeaponsIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.SimpleWeaponsIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.SpaceCoreIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Integrations.SpaceCoreIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.SpaceCoreIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.StardewValleyExpandedIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Integrations.StardewValleyExpandedIntegration"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.VanillaTweaksIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Integrations.VanillaTweaksIntegration"/> class.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Integrations.VanillaTweaksIntegration.WeaponsCategoryEnabled">
            <summary>Gets a value indicating whether the <c>RingsCategoryEnabled</c> config setting is enabled.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Integrations.VanillaTweaksIntegration.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.BreakableContainerReleaseContentsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.BreakableContainerReleaseContentsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.BreakableContainerReleaseContentsPatcher.BreakableContainerReleaseContentsPrefix(StardewValley.Objects.BreakableContainer,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>Better weapon odds from mine containers.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.BluePrintCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.BluePrintCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.BluePrintCtorPatcher.BluePrintCtorPostfix(StardewValley.BluePrint)">
            <summary>Remove Dragon Tooth from Obelisk blueprint.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ChestPerformOpenChestPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ChestPerformOpenChestPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ChestPerformOpenChestPatcher.ChestPerformOpenChestPostfix(StardewValley.Objects.Chest)">
            <summary>Inject blueprint chest rewards.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.CraftingRecipeCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.CraftingRecipeCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.CraftingRecipeCtorPatcher.CraftingRecipeCtorPostfix(StardewValley.CraftingRecipe)">
            <summary>Remove Dragon Tooth from Warp Totem recipe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.EventEndBehaviorsPatch.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.EventEndBehaviorsPatch"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.EventEndBehaviorsPatch.EventEndBehaviorsPostfix(StardewValley.Event)">
            <summary>Subscribe to blueprint translation event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCanUnderstandDwarvesSetterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCanUnderstandDwarvesSetterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCanUnderstandDwarvesSetterPatcher.FarmerCanUnderstandDwarvesSetterPostfix">
            <summary>Try to patch in Clint's event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCouldInventoryAcceptThisItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCouldInventoryAcceptThisItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCouldInventoryAcceptThisItemPatcher.FarmerCouldInventoryAcceptThisItemPrefix(System.Boolean@,StardewValley.Item)">
            <summary>Allow picking up blueprints.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCouldInventoryAcceptThisObjectPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCouldInventoryAcceptThisObjectPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerCouldInventoryAcceptThisObjectPatcher.FarmerCouldInventoryAcceptThisObjectPrefix(System.Boolean@,System.Int32)">
            <summary>Allow picking up blueprints.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerShowHoldingItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerShowHoldingItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.FarmerShowHoldingItemPatcher.FarmerShowHoldingItemPrefix(StardewValley.Farmer)">
            <summary>Show Dwarvish Blueprint on obtain.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.GameLocationAnswerDialogueActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.GameLocationAnswerDialogueActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.GameLocationAnswerDialogueActionPatcher.GameLocationAnswerDialogueActionPrefix(System.Boolean@,System.String)">
            <summary>Respond to grab Dark Sword proposition + blacksmith forge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.GameLocationBlacksmithPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.GameLocationBlacksmithPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.GameLocationBlacksmithPatcher.GameLocationBlacksmithTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Inject forging.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.IslandNorthGetIslandMerchantTradeStockPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.IslandNorthGetIslandMerchantTradeStockPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.IslandNorthGetIslandMerchantTradeStockPatcher.IslandNorthGetIslandMerchantTradeStockPostfix(System.Collections.Generic.Dictionary{StardewValley.ISalable,System.Int32[]})">
            <summary>Remove Dragon Tooth from Island Trader.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ItemGrabMenuReceiveLeftClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ItemGrabMenuReceiveLeftClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ItemGrabMenuReceiveLeftClickPatcher.ItemGrabMenuReceiveLeftClickTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Make Dwarvish Blueprint go *poof*.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.NpcCheckForNewCurrentDialoguePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.NpcCheckForNewCurrentDialoguePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.NpcCheckForNewCurrentDialoguePatcher.NpcCheckForNewCurrentDialoguePrefix(StardewValley.NPC)">
            <summary>Add special custom dialogue.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ObjectCheckForSpecialItemHoldUpMessagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ObjectCheckForSpecialItemHoldUpMessagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ObjectCheckForSpecialItemHoldUpMessagePatcher.ObjectCheckForSpecialItemHoldUpPrefix(StardewValley.Object,System.String@)">
            <summary>Add Dwarvish Blueprint obtain message.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuChargePlayerPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuChargePlayerPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuChargePlayerPatcher.ShopMenuChargePlayerPrefix(StardewValley.Farmer,System.Int32,System.Int32)">
            <summary>Set up Clint's forge shop.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuGetPlayerCurrencyAmountPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuGetPlayerCurrencyAmountPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuGetPlayerCurrencyAmountPatcher.ShopMenuGetPlayerCurrencyAmountPrefix(System.Int32@,StardewValley.Farmer,System.Int32)">
            <summary>Set up Clint's forge shop.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuSetUpShopOwnerPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuSetUpShopOwnerPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ShopMenuSetUpShopOwnerPatcher.ShopMenuSetUpShopOwnerPrefix(StardewValley.Menus.ShopMenu,System.String)">
            <summary>Set up Clint's forge shop.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ToolActionWhenPurchasedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ToolActionWhenPurchasedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Dwarven.ToolActionWhenPurchasedPatcher.ToolActionWhenPurchasedPostfix(StardewValley.Tool,System.Boolean@)">
            <summary>Inject forging.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerFoundArtifactPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerFoundArtifactPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerFoundArtifactPatcher.FarmerFoundArtifactPrefix(StardewValley.Farmer,System.Int32)">
            <summary>Trigger blueprint reward.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerCanMoveNowPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerCanMoveNowPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerCanMoveNowPatcher.FarmerCanMoveNowPostfix(StardewValley.Farmer)">
            <summary>Reset animation state.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowSwordSwipePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowSwordSwipePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowSwordSwipePatcher.FarmerShowSwordSwipePrefix(StardewValley.Farmer)">
            <summary>Show combo swipe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowSwordSwipePatcher.FarmerShowSwordSwipeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Show novelty colors if combo hits is disabled.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowToolSwipeEffectPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowToolSwipeEffectPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerShowToolSwipeEffectPatcher.FarmerShowToolSwipeEffectTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Infinity-colored overhead swipe.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerSpriteGetAnimationFromIndexPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerSpriteGetAnimationFromIndexPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerSpriteGetAnimationFromIndexPatcher.FarmerSpriteGetAnimationFromIndexPrefix(System.Int32,StardewValley.FarmerSprite)">
            <summary>Do weapon combo.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FarmerTakeDamagePatcher.FarmerTakeDamagePrefix(StardewValley.Farmer)">
            <summary>Grant i-frames during Stabbing Sword lunge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FishingRodOpenTreasureMenuEndFunctionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.FishingRodOpenTreasureMenuEndFunctionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.FishingRodOpenTreasureMenuEndFunctionPatcher.FishingRodOpenTreasureMenuEndFunctionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Prevent obtaining copies of Neptune's Glaive.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationDamageMonsterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationDamageMonsterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterPrefix(System.Single@,System.Single@,StardewValley.Farmer)">
            <summary>KillerBug, Needle and Neptune enchantment effects.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationDamageMonsterPatcher.GameLocationDamageMonsterTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Guaranteed crit on underground Duggy from club smash attack + record knockback and crit + slingshot special stun.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationIsMonsterDamageApplicablePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationIsMonsterDamageApplicablePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationIsMonsterDamageApplicablePatcher.GameLocationIsMonsterDamageApplicablePrefix(System.Boolean@,StardewValley.Farmer,StardewValley.Monsters.Monster)">
            <summary>Club smash aoe ignores gliders.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationMonsterDropPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationMonsterDropPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.GameLocationMonsterDropPatcher.GameLocationMonsterDropPostfix(StardewValley.GameLocation,StardewValley.Monsters.Monster,System.Int32,System.Int32,StardewValley.Farmer)">
            <summary>Drop Obsidian Edge and Lava Katana.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.IClickableMenuDrawHoverTextPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.IClickableMenuDrawHoverTextPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.IClickableMenuDrawHoverTextPatcher.IClickableMenuDrawHoverTextTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Set hover text color for legendary weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.AdventurerGuildGilPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.AdventurerGuildGilPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.AdventurerGuildGilPatcher.AdventurerGuildGilPostfix">
            <summary>Record Gil flag.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.BaseEnchantmentGetEnchantmentFromItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.BaseEnchantmentGetEnchantmentFromItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.BaseEnchantmentGetEnchantmentFromItemPatcher.BaseEnchantmentGetEnchantmentFromItemPostfix(StardewValley.BaseEnchantment@,StardewValley.Item)">
            <summary>Allow Hero Soul forge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.BatGetExtraDropItemsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.BatGetExtraDropItemsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.BatGetExtraDropItemsPatcher.BatGetExtraDropItemsTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Remove Dark Sword drop from Bat.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ChestAddItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ChestAddItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ChestAddItemPatcher.ChestAddItemPrefix(StardewValley.Item@,StardewValley.Item)">
            <summary>Prevent depositing Dark Sword.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.CommunityUpgradeAcceptPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.CommunityUpgradeAcceptPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.CommunityUpgradeAcceptPatcher.CommunityUpgradeAcceptTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Complete Generosity quest.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.DialogueChooseResponsePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.DialogueChooseResponsePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.DialogueChooseResponsePatcher.EventAnswerDialoguePostfix(StardewValley.Dialogue,StardewValley.Response)">
            <summary>Record virtues after dialogue response. This works for questions triggered by the `$q` dialogue command.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.EventAnswerDialoguePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.EventAnswerDialoguePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.EventAnswerDialoguePatcher.EventAnswerDialoguePostfix(StardewValley.Event,System.Int32)">
            <summary>Record virtues after dialogue response. This works for questions triggered by the `question` event command.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.FarmerCurrentToolIndexSetterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.FarmerCurrentToolIndexSetterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.FarmerCurrentToolIndexSetterPatcher.FarmerCurrentToolIndexPostfix(StardewValley.Farmer,System.Int32@)">
            <summary>Auto-equip cursed weapon.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.FarmerVisibleQuestCountGetterPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.FarmerVisibleQuestCountGetterPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.FarmerVisibleQuestCountGetterPatcher.FarmerVisibleQuestCountGetterPostfix(StardewValley.Farmer,System.Int32@)">
            <summary>Consider Virtues quest as visible.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuIsValidCraftIngredientPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuIsValidCraftIngredientPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuIsValidCraftIngredientPatcher.ForgeMenuIsValidCraftIngredientPostfix(System.Boolean@,StardewValley.Item)">
            <summary>Allow forging with Hero Soul.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuIsValidUnforgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuIsValidUnforgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuIsValidUnforgePatcher.ForgeMenuIsValidUnforgePostfix(StardewValley.Menus.ForgeMenu,System.Boolean@)">
            <summary>Allow unforge Holy Blade.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuSpendRightItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuSpendRightItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuSpendRightItemPatcher.ForgeMenuSpendRightItemPrefix(StardewValley.Menus.ForgeMenu)">
            <summary>Prevent spending Hero Soul.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ForgeMenuUpdatePatcher.ForgeMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Implement unforge behavior of Holy Blade.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationAnswerDialogueActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationAnswerDialogueActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationAnswerDialogueActionPatcher.GameLocationAnswerDialogueActionPrefix(System.Boolean@,System.String)">
            <summary>Respond to grab Dark Sword proposition + blacksmith forge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationGetGalaxySwordPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationGetGalaxySwordPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationGetGalaxySwordPatcher.GameLocationGetGalaxySwordPrefix">
            <summary>Convert cursed -> blessed enchantment + galaxysoul -> infinity enchatnment.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationPerformActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationPerformActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationPerformActionPatcher.GameLocationPerformActionPrefix(StardewValley.GameLocation,System.String,StardewValley.Farmer)">
            <summary>Add Dark Sword + transformation.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationPerformTouchActionPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationPerformTouchActionPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.GameLocationPerformTouchActionPatcher.GameLocationPerformTouchActionTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Apply new galaxy sword conditions.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ItemGrabMenuCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ItemGrabMenuCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ItemGrabMenuCtorPatcher.ItemGrabMenuCtorPrefix(StardewValley.Menus.ItemGrabMenu,StardewValley.Menus.InventoryMenu.highlightThisItem@)">
            <summary>Replace highlighting method.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponCanAddEnchantmentPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponCanAddEnchantmentPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponCanAddEnchantmentPatcher.MeleeWeaponCanAddEnchantmentPrefix(StardewValley.Tools.MeleeWeapon,System.Boolean@,StardewValley.BaseEnchantment)">
            <summary>Allow forge Galaxy with Infinity.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponCheckForSpecialItemHoldUpMessagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponCheckForSpecialItemHoldUpMessagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponCheckForSpecialItemHoldUpMessagePatcher.MeleeWeaponCheckForSpecialItemHoldUpPostfix(StardewValley.Tools.MeleeWeapon,System.String@)">
            <summary>Add obtain legendary weapon messages.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponTransformPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponTransformPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MeleeWeaponTransformPatcher.MeleeWeaponTransformPrefix(StardewValley.Tools.MeleeWeapon,System.Int32)">
            <summary>Convert cursed -> blessed enchantment + galaxysoul -> infinity enchatnment.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MummyTakeDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MummyTakeDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.MummyTakeDamagePatcher.MummyTakeDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Crusader effect for intrinsic enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.NpcCheckForNewCurrentDialoguePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.NpcCheckForNewCurrentDialoguePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.NpcCheckForNewCurrentDialoguePatcher.NpcCheckForNewCurrentDialoguePrefix(StardewValley.NPC)">
            <summary>Add special custom dialogue.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.NpcReceiveGiftPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.NpcReceiveGiftPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.NpcReceiveGiftPatcher.CommunityUpgradeAcceptPostfix(StardewValley.Object,StardewValley.Farmer)">
            <summary>Complete Generosity quest.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.QuestLogDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.QuestLogDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.QuestLogDrawPatcher.QuestLogDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Draw Virtues quest objectives.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.QuestLogPaginateQuestsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.QuestLogPaginateQuestsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.QuestLogPaginateQuestsPatcher.QuestLogPaginateQuestsPostfix(System.Collections.Generic.List{System.Collections.Generic.List{StardewValley.Quests.IQuest}})">
            <summary>Replace highlighting method.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ShopMenuHighlightItemToSellPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ShopMenuHighlightItemToSellPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ShopMenuHighlightItemToSellPatcher.ShopMenuHighlightItemToSellPostfix(System.Boolean@,StardewValley.Item)">
            <summary>Replace highlighting method.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ToolForgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ToolForgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Infinity.ToolForgePatcher.ToolForgeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Require Hero Soul to transform Galaxy into Infinity.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.StorageAddItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.StorageAddItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.StorageAddItemPatcher.StorageAddItemPrefix(StardewValley.Item@,StardewValley.Item)">
            <summary>Prevent depositing Dark Sword.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuIsValidCraftIngredientPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuIsValidCraftIngredientPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuIsValidCraftIngredientPatcher.NewForgeMenuIsValidCraftIngredientPostfix(System.Boolean@,StardewValley.Item)">
            <summary>Allow forging with Hero Soul.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuIsValidUnforgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuIsValidUnforgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuIsValidUnforgePatcher.NewForgeMenuIsValidUnforgePostfix(SpaceCore.Interface.NewForgeMenu,System.Boolean@)">
            <summary>Allow unforge Holy Blade.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuSpendRightItemPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuSpendRightItemPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuSpendRightItemPatcher.NewForgeMenuSpendRightItemPrefix(SpaceCore.Interface.NewForgeMenu)">
            <summary>Prevent spending Hero Soul.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuUpdatePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuUpdatePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.NewForgeMenuUpdatePatcher.NewForgeMenuUpdateTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Modify unforge behavior of Holy Blade.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.UtilityGetShopStockPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.UtilityGetShopStockPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Integration.UtilityGetShopStockPatcher.UtilityGetShopStockPostfix(System.Object,System.Collections.Generic.Dictionary{StardewValley.ISalable,System.Int32[]})">
            <summary>Prevents Tempered Galaxy weapons from being sold.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Common.InventoryPageDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Common.InventoryPageDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Common.InventoryPageDrawPatcher.InventoryPageDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Draw selectable indicator.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.InventoryPageReceiveClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.InventoryPageReceiveClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.InventoryPageReceiveClickPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.InventoryPageReceiveClickPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.InventoryPageReceiveClickPatcher.InventoryPageReceiveClickPrefix(StardewValley.Item,System.Boolean)">
            <summary>Toggle selectable tool.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponAnimateSpecialMovePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponAnimateSpecialMovePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponAnimateSpecialMovePatcher.MeleeWeaponAnimateSpecalMovePrefix(StardewValley.Tools.MeleeWeapon,StardewValley.Farmer@,StardewValley.Farmer)">
            <summary>Trigger Stabbing Sword lunge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponCanAddEnchantmentPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponCanAddEnchantmentPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponCanAddEnchantmentPatcher.MeleeWeaponCanAddEnchantmentPrefix(StardewValley.Tools.MeleeWeapon,System.Boolean@,StardewValley.BaseEnchantment)">
            <summary>Prevent Mythic weapons from receiving additional enchantments.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponCtorPatcher.MeleeWeaponCtorPostfix(StardewValley.Tools.MeleeWeapon)">
            <summary>Convert stabby swords + add intrinsic enchants.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDefaultKnockbackForThisTypePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDefaultKnockbackForThisTypePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDefaultKnockbackForThisTypePatcher.MeleeWeaponDefaultKnockbackForThisTypePrefix(StardewValley.Tools.MeleeWeapon,System.Single@,System.Int32)">
            <summary>Rebalance knockback for all weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDoDamagePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDoDamagePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDoDamagePatcher.MeleeWeaponDoDamageTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Override `special = false` for Stabbing Sword + inject resonance bonuses.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDoSwipePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDoSwipePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDoSwipePatcher.MeleeWeaponDoSwipePrefix(StardewValley.Tools.MeleeWeapon,System.Int32,System.Single,StardewValley.Farmer)">
            <summary>Allows swiping stabbing sword + removes redundant code.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawDuringUsePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawDuringUsePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawDuringUsePatcher.MeleeWeaponDrawDuringUsePrefix(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer,Microsoft.Xna.Framework.Rectangle,System.Int32,System.Boolean)">
            <summary>Draw during combos + stabby lunge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawInMenuPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawInMenuPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawInMenuPatcher.MeleeWeaponDrawInMenuTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Draw Stabbing Sword cooldown.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawTooltipPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawTooltipPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponDrawTooltipPatcher.MeleeWeaponDrawTooltipPrefix(StardewValley.Tools.MeleeWeapon,Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32@,System.Int32@,Microsoft.Xna.Framework.Graphics.SpriteFont,System.Single)">
            <summary>Make weapon stats human-readable..</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetAreaOfEffectPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetAreaOfEffectPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetAreaOfEffectPatcher.MeleeWeaponGetAreaOfEffectPrefix(StardewValley.Tools.MeleeWeapon,Microsoft.Xna.Framework.Rectangle@,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Vector2@,Microsoft.Xna.Framework.Rectangle)">
            <summary>Fix combo swipe and Stabbing Sword lunge hitboxes.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetAreaOfEffectPatcher.MeleeWeaponGetAreaOfEffectPostfix(StardewValley.Tools.MeleeWeapon,Microsoft.Xna.Framework.Rectangle@)">
            <summary>More generous club aoe during combo smash.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetItemLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetItemLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetItemLevelPatcher.MeleeWeaponGetItemLevelPrefix(StardewValley.Tools.MeleeWeapon,System.Int32@)">
            <summary>Adjust weapon level.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetMaxForgesPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetMaxForgesPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetMaxForgesPatcher.MeleeWeaponGetMaxForgesPrefix(StardewValley.Tools.MeleeWeapon,System.Int32@)">
            <summary>Custom forge slots for weapons + extra slot for Infinity enchant.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetNumberOfDescriptionCategoriesPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetNumberOfDescriptionCategoriesPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponGetNumberOfDescriptionCategoriesPatcher.MeleeWeaponGetNumberOfDescriptionCategoriesPrefix(StardewValley.Tools.MeleeWeapon,System.Int32@)">
            <summary>Correct number of description categories.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponLeftClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponLeftClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponLeftClickPatcher.MeleeWeaponLeftClickPrefix(StardewValley.Tools.MeleeWeapon)">
            <summary>Eliminate dumb vanilla weapon spam.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponRecalculateAppliedForgesPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponRecalculateAppliedForgesPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponRecalculateAppliedForgesPatcher.MeleeWeaponRecalculateAppliedForgedPrefix(StardewValley.Tools.MeleeWeapon,System.Boolean)">
            <summary>Apply custom stats if necessary.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponSalePricePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponSalePricePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponSalePricePatcher.MeleeWeaponGetItemLevelPrefix(StardewValley.Tools.MeleeWeapon,System.Int32@)">
            <summary>Adjust weapon sell price by level.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponSetFarmerAnimatingPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponSetFarmerAnimatingPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MeleeWeaponSetFarmerAnimatingPatcher.MeleeWeaponSetFarmerAnimatingTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Movement speed does not affect swing speed + remove weapon enchantment OnSwing effect (handled in custom logic).</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftAddLevelChestsPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftAddLevelChestsPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftAddLevelChestsPatcher.MineShaftAddLevelChestsPrefix(StardewValley.Locations.MineShaft)">
            <summary>Cheapen mine chests to avoid trivializing gear.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftGetSpecialItemForThisMineLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftGetSpecialItemForThisMineLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftGetSpecialItemForThisMineLevelPatcher.MineShaftGetSpecialItemForThisMineLevelPrefix(StardewValley.Item@,System.Int32)">
            <summary>More consistent special item drops.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftMonsterDropPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftMonsterDropPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftMonsterDropPatcher.MineShaftMonsterDropTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Better monster weapons.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftPopulateLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftPopulateLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MineShaftPopulateLevelPatcher.MineShaftPopulateLevelTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Spawn some more containers.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MonsterHandleParriedPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.MonsterHandleParriedPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.MonsterHandleParriedPatcher.MonsterHandleParriedPrefix(System.Boolean@,System.Object)">
            <summary>Defense increases parry damage.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolActionWhenStopBeingHeldPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.ToolActionWhenStopBeingHeldPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolActionWhenStopBeingHeldPatcher.ToolActionWhenStopBeingHeldPostfix(StardewValley.Tool,StardewValley.Farmer)">
            <summary>Reset combo hit counter.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarDrawPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarDrawPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarDrawPatcher.ToolbarDrawTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.MethodBase)">
            <summary>Draw selectable indicator.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarReceiveClickPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarReceiveClickPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarReceiveClickPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarReceiveClickPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolbarReceiveClickPatcher.ToolbarReceiveClickPrefix(StardewValley.Item,System.Boolean)">
            <summary>Toggle selectable tool.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolForgePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.ToolForgePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.ToolForgePatcher.ToolForgePostfix(StardewValley.Tool,System.Boolean)">
            <summary>Invalidate stats on forge.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetAdventureShopStockPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetAdventureShopStockPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetAdventureShopStockPatcher.UtilityGetAdventureShopStockPrefix(System.Collections.Generic.Dictionary{StardewValley.ISalable,System.Int32[]}@)">
            <summary>More consistent Adventurer Guild shop.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetAdventureShopStockPatcher.UtilityGetAdventureShopStockPostfix(System.Collections.Generic.Dictionary{StardewValley.ISalable,System.Int32[]})">
            <summary>Remove Galaxy weapons from shop, if the weapon rebalance is disabled.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetUncommonItemForThisMineLevelPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetUncommonItemForThisMineLevelPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.UtilityGetUncommonItemForThisMineLevelPatcher.UtilityGetUncommonItemForThisMineLevelPostfix(StardewValley.Item)">
            <summary>Randomize Mine drops.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCommandAwardFestivalPrizePatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCommandAwardFestivalPrizePatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCommandAwardFestivalPrizePatcher.EventCommandAwardFestivalPrizeTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Replaces rusty sword with wooden blade in Marlon's intro event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCommandItemAboveHeadPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCommandItemAboveHeadPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCommandItemAboveHeadPatcher.EventCommandItemAboveHeadTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Replaces rusty sword with wooden blade in Marlon's intro event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCtorPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCtorPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventCtorPatcher.EventCtorPrefix(System.String@,System.Int32)">
            <summary>Immersively adjust Marlon's intro event.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventSkipEventPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventSkipEventPatcher"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Patchers.Woody.EventSkipEventPatcher.EventSkipEventTranspiler(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction},System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
            <summary>Replaces rusty sword with wooden blade in Marlon's intro event.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile">
            <summary>A beam of energy fired by <see cref="T:StardewValley.Tools.MeleeWeapon"/>s with the <see cref="T:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile"/> class.</summary>
            <remarks>Required for multiplayer syncing.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile.#ctor(StardewValley.Tools.MeleeWeapon,StardewValley.Farmer,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile"/> class.</summary>
            <param name="source">The <see cref="T:StardewValley.Tools.MeleeWeapon"/> which fired this projectile.</param>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired this projectile.</param>
            <param name="startingPosition">The projectile's starting position.</param>
            <param name="xVelocity">The projectile's starting velocity in the horizontal direction.</param>
            <param name="yVelocity">The projectile's starting velocity in the vertical direction.</param>
            <param name="rotation">The projectile's starting rotation.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile.behaviorOnCollisionWithMonster(StardewValley.NPC,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.InfinityProjectile.update(Microsoft.Xna.Framework.GameTime,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Projectiles.LightBeamProjectile">
            <summary>A beam of energy fired by <see cref="T:StardewValley.Tools.MeleeWeapon"/>s with the <see cref="T:DaLion.Overhaul.Modules.Weapons.Enchantments.InfinityEnchantment"/>.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.LightBeamProjectile.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Projectiles.LightBeamProjectile"/> class.</summary>
            <remarks>Required for multiplayer syncing.</remarks>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.LightBeamProjectile.#ctor(StardewValley.Tools.MeleeWeapon,StardewValley.Farmer,Microsoft.Xna.Framework.Vector2,System.Single,System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Projectiles.LightBeamProjectile"/> class.</summary>
            <param name="source">The <see cref="T:StardewValley.Tools.MeleeWeapon"/> which fired this projectile.</param>
            <param name="firer">The <see cref="T:StardewValley.Farmer"/> who fired this projectile.</param>
            <param name="startingPosition">The projectile's starting position.</param>
            <param name="xVelocity">The projectile's starting velocity in the horizontal direction.</param>
            <param name="yVelocity">The projectile's starting velocity in the vertical direction.</param>
            <param name="rotation">The projectile's starting rotation.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Projectiles.LightBeamProjectile.behaviorOnCollisionWithMonster(StardewValley.NPC,StardewValley.GameLocation)">
            <inheritdoc />
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Quest.ForgeIntro">
            <summary>The initial quest which introduces the forging mechanic.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Quest.ForgeNext">
            <summary>The follow-up forging quest for collecting all Dwarven blueprints.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Quest.CurseIntro">
            <summary>The initial quest which introduces Viego's curse.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Quest.HeroJourney">
            <summary>The overarching quest to all the virtue trials.</summary>
            <remarks>No longer used since 2.2.4.</remarks>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Quest.HeroReward">
            <summary>The quest which concludes hero's journey.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.RefreshOption">
            <summary>The option with which to refresh a <see cref="T:StardewValley.Tools.MeleeWeapon"/>'s damage stats.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.RefreshOption.Initial">
            <summary>Restores the <see cref="T:StardewValley.Tools.MeleeWeapon"/>'s initial stats if available.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.RefreshOption.FromData">
            <summary>Forcefully set the <see cref="T:StardewValley.Tools.MeleeWeapon"/>'s stats to the default values from the game's data.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.RefreshOption.Randomized">
            <summary>Forcefully randomizes the <see cref="T:StardewValley.Tools.MeleeWeapon"/>'s stats according the player's current progression.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.State">
            <summary>The runtime state variables for WPNZ.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.Virtue">
            <summary>Represents one of the five heroic virtues.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Virtue.Honor">
            <summary>
                Honor cannot be purchased. Honor also cannot be sold, for its value is greater than all the treasure in the world.
                Yet one can lose it, and whoever does so shall have sullied his name for all eternity. A truly honorable man always
                stands behind his actions, faces every challenge and refuses to lie.
            </summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Virtue.Compassion">
            <summary>
                There are many traits that bear witness to a man's true nature. Compassion is what separates men from beasts.
                Whoever feels sympathy for his fellow man will never turn a blind eye to misfortune. He will always stand in
                defense of the wronged.
            </summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Virtue.Wisdom">
            <summary>
                Wisdom is a virtue which one should strive to cultivate throughout one's life, for it is impossible to be so wise
                one cannot become even wiser. The wise know this... As we journey through life, we should seek to make wise choices
                Remember, wise choices are not those which make our lives easier or simpler. Often, they make them more complicated.
                But always, they make us better.
            </summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Virtue.Generosity">
            <summary>
                No man can be called good who does not share his prosperity with others. Generosity is required for dignity
                in life and peace in death.
            </summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.Virtue.Valor">
            <summary>
                Valor does not make one good, yet how many good men have you met in your life's journey who were cowards?
                Those who posses valor do not hesitate to stand against the majority, no matter what the consequences.
            </summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Virtue.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/> class.</summary>
            <param name="name">The name of the virtue.</param>
            <param name="value">The ID of the associated quest.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Virtue.DisplayName">
            <summary>Gets the localized display name for this <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Virtue.FlavorText">
            <summary>Gets the localized flavor inscription text for this <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.Virtue.ProvenCondition">
            <summary>Gets the threshold required to consider this <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/> as proven.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Virtue.AllProven(StardewValley.Farmer)">
            <summary>Checks if the <paramref name="farmer"/> has met the conditions for all virtues.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if all five virtue's conditions have been met, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Virtue.Proven(StardewValley.Farmer)">
            <summary>Checks if the <paramref name="farmer"/> has met the condition for this <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the virtue's condition has been met, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.Virtue.GetProgress(StardewValley.Farmer)">
            <summary>Gets the <paramref name="farmer"/>'s progress towards proving this <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/>.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The current integer progress towards proving this <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.VirtuesQuest"/> class.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.GetName">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.GetDescription">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.GetObjectiveDescriptions">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.CanBeCancelled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.MarkAsViewed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.ShouldDisplayAsNew">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.ShouldDisplayAsComplete">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.IsTimedQuest">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.GetDaysLeft">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.IsHidden">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.HasReward">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.HasMoneyReward">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.GetMoneyReward">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.OnMoneyRewardClaimed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.OnLeaveQuestPage">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.DrawObjective(System.Int32,StardewValley.Menus.QuestLog,System.Single@,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws the objective with the specified <paramref name="index"/> inside the specified <see cref="T:StardewValley.Menus.QuestLog"/>.</summary>
            <param name="index">The objective index.</param>
            <param name="log">The <see cref="T:StardewValley.Menus.QuestLog"/>.</param>
            <param name="yPos">The current y-position in the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="b">The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.VirtuesQuest.UpdateVirtueProgress(DaLion.Overhaul.Modules.Weapons.Virtue,System.Boolean)">
            <summary>Marks the corresponding objective as complete if the specified <paramref name="virtue"/> has been proven.</summary>
            <param name="virtue">The <see cref="T:DaLion.Overhaul.Modules.Weapons.Virtue"/> to be checked.</param>
            <param name="silent">Whether to prevent question completion notifications.</param>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.VirtuesQuestState">
            <summary>The current state of the <see cref="T:DaLion.Overhaul.Modules.Weapons.VirtuesQuest"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.VirtuesQuestState.NotStarted">
            <summary>The quest has not been started.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.VirtuesQuestState.InProgress">
            <summary>The quest is in progress.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.VirtuesQuestState.Completed">
            <summary>The quest has been completed.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.WeaponSelector">
            <summary>Smart <see cref="T:StardewValley.Tool"/> selector.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.WeaponTier">
            <summary>The tier of a <see cref="T:StardewValley.Tools.MeleeWeapon"/> or <see cref="T:StardewValley.Tools.Slingshot"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Common">
            <summary>The lowest tier, for training weapons or weapons that can be obtained early in the Mines.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Uncommon">
            <summary>A mid tier, for weapons that can be found in mid-levels of the Mines or by other activities.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Rare">
            <summary>A higher tier, for weapons that can be found at the higher levels of the Mines or more rarely by other activities.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Epic">
            <summary>The highest tier, for weapons that can be found beyond the Skull Caverns.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Mythic">
            <summary>A special tier, reserved for one-of-a-kind weapons.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Masterwork">
            <summary>A special tier, reserved for crafted weapons.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Legendary">
            <summary>A special tier, reserved for legendary weapons.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponTier.Untiered">
            <summary>Placeholder for weapons that have not been tiered.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.WeaponTier.#ctor(System.String,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Overhaul.Modules.Weapons.WeaponTier"/> class.</summary>
            <param name="name">The tier name.</param>
            <param name="value">The tier value.</param>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.WeaponTier.Color">
            <summary>Gets the title color of a weapon at this tier, <see href="https://tvtropes.org/pmwiki/pmwiki.php/Main/ColourCodedForYourConvenience">for your convenience</see>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.WeaponTier.Price">
            <summary>Gets the sell price of a weapon at this tier.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.WeaponTier.GetFor(StardewValley.Tool)">
            <summary>Gets the corresponding <see cref="T:DaLion.Overhaul.Modules.Weapons.WeaponTier"/> for the specified <paramref name="tool"/>.</summary>
            <param name="tool">A <see cref="T:StardewValley.Tools.MeleeWeapon"/> or <see cref="T:StardewValley.Tools.Slingshot"/>.</param>
            <returns>A <see cref="T:DaLion.Overhaul.Modules.Weapons.WeaponTier"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.WeaponType">
            <summary>The type of a <see cref="T:StardewValley.Tools.MeleeWeapon"/> or <see cref="F:DaLion.Overhaul.Modules.Weapons.WeaponType.Slingshot"/>.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponType.StabbingSword">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.stabbingSword"/> type.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponType.Dagger">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.dagger"/> type.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponType.Club">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.club"/> type.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponType.DefenseSword">
            <summary>The <see cref="F:StardewValley.Tools.MeleeWeapon.defenseSword"/> type.</summary>
        </member>
        <member name="F:DaLion.Overhaul.Modules.Weapons.WeaponType.Slingshot">
            <summary>The <see cref="F:DaLion.Overhaul.Modules.Weapons.WeaponType.Slingshot"/> type.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Modules.Weapons.WeaponTypeExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> enum.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Modules.Weapons.WeaponTypeExtensions.StabbingSwords">
            <summary>Gets or sets the swords that should be converted to Stabbing Swords.</summary>
        </member>
        <member name="M:DaLion.Overhaul.Modules.Weapons.WeaponTypeExtensions.GetFinalHitStep(DaLion.Overhaul.Modules.Weapons.WeaponType)">
            <summary>Gets the final combo hit of the <see cref="T:DaLion.Overhaul.Modules.Weapons.WeaponType"/>.</summary>
            <param name="type">The <see cref="T:DaLion.Overhaul.Modules.Weapons.WeaponType"/>.</param>
            <returns>The number of final hit for the <see cref="T:DaLion.Overhaul.Modules.Weapons.WeaponType"/>, as <see cref="T:DaLion.Overhaul.Modules.Weapons.ComboHitStep"/>.</returns>
        </member>
        <member name="T:DaLion.Overhaul.Globals">
            <summary>Holds global variables that may be used by different modules.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.GarnetIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of the Garnet gemstone (provided by Json Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.GarnetRingIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of the Garnet Ring (provided by Json Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.InfinityBandIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of the Infinity Band (provided by Json Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.HeroSoulIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of the Hero Soul (provided by Dynamic Game Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.DwarvenScrapIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of Dwarven Scrap (provided by Dynamic Game Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.ElderwoodIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of Elderwood (provided by Dynamic Game Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.DwarvishBlueprintIndex">
            <summary>Gets or sets <see cref="T:StardewValley.Item"/> index of Dwarvish weapon blueprints (provided by Dynamic Game Assets).</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.AreEnemiesAround">
            <summary>Gets or sets a value indicating whether the current location has any characters of type <see cref="T:StardewValley.Monsters.Monster"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.SecondsOutOfCombat">
            <summary>Gets or sets the number of elapsed seconds since the last combat-related action.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.FpsCounter">
            <summary>Gets or sets the <see cref="T:FrameRateCounter"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Globals.DebugCursorPosition">
            <summary>Gets or sets the latest position of the cursor.</summary>
        </member>
        <member name="T:DaLion.Overhaul.ItemIDs">
            <summary>Holds item IDs shared by different modules.</summary>
        </member>
        <member name="T:DaLion.Overhaul.ModApi">
            <summary>Implementation of the mod API.</summary>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetEcologistForageQuality(StardewValley.Farmer)">
            <summary>Get the value of an Ecologist's forage quality.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality level.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetGemologistMineralQuality(StardewValley.Farmer)">
            <summary>Get the value of a Gemologist's mineral quality.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:StardewValley.Object"/> quality level.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetProducerProducePriceBonus(StardewValley.Farmer)">
            <summary>The price bonus applied to animal produce sold by Producer.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for animal products.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetAnglerFishPriceBonus(StardewValley.Farmer)">
            <summary>The price bonus applied to fish sold by Angler.</summary>
            <param name="farmer">The player.</param>
            <returns>A <see cref="T:System.Single"/> multiplier for fish prices.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetConservationistTaxDeduction(StardewValley.Farmer)">
            <summary>
                Get the value of the a Conservationist's effective tax deduction based on the preceding season's trash
                collection.
            </summary>
            <param name="farmer">The player.</param>
            <returns>A percentage of tax deductions based currently in effect due to the preceding season's collected trash.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetDesperadoOvercharge(StardewValley.Farmer)">
            <summary>Determines the extra power of Desperado shots.</summary>
            <param name="farmer">The player.</param>
            <returns>A percentage between 0 and 1.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterCustomSkillForPrestige(System.String)">
            <summary>Sets a flag to allow the specified SpaceCore skill to level past 10 and offer prestige professions.</summary>
            <param name="id">The SpaceCore skill id.</param>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.IsHuntActive(DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="P:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.IsActive"/>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the specified <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/> <paramref name="type"/> is currently active, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.TryStartNewHunt(StardewValley.GameLocation,DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.TryStart(StardewValley.GameLocation)"/>
            <param name="location">The hunt location.</param>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if a hunt was started, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.ForceStartNewHunt(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.ForceStart(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2)"/>
            <param name="location">The hunt location.</param>
            <param name="target">The target tile.</param>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.InterruptActiveHunt(DaLion.Overhaul.Modules.Professions.TreasureHunts.TreasureHuntType,StardewValley.Farmer)">
            <inheritdoc cref="M:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt.Fail"/>
            <param name="type">The type of treasure hunt.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>
                <see langword="false"/> if the <see cref="T:DaLion.Overhaul.Modules.Professions.TreasureHunts.ITreasureHunt"/> instance was not active, otherwise
                <see langword="true"/>.
            </returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterTreasureHuntStartedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntStartedEventArgs})">
            <summary>Registers a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntStartedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterTreasureHuntEndedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.ITreasureHuntEndedEventArgs})">
            <summary>Registers a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.TreasureHunt.TreasureHuntEndedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetRegisteredUltimate(StardewValley.Farmer)">
            <summary>Gets the <paramref name="farmer"/>'s currently registered <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/>, if any.</summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns>The <paramref name="farmer"/>'s <see cref="T:DaLion.Overhaul.Modules.Professions.Ultimates.IUltimate"/>, or the local player's if supplied null.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterUltimateActivatedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateActivatedEventArgs})">
            <summary>Registers a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterUltimateDeactivatedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateDeactivatedEventArgs})">
            <summary>Register a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateDeactivatedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterUltimateChargeInitiatedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeInitiatedEventArgs})">
            <summary>Register a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeInitiatedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterUltimateChargeIncreasedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateChargeIncreasedEventArgs})">
            <summary>Register a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateChargeIncreasedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterUltimateFullyChargedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateFullyChargedEventArgs})">
            <summary>Register a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateFullyChargedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.RegisterUltimateEmptiedEvent(System.Action{System.Object,DaLion.Overhaul.Modules.Professions.Events.Ultimate.IUltimateEmptiedEventArgs})">
            <summary>Register a new <see cref="T:DaLion.Overhaul.Modules.Professions.Events.Ultimate.UltimateEmptiedEvent"/> instance.</summary>
            <param name="callback">The delegate that will be called when the event is triggered.</param>
            <returns>A new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance which encapsulates the specified <paramref name="callback"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetChord(StardewValley.Objects.CombinedRing)">
            <summary>Gets the <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IChord"/> for the specified <paramref name="ring"/>, if any.</summary>
            <param name="ring">A <see cref="T:StardewValley.Objects.CombinedRing"/> which possibly contains a <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IChord"/>.</param>
            <returns>The <see cref="T:DaLion.Overhaul.Modules.Rings.Resonance.IChord"/> instance if the <paramref name="ring"/> is an Infinity Band with at least two gemstone, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModApi.GetConfig">
            <summary>Gets the mod's config instance, which can be used in a read-only way.</summary>
            <returns>The <see cref="T:DaLion.Overhaul.ModConfig"/> instance.</returns>
        </member>
        <member name="T:DaLion.Overhaul.ModConfig">
            <summary>The collection of configs for each module.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableProfessions">
            <summary>Gets a value indicating whether the Professions module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableCombat">
            <summary>Gets a value indicating whether the Combat module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableWeapons">
            <summary>Gets a value indicating whether the Weapons module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableSlingshots">
            <summary>Gets a value indicating whether the Slingshots module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableTools">
            <summary>Gets a value indicating whether the Tools module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableEnchantments">
            <summary>Gets a value indicating whether the Enchantments module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableRings">
            <summary>Gets a value indicating whether the Rings module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnablePonds">
            <summary>Gets a value indicating whether the Ponds module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableTaxes">
            <summary>Gets a value indicating whether the Taxes module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.EnableTweex">
            <summary>Gets a value indicating whether the Tweex module is enabled.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Professions">
            <summary>Gets the Professions module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Combat">
            <summary>Gets the Professions module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Weapons">
            <summary>Gets the Weapons module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Slingshots">
            <summary>Gets the Slingshots module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Tools">
            <summary>Gets the Tools module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Enchantments">
            <summary>Gets the Enchantments module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Rings">
            <summary>Gets the Rings module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Ponds">
            <summary>Gets the Ponds module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Taxes">
            <summary>Gets the Taxes module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.Tweex">
            <summary>Gets the Tweex module config settings.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.OpenMenuKey">
            <summary>Gets the key used to open the Generic Mod Config Menu directly at this mod.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModConfig.DebugKey">
            <summary>Gets the key used to engage Debug Mode.</summary>
        </member>
        <member name="M:DaLion.Overhaul.ModConfig.ToString">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Overhaul.ModConfig.Validate(StardewModdingAPI.IModHelper)">
            <summary>Validates all internal configs and overwrites the user's config file if any invalid settings were found.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="M:DaLion.Overhaul.ModConfig.Enumerate">
            <summary>Enumerates all individual module <see cref="T:DaLion.Shared.Configs.Config"/>s.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Shared.Configs.Config"/>s.</returns>
        </member>
        <member name="M:DaLion.Overhaul.ModConfig.Log">
            <summary>Logs the config properties to the SMAPI console.</summary>
        </member>
        <member name="T:DaLion.Overhaul.ModData">
            <summary>Holds global data, independent from save files.</summary>
        </member>
        <member name="T:DaLion.Overhaul.ModEntry">
            <summary>The mod entry point.</summary>
        </member>
        <member name="F:DaLion.Overhaul.ModEntry._sw">
            <inheritdoc cref="T:System.Diagnostics.Stopwatch"/>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.Instance">
            <summary>Gets the static <see cref="T:DaLion.Overhaul.ModEntry"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.Config">
            <summary>Gets or sets the <see cref="T:DaLion.Overhaul.ModConfig"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.Data">
            <summary>Gets or sets the <see cref="T:DaLion.Overhaul.ModData"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.PerScreenState">
            <summary>Gets the <see cref="T:StardewModdingAPI.Utilities.PerScreen`1"/> <see cref="T:DaLion.Overhaul.ModState"/>.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.State">
            <summary>Gets or sets the <see cref="T:DaLion.Overhaul.ModState"/> of the local player.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.EventManager">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.EventManager"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.Reflector">
            <summary>Gets the <see cref="P:DaLion.Overhaul.ModEntry.Reflector"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.Broadcaster">
            <summary>Gets the <see cref="P:DaLion.Overhaul.ModEntry.Broadcaster"/> instance.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.ModHelper">
            <summary>Gets the <see cref="T:StardewModdingAPI.IModHelper"/> API.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.Manifest">
            <summary>Gets the <see cref="T:StardewModdingAPI.IManifest"/> for this mod.</summary>
        </member>
        <member name="P:DaLion.Overhaul.ModEntry.I18n">
            <summary>Gets the <see cref="T:StardewModdingAPI.ITranslationHelper"/> API.</summary>
        </member>
        <member name="M:DaLion.Overhaul.ModEntry.Entry(StardewModdingAPI.IModHelper)">
            <summary>The mod entry point, called after the mod is first loaded.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="M:DaLion.Overhaul.ModEntry.GetApi">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Overhaul.ModState">
            <summary>The collection of state for each module.</summary>
        </member>
        <member name="T:DaLion.Overhaul.Watchers">
            <summary>Holds global <see cref="T:DaLion.Shared.Watchers.IWatcher"/> instances.</summary>
        </member>
        <member name="P:DaLion.Overhaul.Watchers.ProfessionsWatcher">
            <summary>Gets the <see cref="T:DaLion.Shared.Watchers.ICollectionWatcher`1"/> which monitors changes to the local player's professions.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.DebugAttribute">
            <summary>Indicates that an implicitly-used marked symbol should only be available in debug mode.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.ImplicitIgnoreAttribute">
            <summary>Indicates that an implicitly-used marked symbol should be ignored unless explicitly instantiated.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.IgnoreWithModAttribute">
            <summary>Indicates to a factory that an implicitly-used marked symbol should only be instantiated when a third-party mod is installed, or adds third-party mod metadata to an explicitly-instantiated class.</summary>
        </member>
        <member name="M:DaLion.Shared.Attributes.IgnoreWithModAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Attributes.IgnoreWithModAttribute"/> class.</summary>
            <param name="uniqueId">The required mod's unique ID.</param>
            <param name="name">A human-readable name for the mod.</param>
            <param name="version">The minimum required version.</param>
        </member>
        <member name="P:DaLion.Shared.Attributes.IgnoreWithModAttribute.UniqueId">
            <summary>Gets the required mod's unique ID.</summary>
        </member>
        <member name="P:DaLion.Shared.Attributes.IgnoreWithModAttribute.Name">
            <summary>Gets the human-readable name of the mod.</summary>
        </member>
        <member name="T:DaLion.Shared.Attributes.RequiresModAttribute">
            <summary>Indicates to a factory that an implicitly-used marked symbol should only be instantiated when a third-party mod is installed, or adds third-party mod metadata to an explicitly-instantiated class.</summary>
        </member>
        <member name="M:DaLion.Shared.Attributes.RequiresModAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Attributes.RequiresModAttribute"/> class.</summary>
            <param name="uniqueId">The required mod's unique ID.</param>
            <param name="name">A human-readable name for the mod.</param>
            <param name="version">The minimum required version.</param>
        </member>
        <member name="P:DaLion.Shared.Attributes.RequiresModAttribute.UniqueId">
            <summary>Gets the required mod's unique ID.</summary>
        </member>
        <member name="P:DaLion.Shared.Attributes.RequiresModAttribute.Name">
            <summary>Gets the human-readable name of the mod.</summary>
        </member>
        <member name="P:DaLion.Shared.Attributes.RequiresModAttribute.Version">
            <summary>Gets the minimum required version.</summary>
        </member>
        <member name="T:DaLion.Shared.Classes.BiMap`2">
            <summary>Represents a collection of forward/reverse key pairs with bidirectional mapping.</summary>
            <typeparam name="TForward">The forward mapping key type.</typeparam>
            <typeparam name="TReverse">The reverse mapping key type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> class by copying <see cref="T:System.Collections.Generic.KeyValuePair" />s from a one-way <see cref="T:System.Collections.IDictionary"/>.</summary>
            <param name="oneWayMap">A one-way <see cref="T:System.Collections.IDictionary" />.</param>
            <remarks>Throws <see cref="T:System.ArgumentException" /> if <paramref name="oneWayMap" /> contains repeated values.</remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Add(`0,`1)">
            <summary>Adds the specified set of <typeparamref name="TForward"/> and <typeparamref name="TReverse"/> values to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="forward">A <typeparamref name="TForward"/> value.</param>
            <param name="reverse">A <typeparamref name="TReverse"/> value.</param>
            <exception cref="T:System.ArgumentException">Thrown if either <paramref name="forward" /> or <paramref name="reverse" /> already exists in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</exception>>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Adds the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="pair">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown if either the key or value already exists in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</exception>>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryAdd(`0,`1)">
            <summary>Tries to add the specified set of <typeparamref name="TForward"/> and <typeparamref name="TReverse"/> values to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="forward">A <typeparamref name="TForward"/> value.</param>
            <param name="reverse">A <typeparamref name="TReverse"/> value.</param>
            <returns><see langword="true"/> if successfully added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>Try Adds the specified <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="pair">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <returns><see langword="true"/> if successfully added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Remove(`0)">
            <summary>Removes a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> entry from the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="forward">A <typeparamref name="TForward"/> value.</param>
            <returns><see langword="true"/> if successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Remove(`1)">
            <summary>Removes a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> entry from the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="reverse">A <typeparamref name="TReverse"/> value.</param>
            <returns><see langword="true"/> if successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Contains(`0)">
            <summary>Checks if a <typeparamref name="TForward"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="key">The <typeparamref name="TForward"/> object to check.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> exists.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Contains(`1)">
            <summary>Checks if a <typeparamref name="TReverse"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <param name="key">The <typeparamref name="TReverse"/> object to check.</param>
            <returns><see langword="true"/> if the <paramref name="key"/> exists.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryGetForward(`0,`1@)">
            <summary>
                Checks if a <typeparamref name="TForward"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> and returns the corresponding
                <typeparamref name="TReverse"/> value.
            </summary>
            <param name="forward">The <typeparamref name="TForward" /> object to check.</param>
            <param name="reverse">The corresponding <typeparamref name="TReverse"/>, if any.</param>
            <returns><see langword="true"/> if a value was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.TryGetReverse(`1,`0@)">
            <summary>
                Checks if a <typeparamref name="TReverse"/> is present in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/> and returns the corresponding
                <typeparamref name="TForward"/> value.
            </summary>
            <param name="reverse">The <typeparamref name="TReverse"/> object to check.</param>
            <param name="forward">The corresponding <typeparamref name="TForward"/>, if any.</param>
            <returns><see langword="true"/> if a value was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Clear">
            <summary>Clears the instance of all entries.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.Count">
            <summary>Gets the number of entries in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</summary>
            <returns>The number of entries in the <see cref="T:DaLion.Shared.Classes.BiMap`2"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.BiMap`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Classes.CircleTileGrid">
            <summary>Represents a circular grid of tiles.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.#ctor(Microsoft.Xna.Framework.Vector2,System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.CircleTileGrid"/> class.</summary>
            <param name="origin">The center tile of the circle in the world reference.</param>
            <param name="radius">The radius of the circle in tile units.</param>
        </member>
        <member name="P:DaLion.Shared.Classes.CircleTileGrid.Tiles">
            <summary>Gets enumerates all the tiles in the grid.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.CircleTileGrid.Outline">
            <summary>Gets enumerates only the outline tiles of the grid.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.Contains(Microsoft.Xna.Framework.Point)">
            <summary>Determines whether a point is contained within the circle by using ray casting.</summary>
            <param name="point">The point to be tested.</param>
            <returns><see langword="true"/> if the <paramref name="point"/> is within the bounds of the circle, otherwise <see langword="false"/>.</returns>
            <remarks>Remember that the center of the circle is located at (_radius, _radius).</remarks>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.ToString">
            <summary>Gets a <see cref="T:System.String"/> representation of the circle grid.</summary>
            <returns>A <see cref="T:System.String"/> representation of the circle grid.</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.CircleTileGrid.GetOutline">
            <summary>Creates the circle's outline as a <see cref="T:System.Boolean"/> array.</summary>
            <returns>An array of <see cref="T:System.Boolean"/> values, where <see langword="true"/> indicates that the circle's outline crosses over the corresponding tile.</returns>
        </member>
        <member name="T:DaLion.Shared.Classes.Countdown">
            <summary>Counts down from a baseline value.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.Countdown.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.Countdown"/> class.</summary>
            <param name="initial">The initial value from which to count down.</param>
        </member>
        <member name="P:DaLion.Shared.Classes.Countdown.Initial">
            <summary>Gets the initial value from which to count down.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.Countdown.Current">
            <summary>Gets the current value.</summary>
        </member>
        <member name="M:DaLion.Shared.Classes.Countdown.Decrement">
            <summary>Reduces the current value by one.</summary>
            <returns>Returns whether the value was decremented (i.e. wasn't already zero).</returns>
        </member>
        <member name="M:DaLion.Shared.Classes.Countdown.Reset">
            <summary>Restarts the countdown.</summary>
        </member>
        <member name="T:DaLion.Shared.Classes.Singleton`1">
            <summary>Base class for the singleton design pattern.</summary>
            <typeparam name="TInstance">The <see langword="class"/> type of the singleton instance.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Classes.Singleton`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Classes.Singleton`1"/> class.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.Singleton`1.Instance">
            <summary>Gets the singleton instance for this class.</summary>
        </member>
        <member name="P:DaLion.Shared.Classes.Singleton`1.IsValueCreated">
            <summary>Gets a value indicating whether an instance has been created for the singleton class.</summary>
        </member>
        <member name="T:DaLion.Shared.Commands.ConsoleCommand">
            <summary>Base implementation of a console command for a mod.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.ConsoleCommand.#ctor(DaLion.Shared.Commands.CommandHandler)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Commands.ConsoleCommand"/> class.</summary>
            <param name="handler">The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</param>
        </member>
        <member name="P:DaLion.Shared.Commands.ConsoleCommand.Triggers">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Commands.ConsoleCommand.Documentation">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Commands.ConsoleCommand.Handler">
            <summary>Gets the <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance that handles this command.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.ConsoleCommand.Callback(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Commands.CommandHandler">
            <summary>Handles mod-provided <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</summary>
        </member>
        <member name="F:DaLion.Shared.Commands.CommandHandler._commandHelper">
            <inheritdoc cref="T:StardewModdingAPI.ICommandHelper"/>
        </member>
        <member name="F:DaLion.Shared.Commands.CommandHandler._handledCommands">
            <summary>Cache of handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> instances.</summary>
        </member>
        <member name="F:DaLion.Shared.Commands.CommandHandler._conditional">
            <summary>An optional conditional expression that prevents the entry command from being executed.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.#ctor(StardewModdingAPI.ICommandHelper)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Commands.CommandHandler"/> class.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
        </member>
        <member name="P:DaLion.Shared.Commands.CommandHandler.EntryCommand">
            <summary>Gets the <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</summary>
        </member>
        <member name="P:DaLion.Shared.Commands.CommandHandler.Mod">
            <summary>Gets the human-readable name of the providing mod.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandeAll(StardewModdingAPI.ICommandHelper,System.String,System.String,System.Func{System.Boolean})">
            <summary>Implicitly registers all <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types in the assembly using reflection.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleFromNamespace(StardewModdingAPI.ICommandHelper,System.String,System.String,System.String,System.Func{System.Boolean})">
            <summary>Implicitly registers <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types in the specified namespace.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="namespace">The desired namespace.</param>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleWithAttribute``1(StardewModdingAPI.ICommandHelper,System.String,System.String,System.Func{System.Boolean})">
            <summary>Implicitly registers <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types with the specified attribute.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <param name="helper">The <see cref="T:StardewModdingAPI.ICommandHelper"/> API for the current mod.</param>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.Register(System.String,System.String,System.Func{System.Boolean})">
            <summary>Registers the entry command and name for this module.</summary>
            <param name="mod">Human-readable name of the providing mod.</param>
            <param name="entry">The <see cref="T:System.String"/> used as entry for all handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
            <param name="conditional">An optional conditional expression that prevents the entry command from being executed.</param>
            <returns>The <see cref="T:DaLion.Shared.Commands.CommandHandler"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.Entry(System.String,System.String[])">
            <summary>Handles the entry command for this module, delegating to the appropriate <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>.</summary>
            <param name="command">The entry command.</param>
            <param name="args">The supplied arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Commands.CommandHandler.HandleImplicitly(System.Func{System.Type,System.Boolean})">
            <summary>Implicitly handles <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/> types using reflection.</summary>
            <param name="predicate">An optional condition with which to limit the scope of handled <see cref="T:DaLion.Shared.Commands.IConsoleCommand"/>s.</param>
        </member>
        <member name="T:DaLion.Shared.Commands.IConsoleCommand">
            <summary>Interface for a console command for a mod.</summary>
        </member>
        <member name="P:DaLion.Shared.Commands.IConsoleCommand.Triggers">
            <summary>Gets the statement that triggers this command.</summary>
        </member>
        <member name="P:DaLion.Shared.Commands.IConsoleCommand.Documentation">
            <summary>Gets the human-readable documentation shown when the player runs the 'help' command.</summary>
        </member>
        <member name="M:DaLion.Shared.Commands.IConsoleCommand.Callback(System.String,System.String[])">
            <summary>The action that will be executed.</summary>
            <param name="trigger">The trigger word.</param>
            <param name="args">The command arguments.</param>
        </member>
        <member name="T:DaLion.Shared.Comparers.EquatableComparer`1">
            <summary>Compares instances using <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)"/>.</summary>
            <typeparam name="T">The value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Comparers.EquatableComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Comparers.EquatableComparer`1.GetHashCode(`0)">
            <summary>Gets a hash code for the specified <paramref name="object"/>.</summary>
            <param name="object">The value.</param>
            <returns>A hash code for <paramref name="object"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Comparers.GenericEqualsComparer`1">
            <summary>Compares values using their <see cref="M:System.Object.Equals(System.Object)"/> method. This should only be used when <see cref="T:DaLion.Shared.Comparers.EquatableComparer`1"/> won't work, since this doesn't validate whether they're comparable.</summary>
            <typeparam name="T">The value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Comparers.GenericEqualsComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Comparers.GenericEqualsComparer`1.GetHashCode(`0)">
            <summary>Gets a hash code for the specified <paramref name="object"/>.</summary>
            <param name="object">The value.</param>
            <returns>A hash code for <paramref name="object"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Comparers.ObjectReferenceComparer`1">
            <summary>A comparer which considers two references equal if they point to the same instance.</summary>
            <typeparam name="T">The value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Comparers.ObjectReferenceComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Comparers.ObjectReferenceComparer`1.GetHashCode(`0)">
            <summary>Gets a hash code for the specified <paramref name="object"/>.</summary>
            <param name="object">The value.</param>
            <returns>A hash code for <paramref name="object"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Configs.Config">
            <summary>Base class for a mod's config settings.</summary>
        </member>
        <member name="M:DaLion.Shared.Configs.Config.Validate">
            <summary>Validate the config settings, replacing invalid values if necessary.</summary>
            <returns><see langword="true"/> if all config settings are valid and don't need rewriting, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Content.TextureProvider">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.TextureProvider"/> record.</summary>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.TextureProvider.#ctor(System.Func{Microsoft.Xna.Framework.Graphics.Texture2D},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.TextureProvider"/> record.</summary>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.TextureProvider.Load">
            <summary>A delegate callback for loading the initial instance of the content asset.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.TextureProvider.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.TextureProvider.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.DictionaryProvider`2">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.DictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.DictionaryProvider`2.#ctor(System.Func{System.Collections.Generic.Dictionary{`0,`1}},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.DictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="Load">A delegate callback for loading the initial instance of the content asset.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.DictionaryProvider`2.Load">
            <summary>A delegate callback for loading the initial instance of the content asset.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.DictionaryProvider`2.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.DictionaryProvider`2.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.IAssetEditor">
            <summary>Interface for a class which edits an asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.IAssetEditor.Edit(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <summary>Edits the asset.</summary>
            <param name="e">Event arguments for an <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/> event.</param>
        </member>
        <member name="T:DaLion.Shared.Content.IAssetProvider">
            <summary>Interface for a class which provides an asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.IAssetProvider.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <summary>Provides the asset.</summary>
            <param name="e">Event arguments for an <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/> event.</param>
        </member>
        <member name="T:DaLion.Shared.Content.ModDictionaryProvider`2">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModDictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="GetPath">A delegate which returns the relative path to the JSON dictionary inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.ModDictionaryProvider`2.#ctor(System.Func{System.String},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModDictionaryProvider`2"/> record.</summary>
            <typeparam name="TKey">The type of the keys in the data dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the data dictionary.</typeparam>
            <param name="GetPath">A delegate which returns the relative path to the JSON dictionary inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.ModDictionaryProvider`2.GetPath">
            <summary>A delegate which returns the relative path to the JSON dictionary inside the mod folder.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.ModDictionaryProvider`2.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.ModDictionaryProvider`2.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.ModTextureProvider">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModTextureProvider"/> record.</summary>
            <param name="GetPath">A delegate which returns the relative path to the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.ModTextureProvider.#ctor(System.Func{System.String},StardewModdingAPI.Events.AssetLoadPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.ModTextureProvider"/> record.</summary>
            <param name="GetPath">A delegate which returns the relative path to the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> inside the mod folder.</param>
            <param name="Priority">The priority for an asset load when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.ModTextureProvider.GetPath">
            <summary>A delegate which returns the relative path to the <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/> inside the mod folder.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.ModTextureProvider.Priority">
            <summary>The priority for an asset load when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.ModTextureProvider.Provide(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Content.AssetEditor">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.AssetEditor"/> record.</summary>
            <param name="Apply">A delegate callback for applying edits to the content asset.</param>
            <param name="Priority">The priority for an asset edit when multiple apply for the same asset.</param>
        </member>
        <member name="M:DaLion.Shared.Content.AssetEditor.#ctor(System.Action{StardewModdingAPI.IAssetData},StardewModdingAPI.Events.AssetEditPriority)">
            <summary>Generates a new instance of the <see cref="T:DaLion.Shared.Content.AssetEditor"/> record.</summary>
            <param name="Apply">A delegate callback for applying edits to the content asset.</param>
            <param name="Priority">The priority for an asset edit when multiple apply for the same asset.</param>
        </member>
        <member name="P:DaLion.Shared.Content.AssetEditor.Apply">
            <summary>A delegate callback for applying edits to the content asset.</summary>
        </member>
        <member name="P:DaLion.Shared.Content.AssetEditor.Priority">
            <summary>The priority for an asset edit when multiple apply for the same asset.</summary>
        </member>
        <member name="M:DaLion.Shared.Content.AssetEditor.Edit(StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.ModData.ModDataIO">
            <summary>Handles reading from and writing to the <see cref="T:StardewValley.ModDataDictionary"/> of different objects.</summary>
        </member>
        <member name="P:DaLion.Shared.ModData.ModDataIO.ModId">
            <summary>Gets the unique of the initialized mod.</summary>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Farmer,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.ModDataDictionary"/> as
                <see cref="T:System.String"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Farmer,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.ModDataDictionary"/> as
                <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="field"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Farmer,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, or
                removes it if supplied a null or empty <paramref name="value"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> or empty to remove the <paramref name="field"/>.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Farmer,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="farmer"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> or empty to remove the <paramref name="field"/>.</param>
            <returns><see langword="true"/> if the <paramref name="field"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Farmer,System.String,System.String,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="field"/> in the <paramref name="farmer"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/>, or initializes it with that <paramref name="value"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Farmer,System.String,``0)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="farmer"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to update.</param>
            <param name="amount">The amount to increment by.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Farmer,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="farmer"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by 1.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="field">The field to update.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.ModDataDictionary"/>
                as <see cref="T:System.String"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Buildings.Building,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.ModDataDictionary"/>
                as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="field"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Buildings.Building,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                or removes it if supplied a null or empty <paramref name="value"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Buildings.Building,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="building"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
            <returns><see langword="true"/> if the field already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="field"/> in the
                <paramref name="building"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Buildings.Building,System.String,``0)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="building"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to update.</param>
            <param name="amount">The amount to increment by.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Buildings.Building,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the building's <see cref="T:StardewValley.ModDataDictionary"/>
                by 1.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="field">The field to update.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Character,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="field"/> from the <paramref name="character"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Character,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="field"/> from the <paramref name="character"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="field"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Character,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="character"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                or removes it if supplied a null or empty <paramref name="value"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> or empty to remove the <paramref name="field"/>.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Character,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="character"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> or empty to remove the <paramref name="field"/>.</param>
            <returns><see langword="true"/> if the <paramref name="field"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Character,System.String,System.String,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="field"/> in the
                <paramref name="character"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Character,System.String,``0)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="character"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to update.</param>
            <param name="amount">The amount to increment by.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Character,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="character"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by 1.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="field">The field to update.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.GameLocation,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="field"/> from the <paramref name="location"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.GameLocation,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="field"/> from the <paramref name="location"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="field"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.GameLocation,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="location"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                or removes it if supplied a null or empty <paramref name="value"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.GameLocation,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="location"/>'s <see cref="T:StardewValley.ModDataDictionary"/>,
                only if it doesn't yet have a value.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
            <returns><see langword="true"/> if the <paramref name="field"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.GameLocation,System.String,System.String,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="field"/> in the
                <paramref name="location"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, or initializes it with the that
                <paramref name="value"/>.
            </summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.GameLocation,System.String,``0)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="location"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to update.</param>
            <param name="amount">The amount to increment by.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.GameLocation,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="location"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by 1.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="field">The field to update.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Item,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.ModDataDictionary"/> as
                <see cref="T:System.String"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Item,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.ModDataDictionary"/> as
                <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="field"/>'s value. This should most likely be a primitive.</typeparam>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Item,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, or
                removes it if supplied a null or empty <paramref name="value"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Item,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="item"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, only
                if it doesn't yet have a value.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
            <returns><see langword="true"/> if the <paramref name="field"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Item,System.String,System.String,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="field"/> in the <paramref name="item"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/>, or initializes it with that <paramref name="value"/>.
            </summary>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Item,System.String,``0)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="item"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to update.</param>
            <param name="amount">The amount to increment by.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Item,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="item"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by 1.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="item">The <see cref="T:StardewValley.Item"/>.</param>
            <param name="field">The field to update.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> as <see cref="T:System.String"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue">The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as a <see cref="T:System.String"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0,System.String)">
            <summary>
                Reads from a <paramref name="field"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected type for the <paramref name="field"/>'s value. This should most likely be a primitive.</typeparam>
            <param name = "terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to read from.</param>
            <param name="defaultValue"> The value to return if the <paramref name="field"/> does not exist.</param>
            <param name="modId">The unique ID of the mod to be used as an identifier.</param>
            <returns>The value of the <paramref name="field"/> as <typeparamref name="T"/>, if it exists, or <paramref name="defaultValue"/> if not.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/>, or removes it if supplied a null or empty <paramref name="value"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)">
            <summary>
                Writes to a <paramref name="field"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/>, only if it doesn't yet have a value.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to write to.</param>
            <param name="value">The value to write, or <see langword="null"/> to remove the <paramref name="field"/>.</param>
            <returns><see langword="true"/> if the <paramref name="field"/> already existed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <summary>
                Appends a <paramref name="value"/> to an existing <paramref name="field"/> in the
                <paramref name="terrainFeature"/>'s <see cref="T:StardewValley.ModDataDictionary"/>, or initializes it with that
                <paramref name="value"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">A <see cref="T:System.String"/> with which to separate appended values.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by an arbitrary <paramref name="amount"/>.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to update.</param>
            <param name="amount">The amount to increment by.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.TerrainFeatures.TerrainFeature,System.String)">
            <summary>
                Increments the value of a numeric <paramref name="field"/> in the <paramref name="terrainFeature"/>'s
                <see cref="T:StardewValley.ModDataDictionary"/> by 1.
            </summary>
            <typeparam name="T">A numeric type with which to increment the <paramref name="field"/>. This should most likely be an integer type.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="field">The field to update.</param>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataIO.Init(System.String)">
            <summary>Initializes the <see cref="T:DaLion.Shared.ModData.ModDataIO"/> with the specified <paramref name="modId"/>.</summary>
            <param name="modId">The unique of the active mod.</param>
        </member>
        <member name="T:DaLion.Shared.ModData.ModDataDictionaryExtensions">
            <summary>Provides extension methods for reading and writing values in the <see cref="T:StardewValley.ModDataDictionary"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.Read(StardewValley.ModDataDictionary,System.String,System.String)">
            <summary>Reads a value from the <see cref="T:StardewValley.ModDataDictionary"/> as a <see cref="T:System.String"/>.</summary>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to read from.</param>
            <param name="defaultValue">The default value to return if the <paramref name="key"/> does not exist.</param>
            <returns>The value of the specified <paramref name="key"/> if it exists, or <paramref name="defaultValue"/> value if it doesn't.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.Read``1(StardewValley.ModDataDictionary,System.String,``0)">
            <summary>
                Reads a value from the <see cref="T:StardewValley.ModDataDictionary"/> and tries to parse it as type
                <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The expected value type.</typeparam>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to read from.</param>
            <param name="defaultValue">The default value to return if the key does not exist.</param>
            <returns>
                The value of the specified <paramref name="key"/> if it exists, parsed as type <typeparamref name="T"/>, or <paramref name="defaultValue"/> if
                the <paramref name="key"/> doesn't exist or fails to parse.
            </returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.Write(StardewValley.ModDataDictionary,System.String,System.String)">
            <summary>
                Writes a <see cref="T:System.String"/> <paramref name="value"/> to the <see cref="T:StardewValley.ModDataDictionary"/>, or removes the
                corresponding <paramref name="key"/> if the <paramref name="value"/> is null or empty.
            </summary>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to write to.</param>
            <param name="value">The value to write, or <c>null</c> to remove the key.</param>
            <returns>The interface to <paramref name="data"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.WriteIfNotExists(StardewValley.ModDataDictionary,System.String,System.String)">
            <summary>
                Writes a <paramref name="value"/> to the <see cref="T:StardewValley.ModDataDictionary"/> only if the specified
                <paramref name="key"/> does not yet exist.
            </summary>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to write to.</param>
            <param name="value">The value to write.</param>
            <returns>The interface to <paramref name="data"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.WriteIfNotExists(StardewValley.ModDataDictionary,System.String,System.String,System.Boolean@)">
            <summary>
                Writes a <paramref name="value"/> to the <see cref="T:StardewValley.ModDataDictionary"/> only if the specified
                <paramref name="key"/> does not yet exist, and returns whether or not it existed.
            </summary>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to write to.</param>
            <param name="value">The value to write.</param>
            <param name="didExist"><see langword="true"/> if the key did in fact exist in the dictionary, otherwise <see langword="false"/>.</param>
            <returns>The interface to <paramref name="data"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.Append``1(StardewValley.ModDataDictionary,System.String,``0,System.String)">
            <summary>
                Appends a <see cref="T:System.String"/> representation of a <paramref name="value"/> to the specified <paramref name="key"/> in
                the <see cref="T:StardewValley.ModDataDictionary"/>, prefixed with the chosen <paramref name="separator"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to update.</param>
            <param name="value">The value to append.</param>
            <param name="separator">The <see cref="T:System.String"/> which separates values.</param>
            <returns>The interface to <paramref name="data"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.Increment``1(StardewValley.ModDataDictionary,System.String,``0)">
            <summary>Increments the value at <paramref name="key"/> by a generic <paramref name="amount"/>.</summary>
            <typeparam name="T">A numeric value type.</typeparam>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <param name="key">The dictionary key to update.</param>
            <param name="amount">The amount to increment by.</param>
            <returns>The interface to <paramref name="data"/>.</returns>
            <remarks>
                Original code by
                <see href="https://stackoverflow.com/questions/8122611/c-sharp-adding-two-generic-values">Adi Lester</see>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.ModData.ModDataDictionaryExtensions.ToDebugString(StardewValley.ModDataDictionary)">
            <summary>Gets a <see cref="T:System.String"/> representation of the <see cref="T:StardewValley.ModDataDictionary"/>.</summary>
            <param name="data">The <see cref="T:StardewValley.ModDataDictionary"/>.</param>
            <returns>A <see cref="T:System.String"/> representation of the <see cref="T:StardewValley.ModDataDictionary"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.ModData.UpdateDataModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.ModData.UpdateDataModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.ModData.UpdateDataModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.ModData.UpdateDataModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Enums.FacingDirection">
            <summary>The direction which a <see cref="T:StardewValley.Character"/> is facing.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Up">
            <summary>The up direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Right">
            <summary>The right direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Down">
            <summary>The down direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.FacingDirection.Left">
            <summary>The left direction.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.FacingDirectionExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> enum.</summary>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.IsHorizontal(DaLion.Shared.Enums.FacingDirection)">
            <summary>Checks whether the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> is left or right.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns><see langword="true"/> if <paramref name="direction"/> is left or right, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.IsVertical(DaLion.Shared.Enums.FacingDirection)">
            <summary>Checks whether the <see cref="T:DaLion.Shared.Enums.FacingDirection"/> is up or down.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns><see langword="true"/> if <paramref name="direction"/> is up or down, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.Opposite(DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the opposite <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The opposite direction.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.AngleWith(DaLion.Shared.Enums.FacingDirection,DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the angle between two <see cref="T:DaLion.Shared.Enums.FacingDirection"/>s.</summary>
            <param name="direction">The <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <param name="other">Another <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The angle between the two directions, in degrees.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.FacingDirectionExtensions.ToVector(DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets a unit vector which points in the specified direction.</summary>
            <param name="direction">A <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing towards <paramref name="direction"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Enums.Machine">
            <summary>A BigCraftable <see cref="T:StardewValley.Object"/> that takes an input and produces an output, and can be automated.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.LightningRod">
            <summary>Lightning Rod machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.BeeHouse">
            <summary>Bee House machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Keg">
            <summary>Keg machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Furnace">
            <summary>Furnace machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.PreservesJar">
            <summary>Preserves Jar machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.CheesePress">
            <summary>Cheese Press machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Loom">
            <summary>Loom machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.OilMaker">
            <summary>Oil Maker machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.RecyclingMachine">
            <summary>Recycling machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Crystalarium">
            <summary>Crystalarium machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.MayonnaiseMachine">
            <summary>Mayonnaise machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.SeedMaker">
            <summary>Seed Maker machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.BoneMill">
            <summary>Bone Mill machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.FeedHopper">
            <summary>Feed Hopper machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Incubator">
            <summary>Incubator machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Tapper">
            <summary>Tapper machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.SodaMachine">
            <summary>Soda machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.CharcoalKiln">
            <summary>Charcoal Kiln machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.StatueOfEndlessFortune">
            <summary>Statue Of Endless Fortune machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.MushroomBox">
            <summary>Mushroom Box machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.WormBin">
            <summary>Worm Bin machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.SlimeIncubator">
            <summary>Slime Incubator machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.SlimeEggPress">
            <summary>Slime Egg Press machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.StatueOfPerfection">
            <summary>Statue Of Perfection machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Cask">
            <summary>Cask machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.AutoGrabber">
            <summary>Auto-Grabber machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.GeodeCrusher">
            <summary>Geode Crusher machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.WoodChipper">
            <summary>Wood Chipper machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.SolarPanel">
            <summary>Solar Panel machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.CoffeeMaker">
            <summary>Coffee Maker machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.MiniShippingBin">
            <summary>Mini-Shipping Bin machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.OstrichIncubator">
            <summary>Ostrich Incubator machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.HeavyTapper">
            <summary>Heavy Tapper machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Deconstructor">
            <summary>Deconstructor machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.Hopper">
            <summary>Hopper machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.StatueOfTruePerfection">
            <summary>Statue Of True Perfection machine.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Machine.CrabPot">
            <summary>Crab Pot machine.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.Quality">
            <summary>The star quality of an <see cref="T:StardewValley.Object"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Quality.Regular">
            <summary>Regular quality.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Quality.Silver">
            <summary>Silver quality.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Quality.Gold">
            <summary>Gold quality.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Quality.Iridium">
            <summary>Iridium quality.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.QualityExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Enums.Quality"/> enum.</summary>
        </member>
        <member name="M:DaLion.Shared.Enums.QualityExtensions.Increment(DaLion.Shared.Enums.Quality)">
            <summary>Improves a <see cref="T:DaLion.Shared.Enums.Quality"/> level by one stage.</summary>
            <param name="quality">The <see cref="T:DaLion.Shared.Enums.Quality"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Enums.Quality"/> one stage higher than <paramref name="quality"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.QualityExtensions.Decrement(DaLion.Shared.Enums.Quality)">
            <summary>Lowers a <see cref="T:DaLion.Shared.Enums.Quality"/> level by one stage.</summary>
            <param name="quality">The <see cref="T:DaLion.Shared.Enums.Quality"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Enums.Quality"/> one stage lower than <paramref name="quality"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Enums.Season">
            <summary>An in-game Season.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Season.Spring">
            <summary>The Spring season.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Season.Summer">
            <summary>The Summer season.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Season.Fall">
            <summary>The Fall season.</summary>
        </member>
        <member name="F:DaLion.Shared.Enums.Season.Winter">
            <summary>The Winter season.</summary>
        </member>
        <member name="T:DaLion.Shared.Enums.SeasonExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Enums.Season"/> enum.</summary>
        </member>
        <member name="M:DaLion.Shared.Enums.SeasonExtensions.Previous(DaLion.Shared.Enums.Season)">
            <summary>Gets the <see cref="T:DaLion.Shared.Enums.Season"/> before <paramref name="season"/>.</summary>
            <param name="season">The <see cref="T:DaLion.Shared.Enums.Season"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Enums.Season"/> before <paramref name="season"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.SeasonExtensions.Next(DaLion.Shared.Enums.Season)">
            <summary>Gets the <see cref="T:DaLion.Shared.Enums.Season"/> after <paramref name="season"/>.</summary>
            <param name="season">The <see cref="T:DaLion.Shared.Enums.Season"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Enums.Season"/> after <paramref name="season"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.SeasonExtensions.Current">
            <summary>Gets the current in-game <see cref="T:DaLion.Shared.Enums.Season"/>.</summary>
            <returns>The current <see cref="T:DaLion.Shared.Enums.Season"/>n.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.SeasonExtensions.Previous">
            <summary>Gets the previous in-game <see cref="T:DaLion.Shared.Enums.Season"/>.</summary>
            <returns>The previous <see cref="T:DaLion.Shared.Enums.Season"/>n.</returns>
        </member>
        <member name="M:DaLion.Shared.Enums.SeasonExtensions.Next">
            <summary>Gets the next in-game <see cref="T:DaLion.Shared.Enums.Season"/>.</summary>
            <returns>The next <see cref="T:DaLion.Shared.Enums.Season"/>n.</returns>
        </member>
        <member name="T:DaLion.Shared.Events.AssetReadyEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetReady"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.AssetReadyEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.OnAssetReady(System.Object,StardewModdingAPI.Events.AssetReadyEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.AssetReady"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetReadyEvent.OnAssetReadyImpl(System.Object,StardewModdingAPI.Events.AssetReadyEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.AssetReadyEvent.OnAssetReady(System.Object,StardewModdingAPI.Events.AssetReadyEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.AssetRequestedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.AssetRequestedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.OnAssetRequested(System.Object,StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.AssetRequested"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.OnAssetRequestedImpl(System.Object,StardewModdingAPI.Events.AssetRequestedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.AssetRequestedEvent.OnAssetRequested(System.Object,StardewModdingAPI.Events.AssetRequestedEventArgs)"/>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Edit(System.String,DaLion.Shared.Content.IAssetEditor)">
            <summary>Caches the specified <paramref name="editor"/> for the asset with the specified <paramref name="name"/>.</summary>
            <param name="name">The name of the asset.</param>
            <param name="editor">The <see cref="T:DaLion.Shared.Content.AssetEditor"/>.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetRequestedEvent.Provide(System.String,DaLion.Shared.Content.IAssetProvider)">
            <summary>Caches the specified <paramref name="provider"/> for the asset with the specified <paramref name="name"/>.</summary>
            <param name="name">The name of the asset.</param>
            <param name="provider">The <see cref="T:DaLion.Shared.Content.IAssetProvider"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Events.AssetsInvalidatedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.AssetsInvalidated"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.AssetsInvalidatedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.OnAssetsInvalidated(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.AssetsInvalidated"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.AssetsInvalidatedEvent.OnAssetsInvalidatedImpl(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.AssetsInvalidatedEvent.OnAssetsInvalidated(System.Object,StardewModdingAPI.Events.AssetsInvalidatedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LocaleChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IContentEvents.LocaleChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LocaleChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.OnLocaleChanged(System.Object,StardewModdingAPI.Events.LocaleChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IContentEvents.LocaleChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocaleChangedEvent.OnLocaleChangedImpl(System.Object,StardewModdingAPI.Events.LocaleChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LocaleChangedEvent.OnLocaleChanged(System.Object,StardewModdingAPI.Events.LocaleChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.AlwaysEnabledEventAttribute">
            <summary>Specifies that a <see cref="T:DaLion.Shared.Events.IManagedEvent"/> should ignore its <see cref="P:DaLion.Shared.Events.IManagedEvent.IsEnabled"/> flag.</summary>
        </member>
        <member name="T:DaLion.Shared.Events.FirstSecondUpdateTickedEvent">
            <summary>Wrapper for a <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/> which executes exactly once.</summary>
            <remarks>Useful for set-up code which requires third-party mod integrations to be registered.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.FirstSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.OnFirstSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.OnFirstSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.FirstSecondUpdateTickedEvent.OnFirstSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ButtonReleasedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.ButtonReleased"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ButtonReleasedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.OnButtonReleased(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.ButtonReleased"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonReleasedEvent.OnButtonReleasedImpl(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ButtonReleasedEvent.OnButtonReleased(System.Object,StardewModdingAPI.Events.ButtonReleasedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ButtonPressedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.ButtonPressed"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ButtonPressedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.OnButtonPressed(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.ButtonPressed"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonPressedEvent.OnButtonPressedImpl(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ButtonPressedEvent.OnButtonPressed(System.Object,StardewModdingAPI.Events.ButtonPressedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ButtonsChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.ButtonsChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ButtonsChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.OnButtonsChanged(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.ButtonsChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ButtonsChangedEvent.OnButtonsChangedImpl(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ButtonsChangedEvent.OnButtonsChanged(System.Object,StardewModdingAPI.Events.ButtonsChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.MouseWheelScrolledEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.MouseWheelScrolled"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.MouseWheelScrolledEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.OnMouseWheelScrolled(System.Object,StardewModdingAPI.Events.MouseWheelScrolledEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.MouseWheelScrolled"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MouseWheelScrolledEvent.OnMouseWheelScrolledImpl(System.Object,StardewModdingAPI.Events.MouseWheelScrolledEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.MouseWheelScrolledEvent.OnMouseWheelScrolled(System.Object,StardewModdingAPI.Events.MouseWheelScrolledEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.CursorMovedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IInputEvents.CursorMoved"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.CursorMovedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.OnCursorMoved(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IInputEvents.CursorMoved"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.CursorMovedEvent.OnCursorMovedImpl(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.CursorMovedEvent.OnCursorMoved(System.Object,StardewModdingAPI.Events.CursorMovedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.MenuChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.MenuChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.MenuChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.OnMenuChanged(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.MenuChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.MenuChangedEvent.OnMenuChangedImpl(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.MenuChangedEvent.OnMenuChanged(System.Object,StardewModdingAPI.Events.MenuChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedActiveMenuEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedActiveMenu"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.OnRenderedActiveMenu(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedActiveMenu"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedActiveMenuEvent.OnRenderedActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedActiveMenuEvent.OnRenderedActiveMenu(System.Object,StardewModdingAPI.Events.RenderedActiveMenuEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendered"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.OnRendered(System.Object,StardewModdingAPI.Events.RenderedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendered"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedEvent.OnRenderedImpl(System.Object,StardewModdingAPI.Events.RenderedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedEvent.OnRendered(System.Object,StardewModdingAPI.Events.RenderedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedHudEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedHud"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.OnRenderedHud(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedHud"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedHudEvent.OnRenderedHudImpl(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedHudEvent.OnRenderedHud(System.Object,StardewModdingAPI.Events.RenderedHudEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderedWorldEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedWorld"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderedWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.OnRenderedWorld(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderedWorld"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderedWorldEvent.OnRenderedWorldImpl(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderedWorldEvent.OnRenderedWorld(System.Object,StardewModdingAPI.Events.RenderedWorldEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingActiveMenuEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingActiveMenu"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingActiveMenuEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.OnRenderingActiveMenu(System.Object,StardewModdingAPI.Events.RenderingActiveMenuEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingActiveMenu"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingActiveMenuEvent.OnRenderingActiveMenuImpl(System.Object,StardewModdingAPI.Events.RenderingActiveMenuEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingActiveMenuEvent.OnRenderingActiveMenu(System.Object,StardewModdingAPI.Events.RenderingActiveMenuEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendering"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.OnRendering(System.Object,StardewModdingAPI.Events.RenderingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.Rendering"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingEvent.OnRenderingImpl(System.Object,StardewModdingAPI.Events.RenderingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingEvent.OnRendering(System.Object,StardewModdingAPI.Events.RenderingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingHudEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingHud"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingHudEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.OnRenderingHud(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingHud"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingHudEvent.OnRenderingHudImpl(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingHudEvent.OnRenderingHud(System.Object,StardewModdingAPI.Events.RenderingHudEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.RenderingWorldEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingWorld"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.RenderingWorldEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.OnRenderingWorld(System.Object,StardewModdingAPI.Events.RenderingWorldEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.RenderingWorld"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.RenderingWorldEvent.OnRenderingWorldImpl(System.Object,StardewModdingAPI.Events.RenderingWorldEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.RenderingWorldEvent.OnRenderingWorld(System.Object,StardewModdingAPI.Events.RenderingWorldEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.WindowResizedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IDisplayEvents.WindowResized"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.WindowResizedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.OnWindowResized(System.Object,StardewModdingAPI.Events.WindowResizedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IDisplayEvents.WindowResized"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WindowResizedEvent.OnWindowResizedImpl(System.Object,StardewModdingAPI.Events.WindowResizedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.WindowResizedEvent.OnWindowResized(System.Object,StardewModdingAPI.Events.WindowResizedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.DayEndingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayEnding"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.DayEndingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.OnDayEnding(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayEnding"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayEndingEvent.OnDayEndingImpl(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.DayEndingEvent.OnDayEnding(System.Object,StardewModdingAPI.Events.DayEndingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.DayStartedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.DayStarted"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.DayStartedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.OnDayStarted(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <summary>Raised after a new in-game day starts, or after connecting to a multiplayer world.</summary>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DayStartedEvent.OnDayStartedImpl(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.DayStartedEvent.OnDayStarted(System.Object,StardewModdingAPI.Events.DayStartedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.GameLaunchedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.GameLaunchedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.OnGameLaunched(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.GameLaunched"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.GameLaunchedEvent.OnGameLaunchedImpl(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.GameLaunchedEvent.OnGameLaunched(System.Object,StardewModdingAPI.Events.GameLaunchedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.OneSecondUpdateTickedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.OneSecondUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.OnOneSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.OnOneSecondUpdateTickedImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.OneSecondUpdateTickedEvent.OnOneSecondUpdateTicked(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.OneSecondUpdateTickingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicking"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.OneSecondUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.OnOneSecondUpdateTicking(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.OneSecondUpdateTicking"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.OnOneSecondUpdateTickingImpl(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.OneSecondUpdateTickingEvent.OnOneSecondUpdateTicking(System.Object,StardewModdingAPI.Events.OneSecondUpdateTickingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ReturnedToTitleEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.ReturnedToTitle"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ReturnedToTitleEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.OnReturnedToTitle(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.ReturnedToTitle"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ReturnedToTitleEvent.OnReturnedToTitleImpl(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ReturnedToTitleEvent.OnReturnedToTitle(System.Object,StardewModdingAPI.Events.ReturnedToTitleEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SaveCreatingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SaveCreatingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.SaveCreatingEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.OnSaveCreating(System.Object,StardewModdingAPI.Events.SaveCreatingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreating"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatingEvent.OnSaveCreatingImpl(System.Object,StardewModdingAPI.Events.SaveCreatingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SaveCreatingEvent.OnSaveCreating(System.Object,StardewModdingAPI.Events.SaveCreatingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SaveCreatedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreated"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SaveCreatedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.SaveCreatedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.OnSaveCreated(System.Object,StardewModdingAPI.Events.SaveCreatedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveCreated"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveCreatedEvent.OnSaveCreatedImpl(System.Object,StardewModdingAPI.Events.SaveCreatedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SaveCreatedEvent.OnSaveCreated(System.Object,StardewModdingAPI.Events.SaveCreatedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SavedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saved"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SavedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.OnSaved(System.Object,StardewModdingAPI.Events.SavedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saved"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavedEvent.OnSavedImpl(System.Object,StardewModdingAPI.Events.SavedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SavedEvent.OnSaved(System.Object,StardewModdingAPI.Events.SavedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SaveLoadedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveLoaded"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SaveLoadedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.OnSaveLoaded(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.SaveLoaded"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SaveLoadedEvent.OnSaveLoadedImpl(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SaveLoadedEvent.OnSaveLoaded(System.Object,StardewModdingAPI.Events.SaveLoadedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.SavingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.SavingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.OnSaving(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.Saving"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.SavingEvent.OnSavingImpl(System.Object,StardewModdingAPI.Events.SavingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.SavingEvent.OnSaving(System.Object,StardewModdingAPI.Events.SavingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.TimeChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.TimeChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.TimeChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.OnTimeChanged(System.Object,StardewModdingAPI.Events.TimeChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.TimeChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TimeChangedEvent.OnTimeChangedImpl(System.Object,StardewModdingAPI.Events.TimeChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.TimeChangedEvent.OnTimeChanged(System.Object,StardewModdingAPI.Events.TimeChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UpdateTickedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.OnUpdateTicked(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickedEvent.OnUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UpdateTickedEvent.OnUpdateTicked(System.Object,StardewModdingAPI.Events.UpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UpdateTickingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicking"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.OnUpdateTicking(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IGameLoopEvents.UpdateTicking"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UpdateTickingEvent.OnUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UpdateTickingEvent.OnUpdateTicking(System.Object,StardewModdingAPI.Events.UpdateTickingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.InventoryChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IPlayerEvents.InventoryChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.InventoryChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.OnInventoryChanged(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IPlayerEvents.InventoryChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.InventoryChangedEvent.OnInventoryChangedImpl(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.InventoryChangedEvent.OnInventoryChanged(System.Object,StardewModdingAPI.Events.InventoryChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LevelChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IPlayerEvents.LevelChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LevelChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.OnLevelChanged(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IPlayerEvents.LevelChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LevelChangedEvent.OnLevelChangedImpl(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LevelChangedEvent.OnLevelChanged(System.Object,StardewModdingAPI.Events.LevelChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.WarpedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IPlayerEvents.Warped"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.WarpedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.OnWarped(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IPlayerEvents.Warped"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.WarpedEvent.OnWarpedImpl(System.Object,StardewModdingAPI.Events.WarpedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.WarpedEvent.OnWarped(System.Object,StardewModdingAPI.Events.WarpedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ModMessageReceivedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.ModMessageReceived"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ModMessageReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.ModMessageReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.OnModMessageReceived(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.ModMessageReceived"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ModMessageReceivedEvent.OnModMessageReceivedImpl(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ModMessageReceivedEvent.OnModMessageReceived(System.Object,StardewModdingAPI.Events.ModMessageReceivedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.PeerConnectedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerConnected"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.PeerConnectedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.PeerConnectedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.OnPeerConnected(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerConnected"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.PeerConnectedEvent.OnPeerConnectedImpl(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.PeerConnectedEvent.OnPeerConnected(System.Object,StardewModdingAPI.Events.PeerConnectedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.PeerContextReceivedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerContextReceived"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.PeerContextReceivedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.PeerContextReceivedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.OnPeerContextReceived(System.Object,StardewModdingAPI.Events.PeerContextReceivedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerContextReceived"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.PeerContextReceivedEvent.OnPeerContextReceivedImpl(System.Object,StardewModdingAPI.Events.PeerContextReceivedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.PeerContextReceivedEvent.OnPeerContextReceived(System.Object,StardewModdingAPI.Events.PeerContextReceivedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.PeerDisconnectedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerDisconnected"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.PeerDisconnectedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.PeerDisconnectedEvent.IsEnabled">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.OnPeerDisconnected(System.Object,StardewModdingAPI.Events.PeerDisconnectedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IMultiplayerEvents.PeerDisconnected"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.PeerDisconnectedEvent.OnPeerDisconnectedImpl(System.Object,StardewModdingAPI.Events.PeerDisconnectedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.PeerDisconnectedEvent.OnPeerDisconnected(System.Object,StardewModdingAPI.Events.PeerDisconnectedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LoadStageChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LoadStageChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.OnLoadStageChanged(System.Object,StardewModdingAPI.Events.LoadStageChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.ISpecializedEvents.LoadStageChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LoadStageChangedEvent.OnLoadStageChangedImpl(System.Object,StardewModdingAPI.Events.LoadStageChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LoadStageChangedEvent.OnLoadStageChanged(System.Object,StardewModdingAPI.Events.LoadStageChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.OnUnvalidatedUpdateTicked(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicked"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.OnUnvalidatedUpdateTickedImpl(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UnvalidatedUpdateTickedEvent.OnUnvalidatedUpdateTicked(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.OnUnvalidatedUpdateTicking(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.ISpecializedEvents.UnvalidatedUpdateTicking"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.OnUnvalidatedUpdateTickingImpl(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.UnvalidatedUpdateTickingEvent.OnUnvalidatedUpdateTicking(System.Object,StardewModdingAPI.Events.UnvalidatedUpdateTickingEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.BuildingListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.BuildingListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.BuildingListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.OnBuildingListChanged(System.Object,StardewModdingAPI.Events.BuildingListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.BuildingListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.BuildingListChangedEvent.OnBuildingListChangedImpl(System.Object,StardewModdingAPI.Events.BuildingListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.BuildingListChangedEvent.OnBuildingListChanged(System.Object,StardewModdingAPI.Events.BuildingListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ChestInventoryChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.ChestInventoryChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ChestInventoryChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.OnChestInventoryChanged(System.Object,StardewModdingAPI.Events.ChestInventoryChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.ChestInventoryChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ChestInventoryChangedEvent.OnChestInventoryChangedImpl(System.Object,StardewModdingAPI.Events.ChestInventoryChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ChestInventoryChangedEvent.OnChestInventoryChanged(System.Object,StardewModdingAPI.Events.ChestInventoryChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.DebrisListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.DebrisListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.DebrisListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.OnDebrisListChanged(System.Object,StardewModdingAPI.Events.DebrisListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.DebrisListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.DebrisListChangedEvent.OnDebrisListChangedImpl(System.Object,StardewModdingAPI.Events.DebrisListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.DebrisListChangedEvent.OnDebrisListChanged(System.Object,StardewModdingAPI.Events.DebrisListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.FurnitureListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.FurnitureListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.FurnitureListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.OnFurnitureListChanged(System.Object,StardewModdingAPI.Events.FurnitureListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.FurnitureListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.FurnitureListChangedEvent.OnFurnitureListChangedImpl(System.Object,StardewModdingAPI.Events.FurnitureListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.FurnitureListChangedEvent.OnFurnitureListChanged(System.Object,StardewModdingAPI.Events.FurnitureListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.LargeTerrainFeatureListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.OnLargeTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.LargeTerrainFeatureListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.OnLargeTerrainFeatureListChangedImpl(System.Object,StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LargeTerrainFeatureListChangedEvent.OnLargeTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.LargeTerrainFeatureListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.LocationListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.LocationListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.LocationListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.OnLocationListChanged(System.Object,StardewModdingAPI.Events.LocationListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.LocationListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.LocationListChangedEvent.OnLocationListChangedImpl(System.Object,StardewModdingAPI.Events.LocationListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.LocationListChangedEvent.OnLocationListChanged(System.Object,StardewModdingAPI.Events.LocationListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.NpcListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.NpcListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.NpcListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.OnNpcListChanged(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.NpcListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.NpcListChangedEvent.OnNpcListChangedImpl(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.NpcListChangedEvent.OnNpcListChanged(System.Object,StardewModdingAPI.Events.NpcListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.ObjectListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.ObjectListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ObjectListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.OnObjectListChanged(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.ObjectListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.ObjectListChangedEvent.OnObjectListChangedImpl(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.ObjectListChangedEvent.OnObjectListChanged(System.Object,StardewModdingAPI.Events.ObjectListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.TerrainFeatureListChangedEvent">
            <summary>Wrapper for <see cref="E:StardewModdingAPI.Events.IWorldEvents.TerrainFeatureListChanged"/> allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.TerrainFeatureListChangedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.OnTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="E:StardewModdingAPI.Events.IWorldEvents.TerrainFeatureListChanged"/>
            <param name="sender">The event sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.OnTerrainFeatureListChangedImpl(System.Object,StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs)">
            <inheritdoc cref="M:DaLion.Shared.Events.TerrainFeatureListChangedEvent.OnTerrainFeatureListChanged(System.Object,StardewModdingAPI.Events.TerrainFeatureListChangedEventArgs)"/>
        </member>
        <member name="T:DaLion.Shared.Events.EventManager">
            <summary>
                Instantiates and manages dynamic enabling and disabling of <see cref="T:DaLion.Shared.Events.IManagedEvent"/> classes in an
                assembly or namespace.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Events.EventManager._eventCache">
            <summary>Cache of <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances by type.</summary>
        </member>
        <member name="F:DaLion.Shared.Events.EventManager._modRegistry">
            <inheritdoc cref="T:StardewModdingAPI.IModRegistry"/>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.#ctor(StardewModdingAPI.Events.IModEvents,StardewModdingAPI.IModRegistry)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.EventManager"/> class.</summary>
            <param name="modEvents">The <see cref="T:StardewModdingAPI.Events.IModEvents"/> API for the current mod.</param>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.ModEvents">
            <inheritdoc cref="T:StardewModdingAPI.Events.IModEvents"/>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.Managed">
            <summary>Gets an enumerable of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s instances.</summary>
        </member>
        <member name="P:DaLion.Shared.Events.EventManager.Enabled">
            <summary>Gets an enumerable of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s currently enabled for the local player.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnabledForScreen(System.Int32)">
            <summary>Enumerates all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s currently enabled for the specified screen.</summary>
            <param name="screenId">The screen ID.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of enabled <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s in the specified screen.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Manage(DaLion.Shared.Events.IManagedEvent)">
            <summary>Adds the <paramref name="event"/> instance to the cache.</summary>
            <param name="event">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageAll">
            <summary>Implicitly manages <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types in the assembly.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageNamespace(System.String)">
            <summary>Implicitly manages <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types in the specified namespace.</summary>
            <param name="namespace">The desired namespace.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageWithAttribute``1">
            <summary>Implicitly manages <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types with the specified attribute type.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Unmanage(DaLion.Shared.Events.IManagedEvent)">
            <summary>Disposes the <paramref name="event"/> instance and removes it from the cache.</summary>
            <param name="event">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.UnmanageAll">
            <summary>Disposes all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances and clear the event cache.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.UnmanageNamespace(System.String)">
            <summary>Disposes all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances belonging to the specified namespace and removes them from the cache.</summary>
            <param name="namespace">The desired namespace.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.UnmanageWithAttribute``1">
            <summary>Disposes all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances with the specified attribute type.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Enable(System.Type)">
            <summary>Enable a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Enable(System.Type[])">
            <summary>Enables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Enable``1">
            <summary>Enable a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</typeparam>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForScreen(System.Type,System.Int32)">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</param>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForScreen(System.Int32,System.Type[])">
            <summary>Enables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types for the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForScreen``1(System.Int32)">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</typeparam>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForAllScreens(System.Type)">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForAllScreens(System.Type[])">
            <summary>Enables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types for the specified screen.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to enable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableForAllScreens``1">
            <summary>Enables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to enable.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Disable(System.Type)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Disable(System.Type[])">
            <summary>Disables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s events.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Disable``1">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForScreen(System.Type,System.Int32)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</param>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForScreen(System.Int32,System.Type[])">
            <summary>Disables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s for the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForScreen``1(System.Int32)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">An <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForAllScreens(System.Type)">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <param name="eventType">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForAllScreens(System.Type[])">
            <summary>Disables the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s for the specified screen.</summary>
            <param name="eventTypes">The <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types to disable.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableForAllScreens``1">
            <summary>Disables a single <see cref="T:DaLion.Shared.Events.IManagedEvent"/> for the specified screen.</summary>
            <typeparam name="TEvent">A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type to disable.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableAll">
            <summary>Enables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableAll">
            <summary>Disables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.EnableWithAttribute``1">
            <summary>Enables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types starting with attribute <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.DisableWithAttribute``1">
            <summary>Disables all <see cref="T:DaLion.Shared.Events.IManagedEvent"/> types starting with attribute <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Reset">
            <summary>Resets the enabled status of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s in the assembly for the current screen.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ResetForAllScreens">
            <summary>Resets the enabled status of all <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s in the assembly for all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Get(System.Type)">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of type <paramref name="eventType"/>.</summary>
            <param name="eventType">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of the specified <paramref name="eventType"/> if one exists, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Get``1">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of type <typeparamref name="TEvent"/>.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <returns>A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of type <typeparamref name="TEvent"/> if one exists, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetAllForNamespace(System.String)">
            <summary>Enumerates all managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances declared in the specified <paramref name="namespace"/>.</summary>
            <param name="namespace">The desired namespace.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetAllWithAttribute``1">
            <summary>Enumerates all managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instances with the specified <typeparamref name="TAttribute"/>.</summary>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.IsEnabled``1">
            <summary>Determines whether the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type is enabled.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <returns><see langword="true"/> if the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> is enabled for the local screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.IsEnabledForScreen``1(System.Int32)">
            <summary>Determines whether the specified <see cref="T:DaLion.Shared.Events.IManagedEvent"/> type is enabled for a specific screen.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <param name="screenId">The screen ID.</param>
            <returns><see langword="true"/> if the <see cref="T:DaLion.Shared.Events.IManagedEvent"/> is enabled for the specified screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.ManageImplicitly(System.Func{System.Type,System.Boolean})">
            <summary>Instantiates and manages <see cref="T:DaLion.Shared.Events.IManagedEvent"/> classes using reflection.</summary>
            <param name="predicate">An optional condition with which to limit the scope of managed <see cref="T:DaLion.Shared.Events.IManagedEvent"/>s.</param>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetOrCreate(System.Type)">
            <summary>Retrieves an existing event instance from the cache, or caches a new instance.</summary>
            <param name="eventType">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</param>
            <returns>The cached <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance, or <see langword="null"/> if one could not be created.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.GetOrCreate``1">
            <summary>Retrieves an existing event instance from the cache, or caches a new instance.</summary>
            <typeparam name="TEvent">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</typeparam>
            <returns>The cached <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance, or <see langword="null"/> if one could not be created.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.EventManager.Create(System.Type)">
            <summary>Instantiates a new <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of the specified <paramref name="eventType"/>.</summary>
            <param name="eventType">A type implementing <see cref="T:DaLion.Shared.Events.IManagedEvent"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Events.IManagedEvent"/> instance of the specified <paramref name="eventType"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Events.IManagedEvent">
            <summary>Interface for an event wrapper allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="P:DaLion.Shared.Events.IManagedEvent.IsEnabled">
            <summary>Gets a value indicating whether this event is enabled.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.IsEnabledForScreen(System.Int32)">
            <summary>Determines whether this event is enabled for a specific screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event is enabled for the specified screen, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Enable">
            <summary>Enables this event on the current screen.</summary>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.EnableForScreen(System.Int32)">
            <summary>Enables this event on the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.EnableForAllScreens">
            <summary>Enables this event on the all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Disable">
            <summary>Disables this event on the current screen.</summary>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.DisableForScreen(System.Int32)">
            <summary>Disables this event on the specified screen.</summary>
            <param name="screenId">A local peer's screen ID.</param>
            <returns><see langword="true"/> if the event's enabled status was changed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.DisableForAllScreens">
            <summary>Disables this event on the all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.Reset">
            <summary>Resets this event's enabled state on all screens.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.IManagedEvent.ResetForAllScreens">
            <summary>Resets this event's enabled state on all screens.</summary>
        </member>
        <member name="T:DaLion.Shared.Events.ManagedEvent">
            <summary>Base implementation of an event wrapper allowing dynamic enabling / disabling.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.#ctor(DaLion.Shared.Events.EventManager)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Events.ManagedEvent"/> class.</summary>
            <param name="manager">The <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</param>
        </member>
        <member name="P:DaLion.Shared.Events.ManagedEvent.IsEnabled">
            <inheritdoc />
            <remarks>Overriding this property will prevent <see cref="M:DaLion.Shared.Events.ManagedEvent.Enable"/> and <see cref="M:DaLion.Shared.Events.ManagedEvent.Disable"/> from doing anything.</remarks>
        </member>
        <member name="P:DaLion.Shared.Events.ManagedEvent.Manager">
            <summary>Gets the <see cref="T:DaLion.Shared.Events.EventManager"/> instance that manages this event.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Equals(DaLion.Shared.Events.ManagedEvent)">
            <summary>Determines whether two <see cref="T:DaLion.Shared.Events.ManagedEvent"/> instances are equal.</summary>
            <param name="other">A <see cref="T:DaLion.Shared.Events.ManagedEvent"/> to compare to this instance.</param>
            <returns>
                <see langword="true"/> if <paramref name="other"/> has the same type as this instance, otherwise
                <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.IsEnabledForScreen(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Enable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.EnableForScreen(System.Int32)">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnEnabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.EnableForAllScreens">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnEnabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Disable">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.DisableForScreen(System.Int32)">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnDisabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.DisableForAllScreens">
            <inheritdoc />
            <remarks>This will not invoke the <see cref="M:DaLion.Shared.Events.ManagedEvent.OnDisabled"/> callback.</remarks>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.ResetForAllScreens">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.ToString">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.CompareTo(DaLion.Shared.Events.ManagedEvent)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.OnEnabled">
            <summary>Invoked once when the event is enabled.</summary>
        </member>
        <member name="M:DaLion.Shared.Events.ManagedEvent.OnDisabled">
            <summary>Invoked once when the event is disabled.</summary>
        </member>
        <member name="T:DaLion.Shared.Exceptions.MissingTypeException">
            <summary>Thrown when a given type is not found in any executing assembly at runtime.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.MissingTypeException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.MissingTypeException"/> class.</summary>
            <param name="name">The name of the expected type.</param>
        </member>
        <member name="T:DaLion.Shared.Exceptions.ThrowHelperExtensions">
            <summary>Throws <see cref="T:System.Exception"/>s not available in <see cref="T:CommunityToolkit.Diagnostics.ThrowHelper"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowFileLoadException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.IO.FileLoadException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IO.FileLoadException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowIndexOutOfRangeException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.IndexOutOfRangeException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowMissingMethodException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.MissingMethodException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.MissingMethodException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowNotImplementedException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="message">The message to include in the exception.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowTypeInitializationException(System.String,System.Exception)">
            <summary>
                Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="fullTypeName">The name of the type which failed to initialize.</param>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowTypeInitializationException``1(System.Exception)">
            <summary>
                Throws a new <see cref="T:System.NotImplementedException"/>.
            </summary>
            <typeparam name="T">The type which failed to initialize.</typeparam>
            <param name="innerException">The inner <see cref="T:System.Exception"/> to include.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``1(System.Int32)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``1(``0)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``2(System.Int32)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <typeparam name="TReturn">The return type expected by the method where the exception is thrown.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowUnexpectedEnumValueException``2(``0)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/>.
            </summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
            <typeparam name="TReturn">The return type expected by the method where the exception is thrown.</typeparam>
            <param name="value">The unexpected enum value.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotImplementedException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowPatternNotFoundException(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/>.
            </summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
            <exception cref="T:DaLion.Shared.Exceptions.PatternNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowPatternNotFoundException(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase,System.Func{System.String})">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/>.
            </summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
            <exception cref="T:DaLion.Shared.Exceptions.PatternNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowLabelNotFoundException(System.Reflection.Emit.Label,System.Reflection.MethodBase)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/>.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
            <exception cref="T:DaLion.Shared.Exceptions.LabelNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowLabelNotFoundException(System.Reflection.Emit.Label,System.Reflection.MethodBase,System.Func{System.String})">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/>.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
            <exception cref="T:DaLion.Shared.Exceptions.LabelNotFoundException">Thrown with the specified parameters.</exception>
        </member>
        <member name="M:DaLion.Shared.Exceptions.ThrowHelperExtensions.ThrowMissingTypeException(System.String)">
            <summary>
                Throws a new <see cref="T:DaLion.Shared.Exceptions.MissingTypeException"/>.
            </summary>
            <param name="name">The name of the expected type.</param>
            <returns>Nothing.</returns>
            <exception cref="T:DaLion.Shared.Exceptions.MissingTypeException">Thrown with the specified parameters.</exception>
        </member>
        <member name="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1">
            <summary>Thrown when an unexpected enum value is received.</summary>
            <typeparam name="TEnum">The enum type that received an unexpected value.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/> class.</summary>
            <param name="value">The unexpected enum value.</param>
        </member>
        <member name="M:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.UnexpectedEnumValueException`1"/> class.</summary>
            <param name="value">The unexpected enum value.</param>
        </member>
        <member name="T:DaLion.Shared.Exceptions.LabelNotFoundException">
            <summary>Thrown when a <see cref="T:System.Reflection.Emit.Label"/> is not found within the expected instructions list.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.LabelNotFoundException.#ctor(System.Reflection.Emit.Label,System.Reflection.MethodBase)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/> class.</summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
        </member>
        <member name="M:DaLion.Shared.Exceptions.LabelNotFoundException.#ctor(System.Reflection.Emit.Label,System.Reflection.MethodBase,System.Func{System.String})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.LabelNotFoundException"/> class.</summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> which could not be found.</param>
            <param name="target">The target method where the label was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
        </member>
        <member name="T:DaLion.Shared.Exceptions.PatternNotFoundException">
            <summary>Thrown when a <see cref="T:HarmonyLib.CodeInstruction"/> pattern is not found within the expected instructions list.</summary>
        </member>
        <member name="M:DaLion.Shared.Exceptions.PatternNotFoundException.#ctor(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/> class.</summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
        </member>
        <member name="M:DaLion.Shared.Exceptions.PatternNotFoundException.#ctor(HarmonyLib.CodeInstruction[],System.Reflection.MethodBase,System.Func{System.String})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Exceptions.PatternNotFoundException"/> class.</summary>
            <param name="pattern">A sequence of <see cref="T:HarmonyLib.CodeInstruction"/> that could not be found.</param>
            <param name="target">The target method where the pattern was searched for.</param>
            <param name="snitch">A callback to snitch on applied changes to the target method.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.CollectionExtensions">
            <summary>Extensions for generic collections of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Determines whether the <paramref name="collection"/> contains any of the specified <paramref name="items"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains at least one of the specified <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the <paramref name="collection"/> contains any of the enumerated <paramref name="items"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains at least one of the specified <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>Determines whether the <paramref name="collection"/> contains all of the specified <paramref name="items"/>.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains all <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Determines whether the <paramref name="collection"/> contains all of the enumerated <paramref name="items"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="items">The objects to search for.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains all <paramref name="items"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ContainsType``1(System.Collections.Generic.ICollection{``0},System.Type)">
            <summary>Determines whether a <paramref name="collection"/> contains any instance of the given type.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="type">The type to search for. Should be a sub-type of <typeparamref name="T"/>.</param>
            <returns><see langword="true"/> if the <paramref name="collection"/> contains at least one element of the specified <paramref name="type"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.TryRemoveType``1(System.Collections.Generic.ICollection{``0},System.Type,``0@)">
            <summary>Removes the first instance of a given type from a <paramref name="collection"/>.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="type">The type to search for.</param>
            <param name="removed">The removed instance.</param>
            <returns><see langword="true"/> if an instance was successfully removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.RemoveTypes``1(System.Collections.Generic.ICollection{``0},System.Type[])">
            <summary>
                Removes the first instance of each of the given <paramref name="types"/> from a
                <paramref name="collection"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="types">The types to search for.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.AddOrReplace``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
                Adds the specified <paramref name="item"/> to the <paramref name="collection"/>, or moves it to the bottom
                if already contained.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="item">The item to add.</param>
            <returns>
                <see langword="true"/> if the <paramref name="collection"/> did not yet contain the <paramref name="item"/>,
                otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.AreAllEqual``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Determines whether all elements in the <paramref name="collection"/> are equal.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>, which should implements <see cref="T:System.IEquatable`1"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <param name="comparer">Optional <see cref="T:System.Collections.Generic.IComparer`1"/> object to define the equality between elements in the <paramref name="collection"/>.</param>
            <returns><see langword="true"/> if all elements in the <paramref name="collection"/> are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.CollectionExtensions.ToListString``1(System.Collections.Generic.ICollection{``0})">
            <summary>Gets a properly formatted, comma-separated string representation of the <paramref name="collection"/>.</summary>
            <typeparam name="T">The type of the elements in the <paramref name="collection"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>A properly formatted, comma-separated string representation of the <paramref name="collection"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.DictionaryExtensions">
            <summary>Extensions for the <see cref="T:System.Collections.Generic.Dictionary`2"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.Stringify``2(System.Collections.Generic.Dictionary{``0,``1},System.String,System.String)">
            <summary>Flattens pairs in the <paramref name="dictionary"/> into a single string.</summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="keyValueSeparator">The <see cref="T:System.String"/> with which to separate keys and values.</param>
            <param name="pairSeparator">The <see cref="T:System.String"/> with which to separate <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.</param>
            <returns>The entire contents of the <paramref name="dictionary"/> as one <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            <summary>
                Adds the <paramref name="value"/> to the <paramref name="dictionary"/> if the corresponding
                <paramref name="key"/> is not yet present, or update the current value according to the some
                <paramref name="aggregator"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="key">The key.</param>
            <param name="value">They value.</param>
            <param name="aggregator">A function that defines how items should be aggregated in case the key does exit.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.KeyValuePair{``0,``1},System.Func{``1,``1,``1})">
            <summary>
                Adds the <paramref name="pair"/> to the <paramref name="dictionary"/> if its key is not yet present, or
                update the current value according to the specified <paramref name="aggregator"/>.
            </summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="pair">A <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.</param>
            <param name="aggregator">A function that defines how items should be aggregated in case the pair's key does exit.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.MaxKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Gets the key with the highest value in the <paramref name="dictionary"/>.</summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>The key corresponding to the highest value in the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.DictionaryExtensions.MinKey``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>Gets the key with the lowest value in the <paramref name="dictionary"/>.</summary>
            <typeparam name="TKey">The type of keys in the <paramref name="dictionary"/>.</typeparam>
            <typeparam name="TValue">The type of values in the <paramref name="dictionary"/>, which should implement <see cref="T:System.IComparable`1"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <returns>The key corresponding to the lowest value in the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.EnumerableExtensions">
            <summary>Extensions for generic enumerations of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Applies an <paramref name="action"/> to each item in the <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="action">An action to apply.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.ArgMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Finds the item which maximizes the given <paramref name="predicate"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <typeparam name="TComparable">The type returned by the <paramref name="predicate"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="predicate">A predicate which must return <see cref="T:System.IComparable"/>.</param>
            <returns>The <typeparamref name="T"/> item in the enumerable which yields the highest <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.ArgMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Finds the item which minimizes the given <paramref name="predicate"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <typeparam name="TComparable">The type returned by the <paramref name="predicate"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="predicate">A predicate which must return <see cref="T:System.IComparable"/>.</param>
            <returns>The <typeparamref name="T"/> item in the enumerable which yields the lowest <typeparamref name="TComparable"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Filters out <see langword="null"/> references from the <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains only the non-null references of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}})">
            <summary>Filters out <see langword="null"/> values from the <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains only the non-null values of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.Choose``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>Selects a random value from amongst the specified <paramref name="enumerable"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="enumerable"/>.</typeparam>
            <param name="enumerable">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
            <returns>A random <typeparamref name="T"/> element from within <paramref name="enumerable"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>Calculates the standard deviation of the <paramref name="values"/>.</summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>Calculates the standard deviation of the <paramref name="values"/>.</summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Single"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>Calculates the standard deviation of the <paramref name="values"/>.</summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Double"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.EnumerableExtensions.StandardDeviation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Calculates the standard deviation the <paramref name="values"/>.</summary>
            <typeparam name="TEnum">A type of <see cref="T:System.Enum"/>.</typeparam>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/> values.</param>
            <returns>The standard deviation of values in <paramref name="values"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Collections.ListExtensions">
            <summary>Extensions for generic lists of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IndexOfMax``1(System.Collections.Generic.IList{``0})">
            <summary>Finds the index of the highest-valued item in the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The integer index of the element in the <paramref name="list"/> wit the highest value.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IndexOfMin``1(System.Collections.Generic.IList{``0})">
            <summary>Finds the index of the lowest-valued item in the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>, which should implement <see cref="T:System.IComparable"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The integer index of the element in the <paramref name="list"/> wit the lowest value.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Move``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Moves the item at position <paramref name="oldIndex"/> to position <paramref name="newIndex"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="oldIndex">The current position.</param>
            <param name="newIndex">The new position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Move``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>Moves the specified <paramref name="item"/> to position <paramref name="newIndex"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="item">The item to be moved.</param>
            <param name="newIndex">The new position.</param>
            <returns><see langword="true"/> if a matching item was found and moved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Move``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},System.Int32)">
            <summary>
                Moves the first item in the list that matches the <paramref name="predicate"/> to position
                <paramref name="newIndex"/>.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="predicate">A delegate that identifies the item to be moved.</param>
            <param name="newIndex">The new position.</param>
            <returns><see langword="true"/> if a matching item was moved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>Swaps the items at the specified positions.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="firstIndex">The index of the first item to be swapped.</param>
            <param name="secondIndex">The index of the second item to be swapped.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Swap``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>Swap the positions of the specified items.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="first">The first item to be swapped.</param>
            <param name="second">The second item to be swapped.</param>
            <exception cref="T:System.InvalidOperationException">If either <paramref name="first"/> or <paramref name="second"/> are not found in the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftRight``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Shifts all items <paramref name="count"/> units to the right.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="count">The number of shifts to perform.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with the same order of elements as the original, but shifted to the right.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftLeft``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>Shifts all items <paramref name="count"/> units to the left.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="count">The number of shifts to perform.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with the same order of elements as the original, but shifted to the left.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftUntilEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
                Shifts the elements in <paramref name="list"/> to the left until they match the specified
                <paramref name="pattern"/>.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="pattern">A pattern of elements to match.</param>
            <exception cref="T:System.InvalidOperationException">If the specified <paramref name="pattern"/> does not contain the exact same elements as the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftUntilEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32@)">
            <summary>
                Shifts the elements in <paramref name="list"/> to the left until they match the specified
                <paramref name="pattern"/>.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="pattern">A pattern of elements to match.</param>
            <param name="count">The number of left shifts that were performed.</param>
            <exception cref="T:System.InvalidOperationException">If the specified <paramref name="pattern"/> does not contain the exact same elements as the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftUntilStartsWith``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
                Shifts the elements in <paramref name="list"/> to the left until the specified <paramref name="element"/> is
                at index zero.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="element">The element to be placed at index zero.</param>
            <exception cref="T:System.InvalidOperationException">If the specified <paramref name="element"/> is not found in the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.ShiftUntilStartsWith``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
                Shifts the elements in <paramref name="list"/> to the left until the specified <paramref name="element"/> is
                at index zero.
            </summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="element">The element to be placed at index zero.</param>
            <param name="count">The number of left shifts that were performed.</param>
            <exception cref="T:System.InvalidOperationException">If the specified <paramref name="element"/> is not found in the <paramref name="list"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.IsPermutationOf``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>Determines whether the <paramref name="list"/> is a permutation of some <paramref name="other"/>.</summary>
            <typeparam name="T">The type of elements in the <paramref name="list"/>.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">Some other list.</param>
            <returns><see langword="true"/> if both <paramref name="list"/> and <paramref name="other"/> contain the exact same elements in any order, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Collections.ListExtensions.Choose``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>Chooses a random element from the <paramref name="list"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
            <returns>A random element from the <paramref name="list"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Memory.MemoryExtensions">
            <summary>Extensions for <see langword="ref struct"/> instances like <see cref="T:System.Memory`1"/> and <see cref="T:System.Span`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.MemoryExtensions.Split(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>Splits a <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/> into its constituent slices based on the specified <paramref name="splitter"/> <see cref="T:System.Char"/>.</summary>
            <param name="span">A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.</param>
            <param name="splitter">A <see cref="T:System.Char"/>s that will be used to split the <paramref name="span"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> object that can be used to iterate through the substrings within the <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Memory.SpanSplitter">
            <summary>Used for enumerating and accessing slices of <see cref="T:System.ReadOnlySpan`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.#ctor(System.ReadOnlySpan{System.Char},System.Char)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> struct.</summary>
            <param name="span">A <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.</param>
            <param name="splitter">A <see cref="T:System.Char"/>s that will be used to split the <paramref name="span"/>.</param>
        </member>
        <member name="P:DaLion.Shared.Extensions.Memory.SpanSplitter.Current">
            <summary>Gets the slice in the <see cref="T:System.ReadOnlySpan`1"/> at the current position of the enumerator.</summary>
        </member>
        <member name="P:DaLion.Shared.Extensions.Memory.SpanSplitter.Length">
            <summary>Gets the number of Slices in the <see cref="T:System.ReadOnlySpan`1"/>.</summary>
        </member>
        <member name="P:DaLion.Shared.Extensions.Memory.SpanSplitter.Item(System.Int32)">
            <summary>Gets the slice at the specified <paramref name="index"/>.</summary>
            <param name="index">A <see cref="T:System.Int32"/> index.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.</summary>
            <returns>A <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> object that can be used to iterate through the substrings within the <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Memory.SpanSplitter.MoveNext(System.Int32)">
            <summary>Advances the enumerator by <paramref name="count"/> elements.</summary>
            <param name="count">The number of advancements to perform.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.RandomExtensions">
            <summary>Extensions for the <see cref="T:System.Random"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextFloat(System.Random,System.Single,System.Single)">
            <summary>Returns a random <see cref="T:System.Single"/> value that is greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A <see cref="T:System.Single"/> that is greater than or equal to minValue and less than maxValue.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextDouble(System.Random,System.Double,System.Double)">
            <summary>Returns a random <see cref="T:System.Double"/> value that is greater than or equal to <paramref name="minValue"/> and less than <paramref name="maxValue"/>.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A <see cref="T:System.Double"/> that is greater than or equal to minValue and less than maxValue.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextBool(System.Random,System.Double)">
            <summary>Generates a random boolean value with the the specified probability of success.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="p">The p of success (i.e., <see langword="true"/>).</param>
            <returns><see langword="true"/> or <see langword="false"/> values with a Binomial distribution and success probability <paramref name="p"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.NextGaussian(System.Random,System.Double,System.Double)">
            <summary>Samples a random decimal value from a Gaussian distribution with specified <paramref name="mean"/> and <paramref name="stddev"/> using the Box-Muller Transform.</summary>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="mean">The mean of the Gaussian distribution.</param>
            <param name="stddev">The standard deviation of the Gaussian distribution.</param>
            <returns>A sample from the resulting Gaussian distribution.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.RandomExtensions.Choose``1(System.Random,``0[])">
            <summary>Selects a random <typeparamref name="T"/> object from the available <paramref name="choices"/>.</summary>
            <typeparam name="T">The type of the objects to choose from.</typeparam>
            <param name="r">The <see cref="T:System.Random"/> number generator.</param>
            <param name="choices">The available choices.</param>
            <returns>A <typeparamref name="T"/> value from the available <paramref name="choices"/>, selected at random.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.FieldInfo"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.GetFullName(System.Reflection.FieldInfo)">
            <summary>The full name of the <paramref name="field"/>, including the declaring type.</summary>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.String"/> representation of the <paramref name="field"/>'s qualified full name.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileUnboundFieldGetterDelegate``2(System.Reflection.FieldInfo)">
            <summary>
                Creates a <see cref="T:System.Func`2"/> delegate for the specified unbound instance
                <paramref name="field"/> getter, performing type conversions if necessary.
            </summary>
            <typeparam name="TInstance">The type of the instance that will be received by the delegate, which should match a type assignable to the declaring type of the <paramref name="field"/>.</typeparam>
            <typeparam name="TField">The type that will be returned by the delegate, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Func`2"/> delegate which takes in an instance of type <typeparamref name="TInstance"/> and returns the <typeparamref name="TField"/> value of the corresponding <paramref name="field"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
            <exception cref="T:System.InvalidOperationException">If <typeparamref name="TInstance"/> does not match the declaring type of the <paramref name="field"/>.</exception>
            <exception cref="T:System.InvalidOperationException">If <typeparamref name="TField"/> does not match the type of the <paramref name="field"/>.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileStaticFieldGetterDelegate``1(System.Reflection.FieldInfo)">
            <summary>Creates a <see cref="T:System.Func`1"/> delegate for the specified static <paramref name="field"/> getter, performing type conversions if necessary.</summary>
            <typeparam name="TField">The type that will be returned by the delegate, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Func`1"/> delegate which returns the <typeparamref name="TField"/> value of the static <paramref name="field"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileUnboundFieldSetterDelegate``2(System.Reflection.FieldInfo)">
            <summary>
                Creates an <see cref="T:System.Action`2"/> delegate for the specified unbound instance
                <paramref name="field"/> setter, performing type conversions if necessary.
            </summary>
            <typeparam name="TInstance">The type of the instance that will be received by the delegate, which should be a type assignable to the declaring type of the <paramref name="field"/>.</typeparam>
            <typeparam name="TField">The type that will be received by the <paramref name="field"/>, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Action`2"/> delegate which takes in an instance of type <typeparamref name="TInstance"/> and a value of type <typeparamref name="TField"/>, and assigns the latter to the corresponding <paramref name="field"/> in the former.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.FieldInfoExtensions.CompileStaticFieldSetterDelegate``1(System.Reflection.FieldInfo)">
            <summary>
                Creates an <see cref="T:System.Action`1"/> delegate for the specified static <paramref name="field"/>
                setter, performing type conversions if necessary.
            </summary>
            <typeparam name="TField">The type that will be received by the field, which should match a type assignable to the <paramref name="field"/>.</typeparam>
            <param name="field">The <see cref="T:System.Reflection.FieldInfo"/>.</param>
            <returns>A <see cref="T:System.Action`1"/> delegate which takes in value of type <typeparamref name="TField"/> and assigns it to the static <paramref name="field"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="field"/> is static.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.MethodBase"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetFullName(System.Reflection.MethodBase)">
            <summary>The full name of the method, including the declaring type.</summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <returns>A <see cref="T:System.String"/> representation of the <paramref name="method"/>'s qualified full name.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPatches(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> and that optionally
                satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPrefixes(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyPrefix"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyPrefix"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPostfixes(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyPostfix"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyPostfix"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedTranspilers(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyTranspiler"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyTranspiler"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedFinalizers(System.Reflection.MethodBase,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>
                Gets all the <see cref="T:HarmonyLib.Patch"/> instances applied to the <paramref name="method"/> that include a <see cref="T:HarmonyLib.HarmonyFinalizer"/>
                and that optionally satisfy a given <paramref name="predicate"/>.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="predicate">Filter conditions.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> which contain at least one <see cref="T:HarmonyLib.HarmonyFinalizer"/>, and that satisfy the given <paramref name="predicate"/>, if any.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodBaseExtensions.GetAppliedPatchesById(System.Reflection.MethodBase,System.String)">
            <summary>
                Gets the <see cref="T:HarmonyLib.Patch"/> instances applied to this method with the specified <paramref name="uniqueId"/>
                .
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodBase"/>.</param>
            <param name="uniqueId">A unique ID to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances currently applied to the <paramref name="method"/> by the mod with the specified <paramref name="uniqueId"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions">
            <summary>Extensions for the <see cref="T:System.Reflection.MethodInfo"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.ToHarmonyMethod(System.Reflection.MethodInfo)">
            <summary>Constructs a <see cref="T:HarmonyLib.HarmonyMethod"/> instance from a <see cref="T:System.Reflection.MethodInfo"/> object.</summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>
                A <see cref="T:HarmonyLib.HarmonyMethod"/> instance if <paramref name="method"/> is not null, or <see langword="null"/>
                otherwise.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.CompileUnboundDelegate``1(System.Reflection.MethodInfo)">
            <summary>Creates a delegate of the specified type for the given instance <paramref name="method"/>.</summary>
            <typeparam name="TDelegate">
                A delegate type which mirrors the desired <paramref name="method"/> signature and accepts the target
                instance type as the first parameter.
            </typeparam>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> which takes in an instance of an object and calls the corresponding <paramref name="method"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.MethodInfoExtensions.CompileStaticDelegate``1(System.Reflection.MethodInfo)">
            <summary>Creates a delegate of the specified type that for the given static <paramref name="method"/>.</summary>
            <typeparam name="TDelegate">A delegate type which mirrors the desired <paramref name="method"/> signature.</typeparam>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/>.</param>
            <returns>A delegate of type <typeparamref name="TDelegate"/> which calls the static <paramref name="method"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.StringExtensions">
            <summary>Extensions for the <see cref="T:System.String"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.StringExtensions.ToType(System.String)">
            <summary>Gets a type in the assembly by <paramref name="name"/> and asserts that it was found.</summary>
            <param name="name">The name of some type in any executing assembly.</param>
            <returns>The corresponding <see cref="T:System.Type"/>, if found.</returns>
            <exception cref="T:DaLion.Shared.Exceptions.MissingTypeException">If the requested type is not found.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.Reflection.TypeExtensions">
            <summary>Provides extensions for simplified reflection on C# types.</summary>
            <remarks>Original code by <see href="https://github.com/pardeike">Pardeike</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.IsAssignableToAnyOf(System.Type,System.Type[])">
            <summary>Determines whether the <paramref name="type"/> can be assigned to any of the <paramref name="candidates"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="candidates">The candidate types.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is assignable to at least one of the <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.IsAssignableFromAnyOf(System.Type,System.Type[])">
            <summary>Determines whether any of the <paramref name="candidates"/> can be assigned to the <paramref name="type"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="candidates">The candidate types.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is assignable from at least one of the <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetDerivedTypes(System.Type)">
            <summary>Enumerates all the types which derive from <paramref name="type"/>.</summary>
            <param name="type">The base <see cref="T:System.Type"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all types assignable to <paramref name="type"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetMethodInfoFromDelegateType(System.Type)">
            <summary>Gets the <see cref="T:System.Reflection.MethodInfo"/> for the <paramref name="delegateType"/>.</summary>
            <param name="delegateType">The delegate <see cref="T:System.Type"/>.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireConstructor(System.Type)">
            <summary>Gets a constructor and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>The corresponding <see cref="T:System.Reflection.ConstructorInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a constructor is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireConstructor(System.Type,System.Type[])">
            <summary>Gets a constructor with the specified <paramref name="parameters"/> and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="parameters">The method parameter types, or <c>null</c> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.ConstructorInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching constructor is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireConstructor(System.Type,System.Int32)">
            <summary>Gets a constructor and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="parameterCount">The the number of parameters in the overload signature.</param>
            <returns>The first constructor that matches the specified parameter count.</returns>
            <remarks>Useful when there's no compile-time access to one or more parameter types.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireMethod(System.Type,System.String)">
            <summary>Gets a method and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The method name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching method is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireMethod(System.Type,System.String,System.Type[])">
            <summary>Gets a method and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The method name.</param>
            <param name="parameters">The method parameter types, or <c>null</c> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching method is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequireField(System.Type,System.String)">
            <summary>Gets a field and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The field name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.FieldInfo"/>, if found.</returns>
            <exception cref="T:System.MissingFieldException">If a matching field is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequirePropertyGetter(System.Type,System.String)">
            <summary>Gets a property getter and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The property name.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> corresponding to the getter of the property, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching property is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.RequirePropertySetter(System.Type,System.String)">
            <summary>Gets a property setter and asserts that it was found.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="name">The property name.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> corresponding to the setter of the property, if found.</returns>
            <exception cref="T:System.MissingMethodException">If a matching property is not found.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetAllInnerTypes(System.Type)">
            <summary>Gets all inner types of <paramref name="parent"/>.</summary>
            <param name="parent">The parent <see cref="T:System.Type"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the inner <see cref="T:System.Type"/>s of <paramref name="parent"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Reflection.TypeExtensions.GetInnerMethodsContaining(System.Type,System.String)">
            <summary>Gets all inner methods whose names contain the given <paramref name="substring"/>.</summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="substring">A substring.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the inner <see cref="T:System.Reflection.MethodInfo"/>s of <paramref name="type"/> containing the <paramref name="substring"/>.</returns>
            <exception cref="T:System.MissingMethodException">If a matching method is not found.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.AssetNameExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IAssetName"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.AssetNameExtensions.IsEquivalentToAnyOf(StardewModdingAPI.IAssetName,System.String[])">
            <summary>Determines whether the given asset name is equivalent to any of the specified <paramref name="candidates"/>.</summary>
            <param name="name">The <see cref="T:StardewModdingAPI.IAssetName"/>.</param>
            <param name="candidates">An array of candidate <see cref="T:System.String"/>s.</param>
            <returns><see langword="true"/> if the asset name is equivalent to at least one of the <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.GameContentHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IModHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.GameContentHelperExtensions.InvalidateCacheAndLocalized(StardewModdingAPI.IGameContentHelper,System.String)">
            <summary>Invalidates the cache for the current asset in English or the current game language.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IGameContentHelper"/> API of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="assetName">The asset name without extension.</param>
            <returns><see langword="true"/> if the corresponding asset was invalidated and re-cached, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.KeybindListExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.Utilities.KeybindList"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.KeybindListExtensions.HasCommonKeybind(StardewModdingAPI.Utilities.KeybindList,StardewModdingAPI.Utilities.KeybindList)">
            <summary>Determines whether the <paramref name="keybindList"/>/> shares any <see cref="T:StardewModdingAPI.Utilities.Keybind"/>s with <paramref name="other"/>.</summary>
            <param name="keybindList">The <see cref="T:StardewModdingAPI.Utilities.KeybindList"/>.</param>
            <param name="other">Some other <see cref="T:StardewModdingAPI.Utilities.KeybindList"/> to compare with.</param>
            <returns><see langword="true"/> if <paramref name="keybindList"/> and <paramref name="other"/> share at least one <see cref="T:StardewModdingAPI.Utilities.Keybind"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.DataHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IDataHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.DataHelperExtensions.GetJsonSerializerSettings(StardewModdingAPI.IDataHelper)">
            <summary>Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> from the data <paramref name="helper"/> instance.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <returns>The <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions">
            <summary>Extensions for the <see cref="T:StardewModdingAPI.IModHelper"/> interface.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions.GetModEntryFor(StardewModdingAPI.IModHelper,System.String)">
            <summary>Gets the <see cref="T:StardewModdingAPI.IMod"/> interface for the external mod identified by <paramref name="uniqueId"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="uniqueId">The unique ID of the external mod.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the contents of the config.</returns>
            <remarks>Will only for mods that implement <see cref="T:StardewModdingAPI.IMod"/>; i.e., will not work for content packs.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions.ReadConfigExt(StardewModdingAPI.IModHelper,System.String)">
            <summary>Reads the configuration file of the mod with the specified <paramref name="uniqueId"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="uniqueId">The unique ID of the external mod.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the contents of the config.</returns>
            <remarks>Will only for mods that implement <see cref="T:StardewModdingAPI.IMod"/>; i.e., will not work for content packs.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.SMAPI.ModHelperExtensions.ReadContentPackConfig(StardewModdingAPI.IModHelper,System.String)">
            <summary>Reads the configuration file of the content pack with the specified <paramref name="uniqueId"/>.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IModHelper"/> of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="uniqueId">The unique ID of the content pack.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject"/> representing the contents of the config.</returns>
            <remarks>Will work for any mod, but is reserved for content packs.</remarks>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.BuildingExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Buildings.Building"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.IsFull(StardewValley.Buildings.Building)">
            <summary>Determines whether the <paramref name="building"/> can accommodate no further occupants.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns><see langword="true"/> if the <paramref name="building"/>'s current occupation is equal to the max, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetOwner(StardewValley.Buildings.Building)">
            <summary>Gets the <see cref="T:StardewValley.Farmer"/> instance who owns this <paramref name="building"/>.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who constructed the <paramref name="building"/>, or the host of the game session if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.IsOwnedBy(StardewValley.Buildings.Building,StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="building"/> is owned by the specified <see cref="T:StardewValley.Farmer"/>.</summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="building"/>'s owned value is equal to the unique ID of the <paramref name="farmer"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.DistanceTo(StardewValley.Buildings.Building,StardewValley.Buildings.Building)">
            <summary>
                Gets the tile distance between this <paramref name="building"/> and some <paramref name="other"/> in the
                same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="other">The target <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns>The tile distance between <paramref name="building"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.DistanceTo(StardewValley.Buildings.Building,StardewValley.Character)">
            <summary>
                Gets the tile distance between this <paramref name="building"/> and the target <paramref name="character"/>
                in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="character">The target <see cref="T:StardewValley.Character"/>.</param>
            <returns>The tile distance between <paramref name="building"/> and <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.DistanceTo(StardewValley.Buildings.Building,StardewValley.Object)">
            <summary>
                Gets the tile distance between this <paramref name="building"/> and the target <paramref name="obj"/> in
                the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="obj">The target <see cref="T:StardewValley.Object"/>.</param>
            <returns>The tile distance between <paramref name="building"/> and <paramref name="obj"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.DistanceTo(StardewValley.Buildings.Building,StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>
                Gets the tile distance between this <paramref name="building"/> and the target
                <paramref name="terrainFeature"/> in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="terrainFeature">The target <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <returns>The tile distance between <paramref name="building"/> and <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestBuilding``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Buildings.Building"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of the
                specified sub-type.
            </summary>
            <typeparam name="TBuilding">A sub-type of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Buildings.Building"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestCharacter``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Character"/> of sub-type <typeparamref name="TCharacter"/> to this
                <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TCharacter">A sub-type of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Character"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestFarmer(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Character"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
                This version is required as <see cref="T:StardewValley.Farmer"/> references are stored in a different field of <see cref="T:StardewValley.GameLocation"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestObject``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Object"/> of sub-type <typeparamref name="TObject"/> to this
                <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TObject">A sub-type of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Object"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.GetClosestTerrainFeature``1(StardewValley.Buildings.Building,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of sub-type <typeparamref name="TTerrainFeature"/> to this
                <paramref name="building"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TTerrainFeature">A sub-type of <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</typeparam>
            <param name="building">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="building"/>.</returns>
            <remarks>
                As the <see cref="T:StardewValley.Buildings.Building"/> class does not hold a reference to its <see cref="T:StardewValley.GameLocation"/>, it is
                assumed to be the <see cref="T:StardewValley.Farm"/>.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.Read(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Buildings.Building,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.Read``1(StardewValley.Buildings.Building,System.String,``0,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Buildings.Building,System.String,``0,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.Write(StardewValley.Buildings.Building,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Buildings.Building,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.WriteIfNotExists(StardewValley.Buildings.Building,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Buildings.Building,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.Append(StardewValley.Buildings.Building,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Buildings.Building,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.Increment``1(StardewValley.Buildings.Building,System.String,``0)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Buildings.Building,System.String,``0)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.BuildingExtensions.Increment(StardewValley.Buildings.Building,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Buildings.Building,System.String)"/>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.CharacterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Character"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.DistanceTo(StardewValley.Character,StardewValley.Buildings.Building)">
            <summary>
                Gets the tile distance between this <paramref name="character"/> and the target <paramref name="building"/>
                in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="building">The target <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns>The tile distance between <paramref name="character"/> and <paramref name="building"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.DistanceTo(StardewValley.Character,StardewValley.Character)">
            <summary>
                Gets the tile distance between this <paramref name="character"/> and some <paramref name="other"/> in the
                same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="other">The target <see cref="T:StardewValley.Character"/>.</param>
            <returns>The tile distance between <paramref name="character"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.DistanceTo(StardewValley.Character,StardewValley.Object)">
            <summary>
                Gets the tile distance between this <paramref name="character"/> and the target <paramref name="obj"/>
                in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="obj">The target <see cref="T:StardewValley.Object"/>.</param>
            <returns>The tile distance between <paramref name="character"/> and <paramref name="obj"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.DistanceTo(StardewValley.Character,StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>
                Gets the tile distance between this <paramref name="character"/> and the target
                <paramref name="terrainFeature"/> in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="terrainFeature">The target <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <returns>The tile distance between <paramref name="character"/> and <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestBuilding``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Buildings.Building"/> of sub-type <typeparamref name="TBuilding"/> to this
                <paramref name="character"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TBuilding">A sub-type of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Buildings.Building"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestCharacter``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Character"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of the
                specified sub-type.
            </summary>
            <typeparam name="TCharacter">A sub-type of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Character"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestFarmer(StardewValley.Character,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="character"/> in the current
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Farmer"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="character"/>.</returns>
            <remarks>This version is required as <see cref="T:StardewValley.Farmer"/> references are stored in a different field of <see cref="T:StardewValley.GameLocation"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestObject``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Object"/> of sub-type <typeparamref name="TObject"/> to this
                <paramref name="character"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TObject">A sub-type of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Object"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.GetClosestTerrainFeature``1(StardewValley.Character,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of sub-type <typeparamref name="TTerrainFeature"/> to this
                <paramref name="character"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TTerrainFeature">A sub-type of <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</typeparam>
            <param name="character">The <see cref="T:StardewValley.Character"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>s if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.Read(StardewValley.Character,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Character,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.Read``1(StardewValley.Character,System.String,``0,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Character,System.String,``0,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.Write(StardewValley.Character,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Character,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.WriteIfNotExists(StardewValley.Character,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Character,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.Append(StardewValley.Character,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Character,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.Increment``1(StardewValley.Character,System.String,``0)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Character,System.String,``0)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.CharacterExtensions.Increment(StardewValley.Character,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Character,System.String)"/>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.Game1Extensions">
            <summary>Extensions for the <see cref="T:StardewValley.Game1"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.IsCommunityCenterComplete(StardewValley.Game1)">
            <summary>Determines whether the Community Center has been completed in the current save.</summary>
            <param name="game1">The <see cref="T:StardewValley.Game1"/> instance.</param>
            <returns><see langword="true"/> if the Community Center is complete, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.ShouldTimePass(StardewValley.Game1)">
            <summary>Determines whether the game is active and time should pass.</summary>
            <param name="game1">The <see cref="T:StardewValley.Game1"/> instance.</param>
            <returns><see langword="true"/> if the game is active and time should pass, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Game1Extensions.IterateAllChests(StardewValley.Game1)">
            <summary>Enumerates all chests in the game instance.</summary>
            <param name="game1">The <see cref="T:StardewValley.Game1"/> instance.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all <see cref="T:StardewValley.Objects.Chest"/> instances in the <paramref name="game1"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.GameLocationExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.HasMonsters(StardewValley.GameLocation)">
            <summary>Determines whether this <paramref name="location"/> has spawned enemies.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <returns><see langword="true"/> if the <paramref name="location"/> is has at least one living monster and is not a <see cref="T:StardewValley.SlimeHutch"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.IsActionableTile(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2,StardewValley.Farmer)">
            <summary>Determines whether there is anything to interact with in the specified <paramref name="tile"></paramref>.</summary>
            <param name="location">The <see cref="T:StardewValley.GameLocation"/>.</param>
            <param name="tile">The tile's position as <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="who">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="tile"/> has action properties or contains any actionable object or actor, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.Read(StardewValley.GameLocation,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.GameLocation,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.Read``1(StardewValley.GameLocation,System.String,``0,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.GameLocation,System.String,``0,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.Write(StardewValley.GameLocation,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.GameLocation,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.WriteIfNotExists(StardewValley.GameLocation,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.GameLocation,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.Append(StardewValley.GameLocation,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.GameLocation,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.Increment``1(StardewValley.GameLocation,System.String,``0)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.GameLocation,System.String,``0)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.GameLocationExtensions.Increment(StardewValley.GameLocation,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.GameLocation,System.String,``0)"/>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.Int32Extensions">
            <summary>Extensions for the <see cref="T:System.Int32"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Int32Extensions.IsLegendaryFishIndex(System.Int32)">
            <summary>Determines whether the <paramref name="index"/> corresponds to a legendary fish.</summary>
            <param name="index">A <see cref="T:StardewValley.Item"/> index.</param>
            <returns><see langword="true"/> if the <paramref name="index"/> corresponds to a legendary fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Int32Extensions.IsAlgaeIndex(System.Int32)">
            <summary>Determines whether the <paramref name="index"/> corresponds to an algae or seaweed.</summary>
            <param name="index">A <see cref="T:StardewValley.Item"/> index.</param>
            <returns><see langword="true"/> if the <paramref name="index"/> corresponds to an algae or seaweed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Int32Extensions.IsTrashIndex(System.Int32)">
            <summary>Determines whether the object <paramref name="index"/> corresponds to a trash item.</summary>
            <param name="index">A <see cref="T:StardewValley.Item"/> index.</param>
            <returns><see langword="true"/> if the <paramref name="index"/> corresponds any trash item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Int32Extensions.IsOre(System.Int32)">
            <summary>Determines whether the object <paramref name="index"/> corresponds to any metallic ore.</summary>
            <param name="index">A <see cref="T:StardewValley.Item"/> index.</param>
            <returns><see langword="true"/> if the <paramref name="index"/> corresponds to either copper, iron, gold, iridium or radioactive ore, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.ItemExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.Read(StardewValley.Item,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Item,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.Read``1(StardewValley.Item,System.String,``0,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Item,System.String,``0,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.Write(StardewValley.Item,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Item,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.WriteIfNotExists(StardewValley.Item,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Item,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.Append(StardewValley.Item,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Item,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.Increment``1(StardewValley.Item,System.String,``0)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Item,System.String,``0)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ItemExtensions.Increment(StardewValley.Item,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Item,System.String)"/>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.FarmAnimalExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.FarmAnimal"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmAnimalExtensions.GetOwner(StardewValley.FarmAnimal)">
            <summary>Gets the <see cref="T:StardewValley.Farmer"/> instance who owns this <paramref name="animal"/>.</summary>
            <param name="animal">The <see cref="T:StardewValley.FarmAnimal"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who purchased or owned the parent of the <paramref name="animal"/>, or the host of the game session if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmAnimalExtensions.IsOwnedBy(StardewValley.FarmAnimal,StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="animal"/> is owned by the specified <see cref="T:StardewValley.Farmer"/>.</summary>
            <param name="animal">The <see cref="T:StardewValley.FarmAnimal"/>.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="animal"/>'s owner ID  value is equal to the unique ID of the <paramref name="farmer"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.FarmerExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Farmer"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.FaceTowardsTile(StardewValley.Farmer,Microsoft.Xna.Framework.Vector2)">
            <summary>
                Changes the <paramref name="farmer"/>'s <see cref="T:DaLion.Shared.Enums.FacingDirection"/> in order to face the desired
                <paramref name="tile"/>.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <param name="tile">The tile to face.</param>
            <returns>The new <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.Read(StardewValley.Farmer,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.Farmer,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.Read``1(StardewValley.Farmer,System.String,``0,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.Farmer,System.String,``0,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.Write(StardewValley.Farmer,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.Farmer,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.WriteIfNotExists(StardewValley.Farmer,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.Farmer,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.Append(StardewValley.Farmer,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.Farmer,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.Increment``1(StardewValley.Farmer,System.String,``0)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Farmer,System.String,``0)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.FarmerExtensions.Increment(StardewValley.Farmer,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.Farmer,System.String,``0)"/>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.MeleeWeaponExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Tools.MeleeWeapon"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MeleeWeaponExtensions.IsDagger(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/> is a dagger.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a dagger, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MeleeWeaponExtensions.IsClub(StardewValley.Tools.MeleeWeapon)">
            <summary>Checks whether the <paramref name="weapon"/> is a club.</summary>
            <param name="weapon">The <see cref="T:StardewValley.Tools.MeleeWeapon"/>.</param>
            <returns><see langword="true"/> if the <paramref name="weapon"/> is a club, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.MonsterExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Monsters.Monster"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsSlime(StardewValley.Monsters.Monster)">
            <summary>
                Determines whether the <paramref name="monster"/> is an instance of <see cref="T:StardewValley.Monsters.GreenSlime"/> or
                <see cref="T:StardewValley.Monsters.BigSlime"/>.
            </summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is a <see cref="T:StardewValley.Monsters.GreenSlime"/> or <see cref="T:StardewValley.Monsters.BigSlime"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsUndead(StardewValley.Monsters.Monster)">
            <summary>Determines whether the <paramref name="monster"/> is an undead being or void spirit.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/> is an undead being or void spirit, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.IsWithinPlayerThreshold(StardewValley.Monsters.Monster,StardewValley.Farmer)">
            <summary>Determines whether the <paramref name="monster"/> is close enough to see the given player.</summary>
            <param name="monster">The <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="player">The target player.</param>
            <returns><see langword="true"/> if the <paramref name="monster"/>'s distance to the <paramref name="player"/> is less than it's aggro threshold, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.MonsterExtensions.Die(StardewValley.Monsters.Monster,StardewValley.Farmer)">
            <summary>Causes the <paramref name="monster"/> to die, triggering item drops and quest completion checks as appropriate.</summary>
            <param name="monster">The poor <see cref="T:StardewValley.Monsters.Monster"/>.</param>
            <param name="killer">The murderous <see cref="T:StardewValley.Farmer"/>.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.DistanceTo(StardewValley.TerrainFeatures.TerrainFeature,StardewValley.Buildings.Building)">
            <summary>
                Gets the tile distance between this <paramref name="terrainFeature"/> and the target
                <paramref name="building"/> in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="building">The target <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns>The tile distance between <paramref name="terrainFeature"/> and <paramref name="building"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.DistanceTo(StardewValley.TerrainFeatures.TerrainFeature,StardewValley.Character)">
            <summary>
                Gets the tile distance between this <paramref name="terrainFeature"/> and the target
                <paramref name="character"/> in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="character">The target <see cref="T:StardewValley.Character"/>.</param>
            <returns>The tile distance between <paramref name="terrainFeature"/> and <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.DistanceTo(StardewValley.TerrainFeatures.TerrainFeature,StardewValley.Object)">
            <summary>
                Get the tile distance between this <paramref name="terrainFeature"/> and the target
                <paramref name="obj"/> in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="obj">The target <see cref="T:StardewValley.Object"/>.</param>
            <returns>The tile distance between <paramref name="terrainFeature"/> and <paramref name="obj"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.DistanceTo(StardewValley.TerrainFeatures.TerrainFeature,StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>
                Gets the tile distance between this <paramref name="terrainFeature"/> and some this <paramref name="other"/>
                in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="other">The target <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <returns>The tile distance between <paramref name="terrainFeature"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestBuilding``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Buildings.Building"/> of sub-type <typeparamref name="TBuilding"/> to this
                <paramref name="terrainFeature"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TBuilding">A sub-type of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Buildings.Building"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestCharacter``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.NPC"/> of sub-type <typeparamref name="TCharacter"/> to this
                <paramref name="terrainFeature"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TCharacter">A sub-type of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.NPC"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestFarmer(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="terrainFeature"/> in the current
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Farmer"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestObject``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.Object"/> of sub-type <typeparamref name="TObject"/> to this
                <paramref name="terrainFeature"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TObject">A sub-type of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Object"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.GetClosestTerrainFeature``1(StardewValley.TerrainFeatures.TerrainFeature,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Finds the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of
                the specified sub-type.
            </summary>
            <typeparam name="TTerrainFeature">A sub-type of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="terrainFeature">The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.Read(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.Read``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Read``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.Write(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Write(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.WriteIfNotExists(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.WriteIfNotExists(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.Append(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Append(StardewValley.TerrainFeatures.TerrainFeature,System.String,System.String,System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.Increment``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.TerrainFeatures.TerrainFeature,System.String,``0)"/>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.TerrainFeatureExtensions.Increment(StardewValley.TerrainFeatures.TerrainFeature,System.String)">
            <inheritdoc cref="M:DaLion.Shared.ModData.ModDataIO.Increment``1(StardewValley.TerrainFeatures.TerrainFeature,System.String)"/>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.SObjectExtensions">
            <summary>Extensions for the <see cref="T:StardewValley.Object"/> class.</summary>
        </member>
        <member name="F:DaLion.Shared.Extensions.Stardew.SObjectExtensions.AnimalDerivedProductIds">
            <summary>Gets the ids of animal products and derived artisan goods.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsAnimalOrDerivedProduct(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is an animal produce or derived artisan good.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is produced directly or indirectly by an animal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsArtisanGood(StardewValley.Object)">
            <summary>Determines whether the <paramref name="obj"/> is an artisan good.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is created by an artisan machine, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsBeeHouse(StardewValley.Object)">
            <summary>Determines whether the <paramref name="object"/> is a bee house.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a Bee House, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsMushroomBox(StardewValley.Object)">
            <summary>Determines whether the <paramref name="object"/> is a mushroom box.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a Mushroom Box, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsSpringOnion(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is Spring Onion.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is Spring Onion, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsWildBerry(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is Salmonberry or Blackberry.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is Salmonberry or Blackberry, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsArtifactSpot(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is an Artifact Spot.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is an Artifact Spot, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsFish(StardewValley.Object)">
            <summary>
                Determines whether <paramref name="object"/> is a fish typically caught with a
                <see cref="T:StardewValley.Tools.FishingRod"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is any fish, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsLegendaryFish(StardewValley.Object)">
            <summary>Determines whether the <paramref name="obj"/> is a legendary fish.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> has the legendary fish context tag, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsTrapFish(StardewValley.Object)">
            <summary>
                Determines whether <paramref name="object"/> is a fish typically caught with a
                <see cref="T:StardewValley.Objects.CrabPot"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a fish ordinarily caught by a <see cref="T:StardewValley.Objects.CrabPot"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsAlgae(StardewValley.Object)">
            <summary>Determines whether the <paramref name="obj"/> is algae or seaweed.</summary>
            <param name="obj">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="obj"/> is any of the three algae, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsTrash(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is trash.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is any trash item, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsGemOrMineral(StardewValley.Object)">
            <summary>Determines whether the <paramref name="object"/> is a gem or mineral.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a gem or mineral, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsForagedMineral(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is a foraged mineral.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a Quartz, Fire Quartz, Frozen Tear or Earth Crystal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsStone(StardewValley.Object)">
            <summary>Determines whether <paramref name="object"/> is a simple Stone.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is a mining node not containing only stone, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsTwig(StardewValley.Object)">
            <summary>Determines whether the <paramref name="object"/> is a twig.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is twig, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsWeed(StardewValley.Object)">
            <summary>Determines whether the <paramref name="object"/> is a weed.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/> is weed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetOwner(StardewValley.Object)">
            <summary>Get the <see cref="T:StardewValley.Farmer"/> instance who owns this <paramref name="object"/>.</summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> instance who purchased, found or crafted the <paramref name="object"/>, or the host of the game session if not found.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.IsOwnedBy(StardewValley.Object,StardewValley.Farmer)">
            <summary>Checks whether the <paramref name="object"/> is owned by the specified <see cref="T:StardewValley.Farmer"/>.</summary>
            <param name="object">The <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/>.</param>
            <returns><see langword="true"/> if the <paramref name="object"/>'s owner value is equal to the unique ID of the <paramref name="farmer"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.DistanceTo(StardewValley.Object,StardewValley.Buildings.Building)">
            <summary>
                Gets the tile distance between this <paramref name="object"/> and the target <paramref name="building"/> in
                the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="building">The target <see cref="T:StardewValley.Buildings.Building"/>.</param>
            <returns>The tile distance between <paramref name="object"/> and <paramref name="building"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.DistanceTo(StardewValley.Object,StardewValley.Character)">
            <summary>
                Gets the tile distance between this <paramref name="object"/> and the target <paramref name="character"/>
                in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="character">The target <see cref="T:StardewValley.Character"/>.</param>
            <returns>The tile distance between <paramref name="object"/> and <paramref name="character"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.DistanceTo(StardewValley.Object,StardewValley.Object)">
            <summary>
                Gets the tile distance between this <paramref name="object"/> and some <paramref name="other"/> in the same
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="other">The target <see cref="T:StardewValley.Object"/>.</param>
            <returns>The tile distance between <paramref name="object"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.DistanceTo(StardewValley.Object,StardewValley.TerrainFeatures.TerrainFeature)">
            <summary>
                Gets the tile distance between this <paramref name="object"/> and the target
                <paramref name="terrainFeature"/> in the same <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="terrainFeature">The target <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</param>
            <returns>The tile distance between <paramref name="object"/> and <paramref name="terrainFeature"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestBuilding``1(StardewValley.Object,StardewValley.GameLocation,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Buildings.Building"/> of sub-type <typeparamref name="TBuilding"/> to this
                <paramref name="object"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TBuilding">A sub-type of <see cref="T:StardewValley.Buildings.Building"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="location">The object's current location.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Buildings.Building"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Buildings.Building"/> of type <typeparamref name="TBuilding"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestCharacter``1(StardewValley.Object,StardewValley.GameLocation,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Character"/> of sub-type <typeparamref name="TCharacter"/> to this <paramref name="object"/>
                in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TCharacter">A sub-type of <see cref="T:StardewValley.Character"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="location">The object's current location.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Character"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Character"/> of type <typeparamref name="TCharacter"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestFarmer(StardewValley.Object,StardewValley.GameLocation,System.Collections.Generic.IEnumerable{StardewValley.Farmer},System.Func{StardewValley.Farmer,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Farmer"/> to this <paramref name="object"/> in the current
                <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="location">The object's current location.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Farmer"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/> with the minimal distance to <paramref name="object"/>.</returns>
            <remarks>This version is required as <see cref="T:StardewValley.Farmer"/> references are stored in a different field of <see cref="T:StardewValley.GameLocation"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestObject``1(StardewValley.Object,StardewValley.GameLocation,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.Object"/> to this one in the current <see cref="T:StardewValley.GameLocation"/>, and of the
                specified sub-type.
            </summary>
            <typeparam name="TObject">A sub-type of <see cref="T:StardewValley.Object"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="location">The object's current location.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.Object"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.Object"/> of type <typeparamref name="TObject"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.SObjectExtensions.GetClosestTerrainFeature``1(StardewValley.Object,StardewValley.GameLocation,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
                Find the closest <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of sub-type <typeparamref name="TTerrainFeature"/> to this
                <paramref name="object"/> in the current <see cref="T:StardewValley.GameLocation"/>.
            </summary>
            <typeparam name="TTerrainFeature">A sub-type of <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>.</typeparam>
            <param name="object">The <see cref="T:StardewValley.Object"/>.</param>
            <param name="location">The object's current location.</param>
            <param name="candidates">The candidate <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/>s, if already available.</param>
            <param name="predicate">An optional condition with which to filter out candidates.</param>
            <returns>The <see cref="T:StardewValley.TerrainFeatures.TerrainFeature"/> of type <typeparamref name="TTerrainFeature"/> with the minimal distance to <paramref name="object"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.RectangleExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.RectangleExtensions.GetInnerTiles(Microsoft.Xna.Framework.Rectangle)">
            <summary>Enumerates all the tile within the <paramref name="rectangle"/>.</summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/>, where <see cref="F:Microsoft.Xna.Framework.Vector2.X"/> and <see cref="F:Microsoft.Xna.Framework.Vector2.Y"/> represent the coordinates of tiles contained by the <paramref name="rectangle"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.ToolExtensions">
            <summary>Extensions for <see cref="T:StardewValley.Tool"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ToolExtensions.IsScythe(StardewValley.Tool)">
            <summary>Determines whether the specified <paramref name="tool"/> is a scythe.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <returns><see langword="true"/> if the <paramref name="tool"/> is a scythe, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.ToolExtensions.HasAnyEnchantmentOf(StardewValley.Tool,System.Type[])">
            <summary>Determines whether the specified <paramref name="tool"/> contains any enchantment of the specified <paramref name="enchantmentTypes"/>.</summary>
            <param name="tool">The <see cref="T:StardewValley.Tool"/>.</param>
            <param name="enchantmentTypes">The types of the enchantments to search for.</param>
            <returns><see langword="true"/> if the <paramref name="tool"/> contains at least one enchantment of the specified <paramref name="enchantmentTypes"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Stardew.Vector2Extensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Vector2"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetPixelPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the <paramref name="tile"/>'s pixel position relative to the top-left corner of the map.</summary>
            <param name="tile">The tile.</param>
            <returns>A <see cref="T:Microsoft.Xna.Framework.Vector2"/> which represents the <c>X</c> and <c>Y</c> coordinates of the <paramref name="tile"/>'s pixel position.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetAbsoluteTileArea(Microsoft.Xna.Framework.Vector2)">
            <summary>
                Gets a <see cref="T:Microsoft.Xna.Framework.Rectangle"/> representing the area in absolute pixels from the map's origin to the
                <paramref name="tile"/>.
            </summary>
            <param name="tile">The tile.</param>
            <returns>A square <see cref="T:Microsoft.Xna.Framework.Rectangle"/> of side-length <see cref="F:StardewValley.Game1.tileSize"/> which represents the area of one game tile and originating at the <paramref name="tile"/>'s pixel position.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.GetNextTile(Microsoft.Xna.Framework.Vector2,DaLion.Shared.Enums.FacingDirection)">
            <summary>Gets the next tile in the specified <paramref name="direction"/>.</summary>
            <param name="tile">The tile.</param>
            <param name="direction">A <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</param>
            <returns>The next tile in the <paramref name="direction"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Stardew.Vector2Extensions.ToFacingDirection(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the general <see cref="T:DaLion.Shared.Enums.FacingDirection"/> pointed by the <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The corresponding <see cref="T:DaLion.Shared.Enums.FacingDirection"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.ColorExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Color"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.Add(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Produces a new <see cref="T:Microsoft.Xna.Framework.Color"/> by adding the RGBA values of an<paramref name="other"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="other">A <see cref="T:Microsoft.Xna.Framework.Color"/> to add.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> structure whose color values are the results of the addition operation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.Subtract(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>Produces a new <see cref="T:Microsoft.Xna.Framework.Color"/> by subtracting the RGBA values of an<paramref name="color"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="other">A <see cref="T:Microsoft.Xna.Framework.Color"/> to subtract.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> structure whose color values are the results of the subtraction operation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ToPackedValue(Microsoft.Xna.Framework.Color)">
            <summary>Obtains a packed ARGB representation of the <paramref name="color"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>A 32-bit <see cref="T:System.UInt32"/> value representing the packed ARGB bytes of <paramref name="color"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.Inverse(Microsoft.Xna.Framework.Color)">
            <summary>Gets the complementary <see cref="T:Microsoft.Xna.Framework.Color"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> created by inverting the RGB values of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ShiftHue(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>Performs a hue rotation by <paramref name="degrees"/> degrees.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="degrees">The number of degrees to rotate by.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> with the adjusted Hue.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ChangeSaturation(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>Multiplies the <paramref name="color"/>'s saturation by the specified <paramref name="factor"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="factor">The factor to multiply by. Should be a positive decimal.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> with the adjusted Saturation.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ChangeValue(Microsoft.Xna.Framework.Color,System.Single)">
            <summary>Multiplies the <paramref name="color"/>'s value by the specified <paramref name="factor"/>.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="factor">A factor to multiply by. Should be a positive decimal.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Color"/> with the adjusted Value.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ToHsv(Microsoft.Xna.Framework.Color)">
            <summary>Converts RGB color values to HSV representation.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>A <see cref="T:System.Tuple"/> of three <see cref="T:System.Single"/> values which represent the <paramref name="color"/>'s HSV components.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.FromHsv(Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single)">
            <summary>Initializes the <paramref name="color"/> using the specified HSV values.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="hue">The color's hue.</param>
            <param name="saturation">The color's saturation.</param>
            <param name="value">The color's value.</param>
            <returns>The same <paramref name="color"/> instance, initialized from the specified HSV values.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.ToHtml(Microsoft.Xna.Framework.Color)">
            <summary>Converts RGB color values to an HTML string.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns>An HTML string which represents the <paramref name="color"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.ColorExtensions.FromHtml(Microsoft.Xna.Framework.Color,System.String)">
            <summary>Initializes the <paramref name="color"/> using the specified HTML string.</summary>
            <param name="color">The <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="html">An HTML color string.</param>
            <returns>The same <paramref name="color"/> instance, initialized from the specified HTML string.</returns>
            <exception cref="T:System.InvalidOperationException">If the input html string is invalid.</exception>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.PointExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Point"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.DrawBorder(Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws a border of specified height and width starting at the <paramref name="point"/>.</summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="height">The height of the border.</param>
            <param name="width">The width of the border.</param>
            <param name="pixel">The border pixel texture.</param>
            <param name="thickness">The border thickness.</param>
            <param name="color">The border <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="batch">A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.DrawBorder(Microsoft.Xna.Framework.Point,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws a border of specified height and width starting at the <paramref name="point"/>.</summary>
            <param name="point">The <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="height">The height of the border.</param>
            <param name="width">The width of the border.</param>
            <param name="pixel">The border pixel texture.</param>
            <param name="thickness">The border thickness.</param>
            <param name="color">The border <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <param name="batch">A <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="offset">An offset that should be applied to the point's position.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.GetFourNeighbors(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>Gets the 4-connected neighboring tiles in a given region.</summary>
            <param name="tile">The tile as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the four-connected neighbors of the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.GetEightNeighbors(Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>Gets the 8-connected neighboring tiles in a given region.</summary>
            <param name="vector">The tile as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the eight-connected neighbors of the <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.PointExtensions.FloodFill(Microsoft.Xna.Framework.Point,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Point,System.Boolean})">
            <summary>Searches for region boundaries using a Flood Fill algorithm.</summary>
            <param name="origin">The starting point for the fill, as a <see cref="T:Microsoft.Xna.Framework.Point"/>.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <param name="boundary">The boundary condition.</param>
            <returns>The list of <see cref="T:Microsoft.Xna.Framework.Point"/>s belonging to the enclosed region.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.RectangleExtensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.RectangleExtensions.DrawBorder(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>Draws the <paramref name="rectangle"/>'s border.</summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="pixel">The border pixel texture.</param>
            <param name="thickness">Border thickness.</param>
            <param name="color">Border color.</param>
            <param name="batch"><see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.RectangleExtensions.DrawBorder(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>Draws the <paramref name="rectangle"/>'s border.</summary>
            <param name="rectangle">The <see cref="T:Microsoft.Xna.Framework.Rectangle"/>.</param>
            <param name="pixel">The border pixel texture.</param>
            <param name="thickness">Border thickness.</param>
            <param name="color">Border color.</param>
            <param name="batch"><see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/> to draw to.</param>
            <param name="offset">An optional offset to the <paramref name="pixel"/>'s position.</param>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.StringExtensions">
            <summary>Extensions for the <see cref="T:System.String"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.StringExtensions.TryGetColorFromHtml(System.String,Microsoft.Xna.Framework.Color@)">
            <summary>Attempts to parse an HTML color string to a <see cref="T:Microsoft.Xna.Framework.Color"/>.</summary>
            <param name="html">An HTML color string.</param>
            <param name="color">The parsed <see cref="T:Microsoft.Xna.Framework.Color"/>.</param>
            <returns><see langword="true"/> if the HTML string was valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Xna.Vector2Extensions">
            <summary>Extensions for the <see cref="T:Microsoft.Xna.Framework.Vector2"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.AngleWithHorizontal(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the angle between this <paramref name="vector"/> and the horizontal, in degrees.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The angle between the <paramref name="vector"/> and a horizontal line, in degrees.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.AngleBetween(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the angle between this <paramref name="vector"/> and <paramref name="other"/>, in degrees.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="other">Some other <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>The angle between <paramref name="vector"/> and <paramref name="other"/>, in degrees.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.Perpendicular(Microsoft.Xna.Framework.Vector2)">
            <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> that is perpendicular to this one.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector2"/> obtained by a 90-degree anti-clockwise rotation of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.Rotate(Microsoft.Xna.Framework.Vector2,System.Double)">
            <summary>Creates a new <see cref="T:Microsoft.Xna.Framework.Vector2"/> by rotating this <paramref name="vector"/> by the specified <paramref name="angle"/>, in degrees.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="angle">An angle, in degrees, to rotate by.</param>
            <returns>A new <see cref="T:Microsoft.Xna.Framework.Vector2"/> obtained by the specified rotation of the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetFourNeighbors(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>Gets the 4-connected neighboring tiles in a given region.</summary>
            <param name="tile">The tile as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the four-connected neighbors of the <paramref name="tile"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetEightNeighbors(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>Gets the 8-connected neighboring tiles in a given region.</summary>
            <param name="vector">The tile as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the entire region.</param>
            <param name="height">The height of the entire region.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the eight-connected neighbors of the <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.GetUnitComponents(Microsoft.Xna.Framework.Vector2)">
            <summary>Gets the horizontal and vertical unit vector projections of this <paramref name="vector"></paramref>.</summary>
            <param name="vector">The <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <returns>Two unit vectors which point in the same direction as the components of <paramref name="vector"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.Xna.Vector2Extensions.FloodFill(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Vector2,System.Boolean})">
            <summary>Searches for region boundaries using a Flood Fill algorithm.</summary>
            <param name="origin">The starting point for the fill, as a <see cref="T:Microsoft.Xna.Framework.Vector2"/>.</param>
            <param name="width">The width of the region.</param>
            <param name="height">The height of the region.</param>
            <param name="boundary">The boundary condition.</param>
            <returns>The list of <see cref="T:Microsoft.Xna.Framework.Vector2"/>s belonging to the enclosed region.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.ArrayExtensions">
            <summary>Extensions for generic arrays of objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>Gets a sub-array of <paramref name="length"/> starting at <paramref name="offset"/>.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="offset">The starting index.</param>
            <param name="length">The length of the sub-array.</param>
            <returns>A new array formed by taking <paramref name="length"/> elements of the original after skipping <paramref name="offset"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftRight``1(``0[])">
            <summary>Shifts all elements of the <paramref name="array"/> one unit to the right.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <remarks>The last element of the original array becomes the first element of the shifted array.</remarks>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftRight``1(``0[],System.Int32)">
            <summary>Shifts all elements of the <paramref name="array"/> <paramref name="count"/> units to the right.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftLeft``1(``0[])">
            <summary>Shifts all elements of the <paramref name="array"/> one unit to the left.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.ShiftLeft``1(``0[],System.Int32)">
            <summary>Shifts all elements of the <paramref name="array"/> <paramref name="count"/> units to the left.</summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <param name="array">The array.</param>
            <param name="count">The number of shifts to perform.</param>
        </member>
        <member name="M:DaLion.Shared.Extensions.ArrayExtensions.Choose``1(``0[],System.Random)">
            <summary>Chooses a random element from the <paramref name="array"/>.</summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="array">The array.</param>
            <param name="r">A <see cref="T:System.Random"/> number generator.</param>
            <returns>A random element from the <paramref name="array"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.GenericExtensions">
            <summary>Extensions for generic objects.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.Compare``1(``0,``0)">
            <summary>Determines whether the <paramref name="value"/> is equal to an<paramref name="other"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="other">Some other value with which to compare.</param>
            <returns><see langword="true"/> if <paramref name="value"/> and <paramref name="other"/> are equal with respect to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.IsIn``1(``0,``0[])">
            <summary>Determines whether the <paramref name="value"/> is equal to any of the <paramref name="candidates"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="candidates">Some candidates to check.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is equal to at least one of the <paramref name="candidates"/> with respect to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.IsIn``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>Determines whether <paramref name="value"/> is equal to any of the enumerated <paramref name="candidates"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="candidates">The candidates to check.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is equal to at least one of the <paramref name="candidates"/> with respect to the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.Collect``1(``0,``0[])">
            <summary>Enumerates the <paramref name="value"/> and <paramref name="others"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="others">Some other objects to collect.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> combining <paramref name="value"/> and <paramref name="others"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.GenericExtensions.Collect``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>Enumerates the <paramref name="value"/> along with the enumerated <paramref name="others"/>.</summary>
            <typeparam name="T">The type of the <paramref name="value"/>.</typeparam>
            <param name="value">The value.</param>
            <param name="others">Some other enumeration to collect.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> combining <paramref name="value"/> and <paramref name="others"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.Int32Extensions">
            <summary>Extensions for the primitive <see cref="T:System.Int32"/> type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.Int32Extensions.IsIn(System.Int32,System.Range)">
            <summary>Determines whether the <paramref name="value"/> is contained by the specified <paramref name="range"/>.</summary>
            <param name="value">The value to check.</param>
            <param name="range">A range of integers.</param>
            <returns><see langword="true"/> if <paramref name="value"/> is greater than or equal to the <paramref name="range"/> start value and less than or equal to the end value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.RangeExtensions">
            <summary>Extensions for the <see cref="T:System.Range"/> struct.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.RangeExtensions.GetEnumerator(System.Range)">
            <summary>Returns an enumerator that iterates through the specified <paramref name="range"/> of <see cref="T:System.Int32"/>s.</summary>
            <param name="range">A range that has start and end indices.</param>
            <returns>A new instance of <see cref="T:DaLion.Shared.Extensions.CustomIntEnumerator"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.CustomIntEnumerator">
            <summary>Allows enumerating <see cref="T:System.Int32"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.CustomIntEnumerator.#ctor(System.Range)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Extensions.CustomIntEnumerator"/> struct.</summary>
            <param name="range">A range that has start and end indices.</param>
        </member>
        <member name="P:DaLion.Shared.Extensions.CustomIntEnumerator.Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.CustomIntEnumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.StringExtensions">
            <summary>Extensions for the <see cref="T:System.String"/> primitive type.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ContainsAnyOf(System.String,System.String[])">
            <summary>Determines whether the string contains any of the specified sub-strings.</summary>
            <param name="str">The <see cref="T:System.String"/>.</param>
            <param name="candidates">The sub-strings to search for.</param>
            <returns><see langword="true"/> if <paramref name="str"/> contains at least one of the <see cref="T:System.String"/>s in <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ContainsAllOf(System.String,System.String[])">
            <summary>Determines whether the string contains all of the specified sub-strings.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="candidates">The sub-strings to search for.</param>
            <returns><see langword="true"/> if <paramref name="string"/> contains all of the <see cref="T:System.String"/>s in <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.StartsWithAnyOf(System.String,System.String[])">
            <summary>Determines whether the string starts with any of the specified sub-strings.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="candidates">The sub-strings to check.</param>
            <returns><see langword="true"/> if <paramref name="string"/> begins with at least one of the <see cref="T:System.String"/>s in <paramref name="candidates"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.NthIndexOf(System.String,System.Char,System.Int32,System.Int32)">
            <summary>Finds the index of the <paramref name="n"/>th occurrence of the character <paramref name="ch"/> in the string.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="ch">The <see cref="T:System.Char"/> to find.</param>
            <param name="n">The occurrence number.</param>
            <param name="start">The starting index for the search within the string.</param>
            <returns>The integer index of the <paramref name="n"/>th occurrence of the character <paramref name="ch"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.FirstCharToUpper(System.String)">
            <summary>Capitalizes the first character in the string.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> with a capitalized first character.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.RemoveInvalidFileNameOrPathChars(System.String)">
            <summary>Removes invalid file name or path characters from the string.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A new <see cref="T:System.String"/> formed by filtering any invalid file name or path characters from the original.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.SplitCamelCase(System.String)">
            <summary>Splits a <c>camelCase</c> or <c>PascalCase</c> string into its constituent words.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>An array of <see cref="T:System.String"/>s pertaining to the individual words in <paramref name="string"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.TrimAll(System.String)">
            <summary>Trims all whitespace from the string.</summary>
            <param name="str">The <see cref="T:System.String"/>.</param>
            <returns>The original <see cref="T:System.String"/> trimmed of any whitespace characters.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>Truncates the string to the specified <paramref name="maxLength"/> if necessary, appending the desired <paramref name="truncationSuffix"/>.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="maxLength">The desired maximum length of the resulting <see cref="T:System.String"/>.</param>
            <param name="truncationSuffix">A <see cref="T:System.String"/> to be appended to the result to signify that truncation has taken place (by default ellipses).</param>
            <returns>The original <see cref="T:System.String"/> if it is shorter than <paramref name="maxLength"/>, or truncated after <paramref name="maxLength"/> characters and appended with <paramref name="truncationSuffix"/> otherwise.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.Parse``1(System.String)">
            <summary>Parses the string to a generic type.</summary>
            <typeparam name="T">The expected type. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A value of type <typeparamref name="T"/> converted from <paramref name="string"/>, or <see langword="default"/>(<typeparamref name="T"/>) if empty.</returns>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.TryParse``1(System.String,``0@)">
            <summary>Safely attempts to parse the string to a generic type, and returns whether the parse was successful.</summary>
            <typeparam name="T">The expected type. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="result">The parsed value if successful, or default otherwise.</param>
            <returns><see langword="true"/> if the parse was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.GetDeterministicHashCode(System.String)">
            <summary>Converts the string into a hash code that is reliable across different executions.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <returns>A reproducible <see cref="T:System.Int32"/> hash of <paramref name="string"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseTuple``2(System.String,System.String)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting two components into
                different types.
            </summary>
            <typeparam name="T1">The expected type of the first component. This should most likely be a primitive.</typeparam>
            <typeparam name="T2">The expected type of the second component. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed components of <paramref name="string"/>, or the default values if empty.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseTuple``3(System.String,System.String)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting three components into
                different types.
            </summary>
            <typeparam name="T1">The expected type of the first component. This should most likely be a primitive.</typeparam>
            <typeparam name="T2">The expected type of the second component. This should most likely be a primitive.</typeparam>
            <typeparam name="T3">The expected type of the third component. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed components of <paramref name="string"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseTuple``4(System.String,System.String)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting four components into
                different types.
            </summary>
            <typeparam name="T1">The expected type of the first component. This should most likely be a primitive.</typeparam>
            <typeparam name="T2">The expected type of the second component. This should most likely be a primitive.</typeparam>
            <typeparam name="T3">The expected type of the third component. This should most likely be a primitive.</typeparam>
            <typeparam name="T4">The expected type of the fourth component. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>The parsed components of <paramref name="string"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="string"/> does not contain the expected number of components.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseList``1(System.String,System.String)">
            <summary>
                Splits the string using the provided <paramref name="separator"/> and parses the resulting elements into a
                <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="T">The expected type of the elements. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="separator">The element separator.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> containing the parsed elements of <paramref name="string"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.ParseDictionary``2(System.String,System.String,System.String)">
            <summary>Parses a flattened string of key-value pairs back into a <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
            <typeparam name="TKey">The expected type of the dictionary keys. This should most likely be a primitive.</typeparam>
            <typeparam name="TValue">The expected type of the dictionary values. This should most likely be a primitive.</typeparam>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="keyValueSeparator">The sub-string that separates keys and values.</param>
            <param name="pairSeparator">The sub-string that separates key-value pairs.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the parsed <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="keyValueSeparator"/> and <paramref name="pairSeparator"/> are equal.</exception>
            <exception cref="T:System.InvalidOperationException">If the conversion fails.</exception>
        </member>
        <member name="M:DaLion.Shared.Extensions.StringExtensions.SplitWithoutAllocation(System.String,System.Char)">
            <summary>Splits a <see cref="T:System.String"/> into its constituent substrings based on the specified <paramref name="splitter"/>, without additional memory allocation.</summary>
            <param name="string">The <see cref="T:System.String"/>.</param>
            <param name="splitter">A <see cref="T:System.Char"/>s that will be used to split the <paramref name="string"/>.</param>
            <returns>A <see cref="T:DaLion.Shared.Extensions.Memory.SpanSplitter"/> object that can be used to iterate through and access the substrings within the <paramref name="string"/>, without additional memory allocation.</returns>
        </member>
        <member name="T:DaLion.Shared.Extensions.XmlElementExtensions">
            <summary>Extensions for reading data from <see cref="T:System.Xml.XmlElement"/> instance.</summary>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.TryRead(System.Xml.XmlElement,System.String,System.String@)">
            <summary>Attempts to read the specified node in the <paramref name="xml"/> element as <see cref="T:System.String"/>.</summary>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <param name="innerText">The inner text of the node if it exists, otherwise <see cref="F:System.String.Empty"/>.</param>
            <returns><see langword="true"/> if the node exists and is non-empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.Read(System.Xml.XmlElement,System.String)">
            <summary>Reads the specified node in the <paramref name="xml"/> element as <see cref="T:System.String"/>.</summary>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <returns>The inner text of the node if it exists, otherwise <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.TryReadAs``1(System.Xml.XmlElement,System.String,``0@)">
            <summary>Attempts to read the specified node in the <paramref name="xml"/> element.</summary>
            <typeparam name="T">The expected type with which to parse the node's inner text.</typeparam>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <param name="result">The parsed value if successful, otherwise <see langword="null"/>.</param>
            <returns><see langword="true"/> if the node exists and can be parsed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Extensions.XmlElementExtensions.Read``1(System.Xml.XmlElement,System.String)">
            <summary>Reads the specified node in the <paramref name="xml"/> element and parses it to a generic type.</summary>
            <typeparam name="T">The expected type with which to parse the node's inner text.</typeparam>
            <param name="xml">The <see cref="T:System.Xml.XmlElement"/>.</param>
            <param name="name">The name of the node.</param>
            <returns>The parsed value if successful, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.CodeInstructionListExtensions">
            <summary>Extensions for <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.IndexOf(System.Collections.Generic.List{HarmonyLib.CodeInstruction},HarmonyLib.CodeInstruction[],System.Int32)">
            <summary>
                Finds the index of the next occurrence of the <paramref name="pattern"/> in the
                <paramref name="instructions"/>s, beginning at <paramref name="start"/>.
            </summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="pattern">The <see cref="T:HarmonyLib.CodeInstruction"/> pattern to search for.</param>
            <param name="start">The starting index.</param>
            <returns>The index of the first instruction in the next occurrence of <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.IndexOf(System.Collections.Generic.List{HarmonyLib.CodeInstruction},System.Collections.Generic.IList{HarmonyLib.CodeInstruction},System.Int32)">
            <summary>
                Finds the index of the next occurrence of the <paramref name="pattern"/> in the
                <paramref name="instructions"/>s, beginning at <paramref name="start"/>.
            </summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="pattern">The <see cref="T:HarmonyLib.CodeInstruction"/> pattern to search for.</param>
            <param name="start">The starting index.</param>
            <returns>The index of the first instruction in the next occurrence of <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.IndexOf(System.Collections.Generic.List{HarmonyLib.CodeInstruction},System.Reflection.Emit.Label,System.Int32)">
            <summary>
                Finds the index of the next <see cref="T:HarmonyLib.CodeInstruction"/> containing the <paramref name="label"/> in the
                <paramref name="instructions"/>s, beginning at <paramref name="start"/>.
            </summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to search for.</param>
            <param name="start">The starting index.</param>
            <returns>The index of the next occurrence of <paramref name="label"/> in <paramref name="instructions"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.CodeInstructionListExtensions.Clone(System.Collections.Generic.List{HarmonyLib.CodeInstruction})">
            <summary>Creates a deep copy of the <paramref name="instructions"/>.</summary>
            <param name="instructions">A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <returns>An exact copy of <paramref name="instructions"/> in a new <see cref="T:System.Collections.Generic.List`1"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.HarmonyExtensions">
            <summary>Extensions for the <see cref="T:HarmonyLib.Harmony"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllPatches(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllPrefixes(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyPrefix"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyPrefix"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllPostfixes(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyPostfix"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyPostfix"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllTranspilers(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyTranspiler"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyTranspiler"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetAllFinalizers(HarmonyLib.Harmony,System.Func{HarmonyLib.Patch,System.Boolean})">
            <summary>Gets all patches applied to methods patched by the <paramref name="harmony"/> instance that include a <see cref="T:HarmonyLib.HarmonyFinalizer"/>.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="predicate">A filter condition.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:HarmonyLib.Patch"/> instances applied by <paramref name="harmony"/> that include at least one <see cref="T:HarmonyLib.HarmonyFinalizer"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyExtensions.GetPatchesById(HarmonyLib.Harmony,System.String)">
            <summary>
                Gets the patches applied to methods patched by the <paramref name="harmony"/> instance, with the specified
                <paramref name="uniqueId"/>.
            </summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance.</param>
            <param name="uniqueId">A unique ID to search for.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all applied patches by <paramref name="harmony"/> for the mod with the specified <paramref name="uniqueId"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.HarmonyPatcher">
            <summary>Base implementation of a <see cref="T:HarmonyLib.Harmony"/> patch class targeting a single method.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Harmony.HarmonyPatcher"/> class.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Target">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Prefix">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Postfix">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Transpiler">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Finalizer">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.Reverse">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Harmony.HarmonyPatcher.NowPatching">
            <summary>Gets or sets the method that is currently being patched.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.DaLion#Shared#Harmony#IHarmonyPatcher#Apply(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.DaLion#Shared#Harmony#IHarmonyPatcher#Unapply(HarmonyLib.Harmony)">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.ToString">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.ApplyImpl(HarmonyLib.Harmony)">
            <inheritdoc cref="M:DaLion.Shared.Harmony.IHarmonyPatcher.Apply(HarmonyLib.Harmony)"/>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.UnapplyImpl(HarmonyLib.Harmony)">
            <inheritdoc cref="M:DaLion.Shared.Harmony.IHarmonyPatcher.Unapply(HarmonyLib.Harmony)"/>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequireConstructor``1(System.Type[])">
            <summary>Gets a constructor and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="parameters">The constructor parameter types, or <see langword="null"/> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequireMethod``1(System.String,System.Type[])">
            <summary>Gets a method and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="name">The method name.</param>
            <param name="parameters">The method parameter types, or <c>null</c> if it's not overloaded.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequirePropertyGetter``1(System.String)">
            <summary>Gets a property getter and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="name">The property name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.RequirePropertySetter``1(System.String)">
            <summary>Gets a property setter and asserts that it was found.</summary>
            <typeparam name="TType">The type to search in.</typeparam>
            <param name="name">The property name.</param>
            <returns>The corresponding <see cref="T:System.Reflection.MethodInfo"/>.</returns>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.HarmonyPatcher.GetHarmonyMethods">
            <summary>Gets all <see cref="T:DaLion.Shared.Harmony.HarmonyPatcher"/>-annotated methods in the current instance.</summary>
            <returns>The <see cref="T:HarmonyLib.HarmonyMethod"/> representations of each patch method within the <see cref="T:DaLion.Shared.Harmony.HarmonyPatcher"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.Harmonizer">
            <summary>Instantiates and applies <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> classes in the assembly.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.Harmonizer._modRegistry">
            <inheritdoc cref="T:StardewModdingAPI.IModRegistry"/>
        </member>
        <member name="F:DaLion.Shared.Harmony.Harmonizer._sw">
            <inheritdoc cref="T:System.Diagnostics.Stopwatch"/>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.#ctor(StardewModdingAPI.IModRegistry,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> class.</summary>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="harmonyId">The unique ID of the declaring mod.</param>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.Harmony">
            <inheritdoc cref="T:HarmonyLib.Harmony"/>
        </member>
        <member name="P:DaLion.Shared.Harmony.Harmonizer.HarmonyId">
            <summary>Gets the unique ID of the <see cref="T:HarmonyLib.Harmony"/> instance.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyAll(StardewModdingAPI.IModRegistry,System.String)">
            <summary>Implicitly applies<see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> types in the assembly using reflection.</summary>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="harmonyId">The unique ID of the declaring mod.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyFromNamespace(StardewModdingAPI.IModRegistry,System.String,System.String)">
            <summary>Implicitly applies <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> types in the specified namespace.</summary>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="namespace">The desired namespace.</param>
            <param name="harmonyId">The unique ID of the declaring mod. Defaults to <paramref name="namespace"/> if null.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyWithAttribute``1(StardewModdingAPI.IModRegistry,System.String)">
            <summary>Implicitly applies <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> types with the specified attribute.</summary>
            <param name="modRegistry">API for fetching metadata about loaded mods.</param>
            <param name="harmonyId">The unique ID of the declaring mod.</param>
            <typeparam name="TAttribute">An <see cref="T:System.Attribute"/> type.</typeparam>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.Unapply">
            <summary>Unapplies all <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/>s applied by this instance.</summary>
            <returns>Always <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.Harmonizer.ApplyImplicitly(System.Func{System.Type,System.Boolean})">
            <summary>Instantiates and applies <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/> classes using reflection.</summary>
            <param name="predicate">An optional condition with which to limit the scope of applied <see cref="T:DaLion.Shared.Harmony.IHarmonyPatcher"/>es.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.Harmonizer"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.IHarmonyPatcher">
            <summary>Interface for a <see cref="T:HarmonyLib.Harmony"/> patch class targeting a single method.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Target">
            <summary>Gets the method to be patched.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Prefix">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyPrefix"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Postfix">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyPostfix"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Transpiler">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyTranspiler"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Finalizer">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyFinalizer"/> patch that should be applied, if any.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.IHarmonyPatcher.Reverse">
            <summary>Gets the <see cref="T:HarmonyLib.HarmonyReversePatch"/> patch that should be applied, if any.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.IHarmonyPatcher.Apply(HarmonyLib.Harmony)">
            <summary>Applies internally-defined Harmony patches.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance for this mod.</param>
            <returns><see langword="true"/> if the patch was applied successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.IHarmonyPatcher.Unapply(HarmonyLib.Harmony)">
            <summary>Unapplies internally-defined Harmony patches.</summary>
            <param name="harmony">The <see cref="T:HarmonyLib.Harmony"/> instance for this mod.</param>
            <returns><see langword="true"/> if the patch was unapplied successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.ILHelper">
            <summary>Provides an API for abstracting common transpiler operations.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.#ctor(System.Reflection.MethodBase,System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Harmony.ILHelper"/> class.</summary>
            <param name="original">A <see cref="T:System.Reflection.MethodBase"/> representation of the original method.</param>
            <param name="instructions">The <see cref="T:HarmonyLib.CodeInstruction"/>s to be modified.</param>
        </member>
        <member name="T:DaLion.Shared.Harmony.ILHelper.SearchOption">
            <summary>Specifies the starting point and direction for a pattern search.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.First">
            <summary>Find the first occurrence of a pattern by starting from the first instruction and searching in the forward direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.Next">
            <summary>Find the first occurrence of a pattern by starting from the current instruction and searching in the forward direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.Previous">
            <summary>Find the first occurrence of a pattern by starting from the current instruction and searching in the reverse direction.</summary>
        </member>
        <member name="F:DaLion.Shared.Harmony.ILHelper.SearchOption.Last">
            <summary>Find the first occurrence of a pattern by starting from the last instruction and searching in the reverse direction.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.Original">
            <summary>Gets metadata about the original target method.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.Instructions">
            <summary>Gets the current list of <see cref="T:HarmonyLib.CodeInstruction"/>s that will eventually replace the target method.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.Locals">
            <summary>Gets a look-up table for easy indexing of <see cref="T:System.Reflection.Emit.LocalBuilder"/> objects by their corresponding local index.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.CurrentIndex">
            <summary>Gets the index currently at the top of the index stack.</summary>
        </member>
        <member name="P:DaLion.Shared.Harmony.ILHelper.LastIndex">
            <summary>Gets the index of the last <see cref="T:HarmonyLib.CodeInstruction"/> in the current instruction list.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Match(HarmonyLib.CodeInstruction[],DaLion.Shared.Harmony.ILHelper.SearchOption,System.Int32)">
            <summary>
                Finds the first occurrence of the specified <paramref name="pattern"/> in the active
                <see cref="T:HarmonyLib.CodeInstruction"/> list according to the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>,
                and moves the stack pointer to it.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="search">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <param name="nth">Match the nth occurrence of this <paramref name="pattern"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Count(HarmonyLib.CodeInstruction[],System.Int32@,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Finds and returns the number of instruction until the first occurrence of the specified
                <paramref name="pattern"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/> list according to
                the specified <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>, without moving the stack pointer to it.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="count">The number of instructions until the first occurrence of <paramref name="pattern"/>.</param>
            <param name="search">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.MatchLabel(System.Reflection.Emit.Label,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Finds the specified <paramref name="label"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/> list and moves the
                stack pointer to it.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to match.</param>
            <param name="search">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.MatchLabel(System.Reflection.Emit.Label,System.Int32@,DaLion.Shared.Harmony.ILHelper.SearchOption)">
            <summary>
                Finds the specified <paramref name="label"/> in the active <see cref="T:HarmonyLib.CodeInstruction"/> list
                without moving the stack pointer to it.
            </summary>
            <param name="label">The <see cref="T:System.Reflection.Emit.Label"/> object to match.</param>
            <param name="count">The number of instructions until the specified of <paramref name="label"/>.</param>
            <param name="search">The <see cref="T:DaLion.Shared.Harmony.ILHelper.SearchOption"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Move(System.Int32)">
            <summary>Moves the stack pointer an integer number of <paramref name="steps"/>.</summary>
            <param name="steps">Number of steps by which to move the stack pointer.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
            <remarks>Positive means down.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GoTo(System.Int32)">
            <summary>Moves the stack pointer to the specific <paramref name="index"/>.</summary>
            <param name="index">The index to move to.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Insert(HarmonyLib.CodeInstruction[],System.Reflection.Emit.Label[])">
            <summary>Inserts the given <paramref name="instructions"/> at the currently pointed index.</summary>
            <param name="instructions">The <see cref="T:HarmonyLib.CodeInstruction"/>s to insert.</param>
            <param name="labels">Some <see cref="T:System.Reflection.Emit.Label"/>s to add at the start of the insertion.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
            <remarks>
                The instruction at the current address is pushed forward, such that the stack pointer continues to point to
                the same instruction after insertion.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Add(HarmonyLib.CodeInstruction[],System.Reflection.Emit.Label[])">
            <summary>Adds the given <paramref name="instructions"/> to the end of the active <see cref="T:HarmonyLib.CodeInstruction"/> list.</summary>
            <param name="instructions">The <see cref="T:HarmonyLib.CodeInstruction"/>s to add.</param>
            <param name="labels">Some <see cref="T:System.Reflection.Emit.Label"/>s to add at the start of the insertion.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
            <remarks>The stack pointer is moved to the first instruction in the added sequence.</remarks>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Copy(HarmonyLib.CodeInstruction[]@,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Gets a copy of the next <paramref name="count"/> <see cref="T:HarmonyLib.CodeInstruction"/>s, starting from the currently
                pointed index.
            </summary>
            <param name="copy">The got code instructions.</param>
            <param name="count">Number of code instructions to get.</param>
            <param name="removeLabels">Whether to remove the labels of the copied <see cref="T:HarmonyLib.CodeInstruction"/>s.</param>
            <param name="moveStackPointer">Whether to advance the stack pointer.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Remove(System.Int32)">
            <summary>
                Removes the next <paramref name="count"/> <see cref="T:HarmonyLib.CodeInstruction"/>s starting from the currently pointed
                index.
            </summary>
            <param name="count">Number of code instructions to remove.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.ReplaceWith(HarmonyLib.CodeInstruction,System.Boolean)">
            <summary>Replaces the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="instruction">The <see cref="T:HarmonyLib.CodeInstruction"/> to replace with.</param>
            <param name="preserveLabels">Whether to preserve the labels at the current <see cref="T:HarmonyLib.CodeInstruction"/> before replacement.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.AddLabels(System.Reflection.Emit.Label[])">
            <summary>Adds one or more <see cref="T:System.Reflection.Emit.Label"/>s to the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="labels">Some of <see cref="T:System.Reflection.Emit.Label"/>s to add.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.RemoveLabels(System.Reflection.Emit.Label[])">
            <summary>
                Removes the specified <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed
                index.
            </summary>
            <param name="labels">The <see cref="T:System.Reflection.Emit.Label"/>s to remove.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GetLabels(System.Reflection.Emit.Label[]@)">
            <summary>
                Gets a copy of the <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed
                index.
            </summary>
            <param name="labels">The copied <see cref="T:System.Reflection.Emit.Label"/>s.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.SetLabels(System.Reflection.Emit.Label[])">
            <summary>Replaces the <see cref="T:System.Reflection.Emit.Label"/>s of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="labels">The new <see cref="T:System.Reflection.Emit.Label"/>s to set.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.StripLabels">
            <summary>Removes all <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.StripLabels(System.Reflection.Emit.Label[]@)">
            <summary>
                Removes all <see cref="T:System.Reflection.Emit.Label"/>s from the <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index and
                returns a reference to those <see cref="T:System.Reflection.Emit.Label"/>s.
            </summary>
            <param name="labels">The removed <see cref="T:System.Reflection.Emit.Label"/>s.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GetOpCode(System.Reflection.Emit.OpCode@)">
            <summary>Returns the <see cref="T:System.Reflection.Emit.OpCode"/> of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="opcode">The returned <see cref="T:System.Reflection.Emit.OpCode"/>.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.SetOpCode(System.Reflection.Emit.OpCode)">
            <summary>Changes the <see cref="T:System.Reflection.Emit.OpCode"/> of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="opcode">The new <see cref="T:System.Reflection.Emit.OpCode"/> to replace with.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.GetOperand(System.Object@)">
            <summary>Returns the operand of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="operand">The returned operand.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.SetOperand(System.Object)">
            <summary>Changes the operand of the <see cref="T:HarmonyLib.CodeInstruction"/> at the currently pointed index.</summary>
            <param name="operand">The new operand to replace with.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Return(System.Int32)">
            <summary>Returns the stack pointer to a previous state.</summary>
            <param name="count">Number of index changes to discard.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.ForEach(HarmonyLib.CodeInstruction[],System.Action)">
            <summary>
                Applies the specified action to all occurrences of the <paramref name="pattern"/> within the active
                <see cref="T:HarmonyLib.CodeInstruction"/> list.
            </summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <param name="action">The action to be applied.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Repeat(System.Int32,System.Action{System.Int32})">
            <summary>Applies the specified action a species number of times.</summary>
            <param name="count">The number of times to repeat.</param>
            <param name="action">The action to be applied.</param>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Clear">
            <summary>Resets the current instance.</summary>
            <returns>The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Flush">
            <summary>Resets the instance and returns the active <see cref="T:HarmonyLib.CodeInstruction"/> list as an enumerable.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the contents of the <see cref="T:HarmonyLib.CodeInstruction"/> cache.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.LdcFromInt(System.Int32)">
            <summary>Gets the corresponding <see cref="T:HarmonyLib.CodeInstruction"/> for loading a given integer.</summary>
            <param name="num">An integer.</param>
            <returns>The correct <see cref="T:HarmonyLib.CodeInstruction"/> which loads <paramref name="num"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.Snitch">
            <summary>Snitches on other <see cref="T:HarmonyLib.HarmonyTranspiler"/>s applied to the target <see cref="P:DaLion.Shared.Harmony.ILHelper.Original"/> method.</summary>
            <returns>A formatted string listing all transpilers applied to the target method.</returns>
            <remarks>
                Inspired by
                <see href="https://github.com/atravita-mods/StardewMods/blob/f450bd2fe72a884e89ca6a06c187605bdb79fa3d/AtraShared/Utils/Extensions/HarmonyExtensions.cs#L46">atravita</see>.
            </remarks>
            <returns>A formatted <see cref="T:System.String"/> revealing the currently applied <see cref="T:HarmonyLib.HarmonyTranspiler"/>s to the <see cref="P:DaLion.Shared.Harmony.ILHelper.Original"/> method.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.ILHelper.TryMoveNext(HarmonyLib.CodeInstruction[])">
            <summary>Attempts to move the stack pointer to the next occurrence of the specified <paramref name="pattern"/>.</summary>
            <param name="pattern">A pattern of <see cref="T:HarmonyLib.CodeInstruction"/>s to match.</param>
            <returns>
                <see langword="true"/> if a subsequent occurrence of <paramref name="pattern"/> is found, otherwise
                <see langword="false"/>.
            </returns>
        </member>
        <member name="T:DaLion.Shared.Harmony.IlHelperExtensions">
            <summary>Extensions for the <see cref="T:DaLion.Shared.Harmony.ILHelper"/> class.</summary>
        </member>
        <member name="M:DaLion.Shared.Harmony.IlHelperExtensions.InsertDiceRoll(DaLion.Shared.Harmony.ILHelper,System.Double,System.Reflection.Emit.Label[],System.Boolean)">
            <summary>Inserts a sequence of <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index to roll a random double.</summary>
            <param name="helper">The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</param>
            <param name="chance">The threshold for a successful roll.</param>
            <param name="labels">Branch labels to add to the inserted sequence.</param>
            <param name="forStaticRandom">Whether to load the static <see cref="F:StardewValley.Game1.random"/>.</param>
            <returns>The <paramref name="helper"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Harmony.IlHelperExtensions.InsertDiceRoll(DaLion.Shared.Harmony.ILHelper,System.Int32,System.Int32,System.Reflection.Emit.Label[],System.Boolean)">
            <summary>Inserts a sequence of <see cref="T:HarmonyLib.CodeInstruction"/>s at the currently pointed index to roll a random integer.</summary>
            <param name="helper">The <see cref="T:DaLion.Shared.Harmony.ILHelper"/> instance.</param>
            <param name="minValue">The lower limit, inclusive.</param>
            <param name="maxValue">The upper limit, inclusive.</param>
            <param name="labels">Branch labels to add to the inserted sequence.</param>
            <param name="forStaticRandom">Whether to load the static <see cref="F:StardewValley.Game1.random"/>.</param>
            <returns>The <paramref name="helper"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.ItemType">
            <summary>An item type that can be searched and added to the player through the console.</summary>
            <remarks>This is copied from the SMAPI source code and should be kept in sync with it.</remarks>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Unknown">
            <summary>The item isn't covered by one of the known types.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.BigCraftable">
            <summary>A big craftable object in <see cref="F:StardewValley.Game1.bigCraftablesInformation"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Boots">
            <summary>A <see cref="T:StardewValley.Objects.Boots"/> item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Clothing">
            <summary>A <see cref="T:StardewValley.Objects.Clothing"/> item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Flooring">
            <summary>A <see cref="T:StardewValley.Objects.Wallpaper"/> flooring item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Furniture">
            <summary>A <see cref="T:StardewValley.Objects.Furniture"/> item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Hat">
            <summary>A <see cref="T:StardewValley.Objects.Hat"/> item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Object">
            <summary>Any object in <see cref="F:StardewValley.Game1.objectInformation"/> (except rings).</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Ring">
            <summary>A <see cref="T:StardewValley.Objects.Ring"/> item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Tool">
            <summary>A <see cref="T:StardewValley.Tool"/> tool.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Wallpaper">
            <summary>A <see cref="T:StardewValley.Objects.Wallpaper"/> wall item.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.ItemType.Weapon">
            <summary>A <see cref="T:StardewValley.Tools.MeleeWeapon"/> or <see cref="T:StardewValley.Tools.Slingshot"/> item.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.MachineState">
            <summary>A machine processing state.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.MachineState.Disabled">
            <summary>The machine is not currently enabled (e.g. out of season or needs to be started manually).</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.MachineState.Empty">
            <summary>The machine has no input.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.MachineState.Processing">
            <summary>The machine is processing an input.</summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.Automate.MachineState.Done">
            <summary>The machine finished processing an input and has an output item ready.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IAutomatable">
            <summary>
                An automatable entity, which can implement a more specific type like <see cref="T:DaLion.Shared.Integrations.Automate.IMachine"/> or
                <see cref="T:DaLion.Shared.Integrations.Automate.IContainer"/>. If it doesn't implement a more specific type, it's treated as a connector with no
                additional logic.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IAutomatable.Location">
            <summary>Gets the location which contains the machine.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IAutomatable.TileArea">
            <summary>Gets the tile area covered by the machine.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IAutomationFactory">
            <summary>Constructs machines, containers, or connectors which can be added to a machine group.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IAutomationFactory.GetFor(StardewValley.Object,StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2@)">
            <summary>Get a machine, container, or connector instance for a given object.</summary>
            <param name="obj">The in-game object.</param>
            <param name="location">The location to check.</param>
            <param name="tile">The tile position to check.</param>
            <returns>Returns an instance or <c>null</c>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IAutomationFactory.GetFor(StardewValley.TerrainFeatures.TerrainFeature,StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2@)">
            <summary>Get a machine, container, or connector instance for a given terrain feature.</summary>
            <param name="feature">The terrain feature.</param>
            <param name="location">The location to check.</param>
            <param name="tile">The tile position to check.</param>
            <returns>Returns an instance or <c>null</c>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IAutomationFactory.GetFor(StardewValley.Buildings.Building,StardewValley.Locations.BuildableGameLocation,Microsoft.Xna.Framework.Vector2@)">
            <summary>Get a machine, container, or connector instance for a given building.</summary>
            <param name="building">The building.</param>
            <param name="location">The location to check.</param>
            <param name="tile">The tile position to check.</param>
            <returns>Returns an instance or <c>null</c>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IAutomationFactory.GetForTile(StardewValley.GameLocation,Microsoft.Xna.Framework.Vector2@)">
            <summary>Get a machine, container, or connector instance for a given tile position.</summary>
            <param name="location">The location to check.</param>
            <param name="tile">The tile position to check.</param>
            <returns>Returns an instance or <c>null</c>.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IConsumable">
            <summary>An ingredient stack (or stacks) which can be consumed by a machine.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IConsumable.Consumables">
            <summary>Gets the items available to consumable.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IConsumable.Sample">
            <summary>Gets a sample item for comparison.</summary>
            <remarks>This should not be a reference to the original stack.</remarks>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IConsumable.CountNeeded">
            <summary>Gets the number of items needed for the recipe.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IConsumable.IsMet">
            <summary>Gets a value indicating whether determines whether the consumables needed for this requirement are ready.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IConsumable.Reduce">
            <summary>Remove the needed number of this item from the stack.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IConsumable.Take">
            <summary>Remove the needed number of this item from the stack and return a new stack matching the count.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IContainer">
            <summary>Provides and stores items for machines.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IContainer.Name">
            <summary>Gets the container name (if any).</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IContainer.ModData">
            <summary>Gets the raw mod data for the container.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IContainer.IsJunimoChest">
            <summary>Gets a value indicating whether determines whether this is a Junimo chest, which shares a global inventory with all other Junimo chests.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IContainer.Get(System.Func{StardewValley.Item,System.Boolean},System.Int32)">
            <summary>Find items in the pipe matching a predicate.</summary>
            <param name="predicate">Matches items that should be returned.</param>
            <param name="count">The number of items to find.</param>
            <returns>
                If the pipe has no matching item, returns <see langword="null"/>. Otherwise returns a tracked item stack,
                which may have less items than requested if no more were found.
            </returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IContainer.Store(DaLion.Shared.Integrations.Automate.ITrackedStack)">
            <summary>Store an item stack.</summary>
            <param name="stack">The item stack to store.</param>
            <remarks>If the storage can't hold the entire stack, it should reduce the tracked stack accordingly.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IContainer.GetFilled">
            <summary>Get the number of item stacks currently stored in the container.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IContainer.GetCapacity">
            <summary>Get the total number of item stacks that can be stored in the container.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IMachine">
            <summary>A machine that accepts input and provides output.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IMachine.MachineTypeID">
            <summary>Gets a unique ID for the machine type.</summary>
            <remarks>
                This value should be identical for two machines if they have the exact same behavior and input logic. For
                example, if one machine in a group can't process input due to missing items, Automate will skip any other empty
                machines of that type in the same group since it assumes they need the same inputs.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IMachine.GetState">
            <summary>Get the machine's processing state.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IMachine.GetOutput">
            <summary>Get the output item.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IMachine.SetInput(DaLion.Shared.Integrations.Automate.IStorage)">
            <summary>Provide input to the machine.</summary>
            <param name="input">The available items.</param>
            <returns>Returns whether the machine started processing an item.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IRecipe">
            <summary>Describes a generic recipe based on item input and output.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IRecipe.Input">
            <summary>Gets matches items that can be used as input.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IRecipe.InputCount">
            <summary>Gets the number of inputs needed.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IRecipe.Output">
            <summary>Gets the output to generate (given an input).</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.IRecipe.Minutes">
            <summary>Gets the time needed to prepare an output (given an input).</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IRecipe.AcceptsInput(DaLion.Shared.Integrations.Automate.ITrackedStack)">
            <summary>Get whether the recipe can accept a given item as input (regardless of stack size).</summary>
            <param name="stack">The item to check.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IStorage">
            <summary>Manages access to items in the underlying containers.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.GetItems">
            <summary>Get all items from the given pipes.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.TryGetIngredient(System.Func{DaLion.Shared.Integrations.Automate.ITrackedStack,System.Boolean},System.Int32,DaLion.Shared.Integrations.Automate.IConsumable@)">
            <summary>Get an ingredient needed for a recipe.</summary>
            <param name="predicate">Returns whether an item should be matched.</param>
            <param name="count">The number of items to find.</param>
            <param name="consumable">The matching consumables.</param>
            <returns>Returns whether the requirement is met.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.TryGetIngredient(System.Int32,System.Int32,DaLion.Shared.Integrations.Automate.IConsumable@,System.Nullable{DaLion.Shared.Integrations.Automate.ItemType})">
            <summary>Get an ingredient needed for a recipe.</summary>
            <param name="id">The item or category ID.</param>
            <param name="count">The number of items to find.</param>
            <param name="consumable">The matching consumables.</param>
            <param name="type">The item type to find, or <c>null</c> to match any.</param>
            <returns>Returns whether the requirement is met.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.TryGetIngredient(DaLion.Shared.Integrations.Automate.IRecipe[],DaLion.Shared.Integrations.Automate.IConsumable@,DaLion.Shared.Integrations.Automate.IRecipe@)">
            <summary>Get an ingredient needed for a recipe.</summary>
            <param name="recipes">The items to match.</param>
            <param name="consumable">The matching consumables.</param>
            <param name="recipe">The matched requisition.</param>
            <returns>Returns whether the requirement is met.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.TryConsume(System.Func{DaLion.Shared.Integrations.Automate.ITrackedStack,System.Boolean},System.Int32)">
            <summary>Consume an ingredient needed for a recipe.</summary>
            <param name="predicate">Returns whether an item should be matched.</param>
            <param name="count">The number of items to find.</param>
            <returns>Returns whether the item was consumed.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.TryConsume(System.Int32,System.Int32,System.Nullable{DaLion.Shared.Integrations.Automate.ItemType})">
            <summary>Consume an ingredient needed for a recipe.</summary>
            <param name="itemID">The item ID.</param>
            <param name="count">The number of items to find.</param>
            <param name="type">The item type to find, or <c>null</c> to match any.</param>
            <returns>Returns whether the item was consumed.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IStorage.TryPush(DaLion.Shared.Integrations.Automate.ITrackedStack)">
            <summary>Add the given item stack to the pipes if there's space.</summary>
            <param name="item">The item stack to push.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.ITrackedStack">
            <summary>An item stack in an input pipe which can be reduced or taken.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.ITrackedStack.Sample">
            <summary>Gets a sample item for comparison.</summary>
            <remarks>This should be equivalent to the underlying item (except in stack size), but *not* a reference to it.</remarks>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.ITrackedStack.Type">
            <summary>Gets the underlying item type.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.Automate.ITrackedStack.Count">
            <summary>Gets the number of items in the stack.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.ITrackedStack.Reduce(System.Int32)">
            <summary>Remove the specified number of this item from the stack.</summary>
            <param name="count">The number to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.ITrackedStack.Take(System.Int32)">
            <summary>Remove the specified number of this item from the stack and return a new stack matching the count.</summary>
            <param name="count">The number to get.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.ITrackedStack.PreventEmptyStacks">
            <summary>Ignore one item in each stack, to ensure that no stack can be fully consumed.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.Automate.IAutomateApi">
            <summary>The API provided by Automate.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IAutomateApi.AddFactory(DaLion.Shared.Integrations.Automate.IAutomationFactory)">
            <summary>Add an automation factory.</summary>
            <param name="factory">An automation factory which construct machines, containers, and connectors.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.Automate.IAutomateApi.GetMachineStates(StardewValley.GameLocation,Microsoft.Xna.Framework.Rectangle)">
            <summary>Get the status of machines in a tile area. This is a specialized API for Data Layers and similar mods.</summary>
            <param name="location">The location for which to display data.</param>
            <param name="tileArea">The tile area for which to display data.</param>
            <returns>The internal state enum of each machine in the <paramref name="tileArea"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.CustomResourceClumps.ICustomResourceClumpsApi">
            <summary>The API provided by Custom Ore Nodes.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuOptionsIntegration.#ctor">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuOptionsIntegration"/> class.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi">
            <summary>The API which lets other mods add a config UI using one of the complex options defined in GMCMOptions.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ColorPickerStyle">
            <summary>
            Flags to control how the <c>ColorPickerOption</c> widget is displayed.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation">
            <summary>
            Valid values for the <c>arrowLocation</c> parameter of <c>AddImageOption</c>.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionLabelLocation">
            <summary>
            Valid values for the <c>labelLocation</c> parameter of <c>AddImageOption</c>.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.HorizontalAlignment">
            <summary>
            Valid values for the <c>alignment</c> parameter of <c>AddHorizontalSeparator</c> and <c>AddSimpleHorizontalSeparator</c>.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.AddColorOption(StardewModdingAPI.IManifest,System.Func{Microsoft.Xna.Framework.Color},System.Action{Microsoft.Xna.Framework.Color},System.Func{System.String},System.Func{System.String},System.Boolean,System.UInt32,System.String)">
            <summary>Add a <c cref="T:Microsoft.Xna.Framework.Color">Color</c> option at the current position in the GMCM form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the tooltip.</param>
            <param name="showAlpha">Whether the color picker should allow setting the Alpha channel.</param>
            <param name="colorPickerStyle">A <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ColorPickerStyle"/> flags to control how the color picker is rendered.</param>
            <param name="fieldId">The unique field ID for use with GMCM's <c>OnFieldChanged</c>, or <c>null</c> to auto-generate a randomized ID.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.AddImageOption(StardewModdingAPI.IManifest,System.Func{System.UInt32},System.Action{System.UInt32},System.Func{System.String},System.Func{System.UInt32},System.Func{System.Int32},System.Func{System.Int32},System.Action{System.UInt32,Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2},System.Func{System.String},System.Func{System.UInt32,System.String},System.Int32,System.Int32,System.String)">
            <summary>
            Add an image picker option.  This is really an "array index picker" where you can specify what to draw
            for each index. The underlying value is always a <c>uint</c> (the index).
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="getMaxValue">
              The maximum value this option can have, and thus the maximum value that will be passed to
              <paramref name="drawImage"/> and <paramref name="label"/>. Note that this is a function, so
              theoretically the number of options does not have to be fixed. Should this function return a
              value greater than the option's current value then the option's current value will be clamped.
              In common usage, this parameter should be a function that returns one less than the number
              of images.
            </param>
            <param name="maxImageHeight">
              A function that returns the maximum image height. Used to report the option's height to GMCM (which
              before version 1.8.2 will not recompute how much space to reserve for the option until the page is re-opened) and to center
              arrows vertically in the <c cref="F:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation.Sides">Sides</c> arrow placement option.
            </param>
            <param name="maxImageWidth">
              A function that returns the maximum image width. This is used to place the arrows and label.
            </param>
            <param name="drawImage">A function which draws the image for the given index at the given location.</param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the tooltip.</param>
            <param name="label">A function to return the string to display given the image index, or <c>null</c> to disable that display.</param>
            <param name="arrowLocation">Where to render the arrows. Use a value from the <c cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation">ImageOptionArrowLocation</c> enum.</param>
            <param name="labelLocation">Where to render the label. Use a value from the <c cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionLabelLocation">ImageOptionLabelLocation</c> enum.</param>
            <param name="fieldId">The unique field ID for use with GMCM's <c>OnFieldChanged</c>, or <c>null</c> to auto-generate a randomized ID.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.AddImageOption(StardewModdingAPI.IManifest,System.Func{System.UInt32},System.Action{System.UInt32},System.Func{System.String},System.Func{System.ValueTuple{System.Func{System.String},Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle}}[]},System.Func{System.String},System.Int32,System.Int32,System.String)">
            <summary>
            Add an image picker option. A simplified interface to the full <c>AddImageOption</c> signature.
            To use this signature, you supply a function that returns an array of tuples containing the
            different image <paramref name="choices"/>. The underlying value is the <c>uint</c> that is the
            index of the selected image.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="choices">
              A function that returns an array of tuples describing the image choices. Each tuple contains:
              <list type="bullet">
                <item>A function to return the label string (or <c>null</c> for no label)</item>
                <item>The <c cref="T:Microsoft.Xna.Framework.Graphics.Texture2D">Texture2D</c> containing the image (i.e., the sprite sheet)</item>
                <item>The source rectangle for the image within the texture, or <c>null</c> to indicate the entire texture</item>
              </list>
            </param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the tooltip.</param>
            <param name="arrowLocation">Where to render the arrows. Use a value from the <c cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionArrowLocation">ImageOptionArrowLocation</c> enum.</param>
            <param name="labelLocation">Where to render the label. Use a value from the <c cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.ImageOptionLabelLocation">ImageOptionLabelLocation</c> enum.</param>
            <param name="fieldId">The unique field ID for use with GMCM's <c>OnFieldChanged</c>, or <c>null</c> to auto-generate a randomized ID.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.AddHorizontalSeparator(StardewModdingAPI.IManifest,System.Func{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Color},System.Func{Microsoft.Xna.Framework.Color})">
            <summary>
            Add a horizontal separator.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getWidthFraction">
              A function that returns the fraction of the GMCM window that the separator
              should occupy.  1.0 is the entire window.  Defaults to 0.85.
            </param>
            <param name="height">The height of the separator (in pixels).</param>
            <param name="padAbove">How much padding (in pixels) to place above the separator.</param>
            <param name="padBelow">How much padding (in pixels) to place below the separator.</param>
            <param name="alignment">
              The horizontal alignment of the separator.
              Use a value from the <c cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.HorizontalAlignment">HorizontalAlignment enumeration</c>.
            </param>
            <param name="getColor">
              A function to return the color to use for the separator.  Defaults to the game's text color.
            </param>
            <param name="getShadowColor">
              A function to return the color to use for the shadow drawn under the separator.  Defaults to the
              game's text shadow color.  Return <c>Color.Transparent</c> to remove the shadow completely.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.AddSimpleHorizontalSeparator(StardewModdingAPI.IManifest,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Nullable{Microsoft.Xna.Framework.Color},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
              Add a horizontal separator.  This is a simplified version of
              <c cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.AddHorizontalSeparator(StardewModdingAPI.IManifest,System.Func{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Func{Microsoft.Xna.Framework.Color},System.Func{Microsoft.Xna.Framework.Color})">AddHorizontalSeparator</c>.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="widthFraction">
              The fraction of the GMCM window that the separator
              should occupy.  1.0 is the entire window.  Defaults to 0.85.</param>
            <param name="height">The height of the separator (in pixels).</param>
            <param name="padAbove">How much padding (in pixels) to place above the separator.</param>
            <param name="padBelow">How much padding (in pixels) to place below the separator.</param>
            <param name="alignment">
              The horizontal alignment of the separator.
              Use a value from the <c cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuOptionsApi.HorizontalAlignment">HorizontalAlignment enumeration</c>.
            </param>
            <param name="color">The color to use for the separator.  Defaults to the game's text color.</param>
            <param name="shadowColor">
              The color to use for the shadow drawn under the separator.  Defaults to the
              game's text shadow color.  Use <c>Color.Transparent</c> to remove the shadow completely.
            </param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOption`1">
            <summary>Allows multi-column page link options in GMCM.</summary>
            <typeparam name="TPage">The type of the object which represents the page.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Shockah/Stardew-Valley-Mods/blob/master/Kokoro/GMCM/MultiPageLinkOption.cs">Shockah</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOption`1.#ctor(System.Func{System.String},`0[],System.Func{`0,System.String},System.Func{`0,System.String},System.Func{System.Single,System.Int32})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOption`1"/> class.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="pages">The page values.</param>
            <param name="getPageId">Gets the destination page ID.</param>
            <param name="getPageName">Gets the destination page name.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOptionExtensions">
            <summary>Extends the <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi"/> with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOptionExtensions.AddMultiPageLinkOption``1(DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},``0[],System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.Single,System.Int32})"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOptionExtensions.AddMultiPageLinkOption``1(DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},``0[],System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.Single,System.Int32})">
            <summary>Adds a new instance of <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiPageLinkOption`1"/> to the specified <paramref name="mod"/>'s config menu.</summary>
            <typeparam name="TPage">The type of the object which represents the page.</typeparam>
            <param name="api">The <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi"/>.</param>
            <param name="mod">The mod's manifest.</param>
            <param name="getOptionName">Gets the option name.</param>
            <param name="pages">The page values.</param>
            <param name="getPageId">Gets the destination page ID.</param>
            <param name="getPageName">Gets the destination page name.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOption`1">
            <summary>Allows multi-column page link options in GMCM.</summary>
            <typeparam name="TCheckbox">The type of the object from which the bool checkbox field or property can be accessed.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Shockah/Stardew-Valley-Mods/blob/master/Kokoro/GMCM/MultiPageLinkOption.cs">Shockah</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOption`1.#ctor(System.Func{System.String},`0[],System.Func{`0,System.Boolean},System.Action{`0,System.Boolean},System.Func{System.Single,System.Int32},System.Func{`0,System.String},System.Action{`0,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOption`1"/> class.</summary>
            <param name="getOptionName">Gets the option name.</param>
            <param name="checkboxes">The checkbox values.</param>
            <param name="getCheckboxValue">Gets the current state of the checkbox value.</param>
            <param name="setCheckboxValue">Sets the current state of the checkbox value.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="getCheckboxLabel">Gets the checkbox label.</param>
            <param name="onValueUpdated">A delegate to be called after values are changed.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOptionExtensions">
            <summary>Extends the <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi"/> with <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOption`1"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOptionExtensions.AddMultiCheckboxOption``1(DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi,StardewModdingAPI.IManifest,System.Func{System.String},``0[],System.Func{``0,System.Boolean},System.Action{``0,System.Boolean},System.Func{System.Single,System.Int32},System.Func{``0,System.String},System.Action{``0,System.Boolean})">
            <summary>Adds a new instance of <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.MultiCheckboxOption`1"/> to the specified <paramref name="mod"/>'s config menu.</summary>
            <typeparam name="TCheckbox">The type of the object which represents the page.</typeparam>
            <param name="api">The <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi"/>.</param>
            <param name="mod">The mod's manifest.</param>
            <param name="getOptionName">Gets the option name.</param>
            <param name="checkboxes">The checkbox values.</param>
            <param name="getCheckboxValue">Gets the current state of the checkbox value.</param>
            <param name="setCheckboxValue">Sets the current state of the checkbox value.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="getCheckboxLabel">Gets the checkbox label.</param>
            <param name="onValueUpdated">A delegate to be called after values are changed.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2">
            <summary>Handles the logic for integrating with the Generic Mod Configuration Menu mod.</summary>
            <typeparam name="TGenericModConfigMenu">The type that is inheriting from this class.</typeparam>
            <typeparam name="TConfig">The mod configuration type.</typeparam>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.#ctor(StardewModdingAPI.IModRegistry,StardewModdingAPI.IManifest)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2"/> class.</summary>
            <param name="modRegistry">An API for fetching metadata about loaded mods.</param>
            <param name="consumerManifest">The manifest for the mod consuming the API.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.ConsumerManifest">
            <summary>Gets the manifest for the mod consuming the API.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.ComplexOptions">
            <summary>Gets the API for registering complex options, if available.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.Register">
            <summary>Registers the mod config.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.Reload">
            <summary>Resets the mod config menu.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.BuildMenu">
            <summary>Constructs the config menu.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.RegisterImpl">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddPage(System.String,System.Func{System.String})">
            <summary>
                Starts a new page in the mod's config UI, or switch to that page if it already exists. All options registered
                after this will be part of that page.
            </summary>
            <param name="pageId">The unique page ID.</param>
            <param name="pageTitle">The page title shown in its UI, or <c>null</c> to show the <paramref name="pageId"/> value.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
            <remarks>
                You must also call <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddPageLink(System.String,System.Func{System.String},System.Func{System.String})"/> to make the page accessible. This is only needed to set up a
                multi-page config UI. If you don't call this method, all options will be part of the mod's main config UI instead.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddPageLink(System.String,System.Func{System.String},System.Func{System.String})">
            <summary>Adds a link to a page added via <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddPage(System.String,System.Func{System.String})"/> at the current position in the form.</summary>
            <param name="pageId">The unique ID of the page to open when the link is clicked.</param>
            <param name="getText">Gets the link text shown in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the link, or <c>null</c> to disable the tooltip.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddSectionTitle(System.Func{System.String},System.Func{System.String})">
            <summary>Adds a section title at the current position in the form.</summary>
            <param name="getText">Gets the title text shown in the form.</param>
            <param name="getTooltip">
                Gets the tooltip text shown when the cursor hovers on the title, or <c>null</c> to disable the
                tooltip.
            </param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddParagraph(System.Func{System.String})">
            <summary>Adds a paragraph of text at the current position in the form.</summary>
            <param name="getText">Gts the paragraph text to display.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddCheckbox(System.Func{System.String},System.Func{System.String},System.Func{`1,System.Boolean},System.Action{`1,System.Boolean},System.String)">
            <summary>Adds a checkbox to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddDropdown(System.Func{System.String},System.Func{System.String},System.Func{`1,System.String},System.Action{`1,System.String},System.String[],System.Func{System.String,System.String},System.String)">
            <summary>Adds a dropdown to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="allowedValues">The values that can be selected.</param>
            <param name="formatAllowedValue">
                Get the display text to show for a value from <paramref name="allowedValues"/>, or
                <c>null</c> to show the values as-is.
            </param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddTextbox(System.Func{System.String},System.Func{System.String},System.Func{`1,System.String},System.Action{`1,System.String},System.String)">
            <summary>Adds a checkbox to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddNumberField(System.Func{System.String},System.Func{System.String},System.Func{`1,System.Int32},System.Action{`1,System.Int32},System.Int32,System.Int32,System.String)">
            <summary>Adds a numeric field to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddNumberField(System.Func{System.String},System.Func{System.String},System.Func{`1,System.Single},System.Action{`1,System.Single},System.Single,System.Single,System.Single,System.String)">
            <summary>Adds a numeric field to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="min">The minimum allowed value.</param>
            <param name="max">The maximum allowed value.</param>
            <param name="interval">The interval of values that can be selected.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddKeyBinding(System.Func{System.String},System.Func{System.String},System.Func{`1,StardewModdingAPI.Utilities.KeybindList},System.Action{`1,StardewModdingAPI.Utilities.KeybindList},System.String)">
            <summary>Adds a key binding field to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddHorizontalRule">
            <summary>Adds some empty vertical space to the form.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddVerticalSpace">
            <summary>Adds some empty vertical space to the form.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddMultiPageLinkOption``1(System.Func{System.String},``0[],System.Func{``0,System.String},System.Func{``0,System.String},System.Func{System.Single,System.Int32})">
            <summary>Adds a multi-column list of checkbox options to the form.</summary>
            <typeparam name="TPage">The type of the object which represents the page.</typeparam>
            <param name="getOptionName">Gets the label text to show in the form.</param>
            <param name="pages">The page values.</param>
            <param name="getPageId">Gets the destination page ID.</param>
            <param name="getPageName">Gets the destination page name.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddMultiCheckboxOption``1(System.Func{System.String},``0[],System.Func{``0,System.Boolean},System.Action{``0,System.Boolean},System.Func{System.Single,System.Int32},System.Func{``0,System.String},System.Action{``0,System.Boolean})">
            <summary>Adds a multi-column list of checkbox options to the form.</summary>
            <typeparam name="TCheckbox">The type of the object which represents the page.</typeparam>
            <param name="getOptionName">Gets the label text to show in the form.</param>
            <param name="checkboxes">The checkbox values.</param>
            <param name="getCheckboxValue">Gets the checkbox value.</param>
            <param name="setCheckboxValue">Sets the checkbox value.</param>
            <param name="getColumnsFromWidth">Gets the number of columns based on the width of the menu.</param>
            <param name="getCheckboxLabel">Gets the display text to show for the checkbox.</param>
            <param name="onValueUpdated">A delegate to be called after values are changed.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.AddColorPicker(System.Func{System.String},System.Func{System.String},System.Func{`1,Microsoft.Xna.Framework.Color},System.Action{`1,Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Color,System.Boolean,System.UInt32,System.String)">
            <summary>Adds a color picking option to the form.</summary>
            <param name="getName">Gets the label text to show in the form.</param>
            <param name="getTooltip">Gets the tooltip text shown when the cursor hovers on the field.</param>
            <param name="getValue">Gets the current value from the mod config.</param>
            <param name="setValue">Sets a new value in the mod config.</param>
            <param name="fallback">A fallback value in case the user's input is invalid.</param>
            <param name="showAlpha">If GMCM Options is installed, show the alpha picker or not.</param>
            <param name="colorPickerStyle">GMCM Option's picker style.</param>
            <param name="id">An optional id for this field.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.SetTitleScreenOnlyForNextOptions(System.Boolean)">
            <summary>Sets whether the options registered after this point can only be edited from the title screen.</summary>
            <param name="titleScreenOnly">Whether the options can only be edited from the title screen.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
            <remarks>This lets you have different values per-field. Most mods should just set it once in <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.Register"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.OnFieldChanged(System.Action{System.String,System.Object})">
            <summary>Registers an action to invoke when a field's value is changed.</summary>
            <param name="action">Whether the field is enabled.</param>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.GetConfig">
            <summary>Get the current config model.</summary>
            <returns>The <typeparamref name="TConfig"/> model.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.ResetConfig">
            <summary>Reset the config model to the default values.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.SaveAndApply">
            <summary>Save and apply the current config model.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.GenericModConfigMenuIntegration`2.Unregister">
            <summary>Unregisters the mod config.</summary>
            <returns>The <typeparamref name="TGenericModConfigMenu"/> instance.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi">
            <summary>The API provided by Generic Mod Config Menu.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)">
            <summary>Register a mod whose config can be edited through the UI.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="reset">Reset the mod's config to its default values.</param>
            <param name="save">Save the mod's current config to the <c>config.json</c> file.</param>
            <param name="titleScreenOnly">Whether the options can only be edited from the title screen.</param>
            <remarks>
                Each mod can only be registered once, unless it's deleted via <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Unregister(StardewModdingAPI.IManifest)"/> before calling this
                again. Must be called before any method below.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Unregister(StardewModdingAPI.IManifest)">
            <summary>Remove a mod from the config UI and delete all its options and pages.</summary>
            <param name="mod">The mod's manifest.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddSectionTitle(StardewModdingAPI.IManifest,System.Func{System.String},System.Func{System.String})">
            <summary>Add a section title at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="text">The title text shown in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the title, or <c>null</c> to disable the
                tooltip.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddParagraph(StardewModdingAPI.IManifest,System.Func{System.String})">
            <summary>Add a paragraph of text at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="text">The paragraph text to display.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddImage(StardewModdingAPI.IManifest,System.Func{Microsoft.Xna.Framework.Graphics.Texture2D},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Int32)">
            <summary>Add an image at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="texture">The image texture to display.</param>
            <param name="texturePixelArea">The pixel area within the texture to display, or <c>null</c> to show the entire image.</param>
            <param name="scale">The zoom factor to apply to the image.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddBoolOption(StardewModdingAPI.IManifest,System.Func{System.Boolean},System.Action{System.Boolean},System.Func{System.String},System.Func{System.String},System.String)">
            <summary>Add a boolean option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddNumberOption(StardewModdingAPI.IManifest,System.Func{System.Int32},System.Action{System.Int32},System.Func{System.String},System.Func{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Func{System.Int32,System.String},System.String)">
            <summary>Add an integer option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="min">The minimum allowed value, or <c>null</c> to allow any.</param>
            <param name="max">The maximum allowed value, or <c>null</c> to allow any.</param>
            <param name="interval">The interval of values that can be selected.</param>
            <param name="formatValue">Get the display text to show for a value, or <c>null</c> to show the number as-is.</param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddNumberOption(StardewModdingAPI.IManifest,System.Func{System.Single},System.Action{System.Single},System.Func{System.String},System.Func{System.String},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Func{System.Single,System.String},System.String)">
            <summary>Add a float option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="min">The minimum allowed value, or <c>null</c> to allow any.</param>
            <param name="max">The maximum allowed value, or <c>null</c> to allow any.</param>
            <param name="interval">The interval of values that can be selected.</param>
            <param name="formatValue">Get the display text to show for a value, or <c>null</c> to show the number as-is.</param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddTextOption(StardewModdingAPI.IManifest,System.Func{System.String},System.Action{System.String},System.Func{System.String},System.Func{System.String},System.String[],System.Func{System.String,System.String},System.String)">
            <summary>Add a string option at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="allowedValues">The values that can be selected, or <c>null</c> to allow any.</param>
            <param name="formatAllowedValue">
                Get the display text to show for a value from <paramref name="allowedValues"/>, or
                <c>null</c> to show the values as-is.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddKeybind(StardewModdingAPI.IManifest,System.Func{StardewModdingAPI.SButton},System.Action{StardewModdingAPI.SButton},System.Func{System.String},System.Func{System.String},System.String)">
            <summary>Add a key binding at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddKeybindList(StardewModdingAPI.IManifest,System.Func{StardewModdingAPI.Utilities.KeybindList},System.Action{StardewModdingAPI.Utilities.KeybindList},System.Func{System.String},System.Func{System.String},System.String)">
            <summary>Add a key binding list at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="getValue">Get the current value from the mod config.</param>
            <param name="setValue">Set a new value in the mod config.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddPage(StardewModdingAPI.IManifest,System.String,System.Func{System.String})">
            <summary>
                Start a new page in the mod's config UI, or switch to that page if it already exists. All options registered
                after this will be part of that page.
            </summary>
            <param name="mod">The mod's manifest.</param>
            <param name="pageId">The unique page ID.</param>
            <param name="pageTitle">The page title shown in its UI, or <c>null</c> to show the <paramref name="pageId"/> value.</param>
            <remarks>
                You must also call <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddPageLink(StardewModdingAPI.IManifest,System.String,System.Func{System.String},System.Func{System.String})"/> to make the page accessible. This is only needed to set up a
                multi-page config UI. If you don't call this method, all options will be part of the mod's main config UI instead.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddPageLink(StardewModdingAPI.IManifest,System.String,System.Func{System.String},System.Func{System.String})">
            <summary>Add a link to a page added via <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddPage(StardewModdingAPI.IManifest,System.String,System.Func{System.String})"/> at the current position in the form.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="pageId">The unique ID of the page to open when the link is clicked.</param>
            <param name="text">The link text shown in the form.</param>
            <param name="tooltip">The tooltip text shown when the cursor hovers on the link, or <c>null</c> to disable the tooltip.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.AddComplexOption(StardewModdingAPI.IManifest,System.Func{System.String},System.Action{Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2},System.Func{System.String},System.Action,System.Action,System.Action,System.Action,System.Action,System.Action,System.Func{System.Int32},System.String)">
            <summary>Add an option at the current position in the form using custom rendering logic.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="name">The label text to show in the form.</param>
            <param name="draw">
                Draw the option in the config UI. This is called with the sprite batch being rendered and the pixel
                position at which to start drawing.
            </param>
            <param name="tooltip">
                The tooltip text shown when the cursor hovers on the field, or <c>null</c> to disable the
                tooltip.
            </param>
            <param name="beforeMenuOpened">A callback raised just before the menu containing this option is opened.</param>
            <param name="beforeSave">
                A callback raised before the form's current values are saved to the config (i.e. before the
                <c>save</c> callback passed to <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="afterSave">
                A callback raised after the form's current values are saved to the config (i.e. after the
                <c>save</c> callback passed to <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="beforeReset">
                A callback raised before the form is reset to its default values (i.e. before the
                <c>reset</c> callback passed to <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="afterReset">
                A callback raised after the form is reset to its default values (i.e. after the <c>reset</c>
                callback passed to <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>).
            </param>
            <param name="beforeMenuClosed">A callback raised just before the menu containing this option is closed.</param>
            <param name="height">
                The pixel height to allocate for the option in the form, or <c>null</c> for a standard input-sized
                option. This is called and cached each time the form is opened.
            </param>
            <param name="fieldId">
                The unique field ID for use with <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})"/>, or <c>null</c> to auto-generate a
                randomized ID.
            </param>
            <remarks>
                The custom logic represented by the callback parameters is responsible for managing its own state if needed.
                For example, you can store state in a static field or use closures to use a state variable.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.SetTitleScreenOnlyForNextOptions(StardewModdingAPI.IManifest,System.Boolean)">
            <summary>Set whether the options registered after this point can only be edited from the title screen.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="titleScreenOnly">Whether the options can only be edited from the title screen.</param>
            <remarks>This lets you have different values per-field. Most mods should just set it once in <see cref="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.Register(StardewModdingAPI.IManifest,System.Action,System.Action,System.Boolean)"/>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OnFieldChanged(StardewModdingAPI.IManifest,System.Action{System.String,System.Object})">
            <summary>Register a method to notify when any option registered by this mod is edited through the config UI.</summary>
            <param name="mod">The mod's manifest.</param>
            <param name="onChange">The method to call with the option's unique field ID and new value.</param>
            <remarks>
                Options use a randomized ID by default; you'll likely want to specify the <c>fieldId</c> argument when adding
                options if you use this.
            </remarks>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.OpenModMenu(StardewModdingAPI.IManifest)">
            <summary>Open the config UI for a specific mod.</summary>
            <param name="mod">The mod's manifest.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.GenericModConfigMenu.IGenericModConfigMenuApi.TryGetCurrentMenu(StardewModdingAPI.IManifest@,System.String@)">
            <summary>Get the currently-displayed mod config menu, if any.</summary>
            <param name="mod">The manifest of the mod whose config menu is being shown, or <c>null</c> if not applicable.</param>
            <param name="page">
                The page ID being shown for the current config menu, or <c>null</c> if not applicable. This may be
                <c>null</c> even if a mod config menu is shown (e.g. because the mod doesn't have pages).
            </param>
            <returns>Returns whether a mod config menu is being shown.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.ModIntegration`1">
            <summary>The base implementation for a mod integration.</summary>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
            <typeparam name="TIntegration">The <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/> type inheriting from this class.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.#ctor(System.String,System.String,System.String,StardewModdingAPI.IModRegistry)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/> class.</summary>
            <param name="uniqueId">The mod's unique ID.</param>
            <param name="name">A human-readable name for the mod.</param>
            <param name="minVersion">The minimum version of the mod that's supported.</param>
            <param name="registry">An API for fetching metadata about loaded mods.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.Instance">
            <summary>Gets the singleton <typeparamref name="TIntegration"/> instance for this <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/>.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.IsValueCreated">
            <summary>Gets a value indicating whether an instance has been created for the singleton <typeparamref name="TIntegration"/> class.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.ModName">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.ModId">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.IsRegistered">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`1.ModRegistry">
            <summary>Gets aPI for fetching metadata about loaded mods.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.DaLion#Shared#Integrations#IModIntegration#Register">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.RegisterImpl">
            <inheritdoc cref="M:DaLion.Shared.Integrations.IModIntegration.Register"/>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.TryGetApi``1(``0@)">
            <summary>Try to get an API for the mod.</summary>
            <typeparam name="TApi">The API type.</typeparam>
            <param name="api">The API instance.</param>
            <returns><see langword="true"/> if an api was retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.AssertLoaded">
            <summary>Assert that the integration is loaded.</summary>
            <exception cref="T:System.InvalidOperationException">The integration isn't loaded.</exception>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`1.AssertRegistered">
            <summary>Assert that the integration is registered.</summary>
            <exception cref="T:System.InvalidOperationException">The integration isn't registered.</exception>
        </member>
        <member name="T:DaLion.Shared.Integrations.ModIntegration`2">
            <summary>The base implementation for a mod integration.</summary>
            <typeparam name="TIntegration">The <see cref="T:DaLion.Shared.Integrations.ModIntegration`1"/> type inheriting from this class.</typeparam>
            <typeparam name="TApi">The API type.</typeparam>
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`2.#ctor(System.String,System.String,System.String,StardewModdingAPI.IModRegistry)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Integrations.ModIntegration`2"/> class.</summary>
            <param name="uniqueId">The mod's unique ID.</param>
            <param name="name">A human-readable name for the mod.</param>
            <param name="minVersion">The minimum version of the mod that's supported.</param>
            <param name="modRegistry">An API for fetching metadata about loaded mods.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`2.ModApi">
            <summary>Gets the mod's public API.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`2.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Integrations.ModIntegration`2.IsRegistered">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`2.AssertLoaded">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Integrations.ModIntegration`2.AssertRegistered">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.CurrencyType">
            <summary>
            The various currency types supported by <see cref="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateCurrencyIngredient(DaLion.Shared.Integrations.BetterCrafting.CurrencyType,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.Money">
            <summary>
            The player's gold.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.FestivalPoints">
            <summary>
            The player's earned points at the current festival. This should likely
            never actually be used, since players can't craft while they're at a
            festival in the first place.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.ClubCoins">
            <summary>
            The player's casino points.
            </summary>
        </member>
        <member name="F:DaLion.Shared.Integrations.BetterCrafting.CurrencyType.QiGems">
            <summary>
            The player's Qi Gems.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider">
            <summary>
            An <c>IInventoryProvider</c> is used by Better Crafting to discover and
            interact with various item storages in the game.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.IsValid(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
             <summary>
             Check to see if this object is valid for inventory operations.
            
             If location is null, it should not be considered when determining
             the validity of the object.
            
             </summary>
             <param name="obj">the object.</param>
             <param name="location">the map where the object is.</param>
             <param name="who">the player accessing the inventory, or null if no player is involved.</param>
             <returns>Whether or not the object is valid.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.CanInsertItems(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Check to see if items can be inserted into this object.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.CanExtractItems(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Check to see if items can be extracted from this object.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetMultiTileRegion(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            For objects larger than a single tile on the map, return the rectangle representing
            the object. For single tile objects, return null.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetTilePosition(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Return the real position of the object. If the object has no position, returns null.
            For multi-tile objects, this should return the "main" object if there is one.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetMutex(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Get the NetMutex that locks the object for multiplayer synchronization. This method must
            return a mutex. If null is returned, the object will be skipped.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.IsMutexRequired(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Whether or not a mutex is required for interacting with this object's inventory.
            You should always use a mutex to ensure items are handled safely with multiplayer,
            but in case you're doing something exceptional and Better Crafting should not
            worry about locking, you can explicitly disable mutex handling.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetItems(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Get a list of items in the object's inventory, for modification or viewing. Assume that
            anything using this list will use GetMutex() to lock the inventory before modifying.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.IsItemValid(System.Object,StardewValley.GameLocation,StardewValley.Farmer,StardewValley.Item)">
            <summary>
            Check to see if a specific item is allowed to be stored in the object's inventory.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
            <param name="item">the item we're checking.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.CleanInventory(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Clean the inventory of the object. This is for removing null entries, organizing, etc.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider.GetActualCapacity(System.Object,StardewValley.GameLocation,StardewValley.Farmer)">
            <summary>
            Get the actual inventory capacity of the object's inventory. New items may be added to the
            GetItems() list up until this count.
            </summary>
            <param name="obj">the object.</param>
            <param name="location">the map where the object is.</param>
            <param name="who">the player accessing the inventory, or null if no player is involved.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IInventory">
            <summary>
            An <c>IInventory</c> represents an item storage that
            Better Crafting is interacting with, whether by extracting
            items or inserting them.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Object">
            <summary>
            Gets the object that has inventory.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Location">
            <summary>
            GEts where this object is located, if a location is relevant.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Player">
            <summary>
            Gets the player accessing the inventory, if a player is involved.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IInventory.Mutex">
            <summary>
            Gets the NetMutex for this object, which should be locked before
            using it. If there is no mutex, then we apparently don't
            need to worry about that.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.IsLocked">
            <summary>
            Whether or not the object is locked and ready for read/write usage.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.IsValid">
            <summary>
            Whether or not the object is a valid inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.CanInsertItems">
            <summary>
            Whether or not we can insert items into this inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.CanExtractItems">
            <summary>
            Whether or not we can extract items from this inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetMultiTileRegion">
            <summary>
            For multi-tile inventories, the region that this inventory takes
            up in the world. Only rectangular multi-tile inventories are
            supported, and this is used primarily for discovering connections.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetTilePosition">
            <summary>
            Get the tile position of this object in the world, if it has one.
            For multi-tile inventories, this should be the primary tile if
            one exists.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetItems">
            <summary>
            Get this object's inventory as a list of items. May be null if
            there is an issue accessing the object's inventory.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.IsItemValid(StardewValley.Item)">
            <summary>
            Check to see if a specific item is allowed to be stored in the
            object's inventory.
            </summary>
            <param name="item">The item we're checking.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.CleanInventory">
            <summary>
            Attempt to clean the object's inventory. This should remove null
            entries, and run any other necessary logic.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IInventory.GetActualCapacity">
            <summary>
            Get the number of item slots in the object's inventory. When adding
            items to the inventory, we will never extend the list beyond this
            number of entries.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient">
             <summary>
             An <c>IIngredient</c> represents a single ingredient used when crafting a
             recipe. An ingredient can be an item, a currency, or anything else.
            
             The API provides methods for getting basic item and currency ingredients,
             so you need not use this unless you're doing something fancy.
             </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SupportsQuality">
            <summary>
            Gets a value indicating whether gets whether or not this <c>IIngredient</c> supports quality control
            options, including using low quality first and limiting the maximum
            quality to use.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.DisplayName">
            <summary>
            Gets the name of this ingredient to be displayed in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Texture">
            <summary>
            Gets the texture to use when drawing this ingredient in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SourceRectangle">
            <summary>
            Gets the source rectangle to use when drawing this ingredient in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Quantity">
            <summary>
            Gets the amount of this ingredient required to perform a craft.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.GetAvailableQuantity(StardewValley.Farmer,System.Collections.Generic.IList{StardewValley.Item},System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32)">
            <summary>
            Determine how much of this ingredient is available for crafting both
            in the player's inventory and in the other inventories.
            </summary>
            <param name="who">The farmer performing the craft.</param>
            <param name="items">A list of all available <see cref="T:StardewValley.Item"/>s across
            all available <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/> instances. If you only support
            consuming ingredients from certain <c>IInventory</c> types, you should
            not use this value and instead iterate over the inventories. Please
            note that this does <b>not</b> include the player's inventory.</param>
            <param name="inventories">All the available inventories.</param>
            <param name="maxQuality">The maximum item quality we are allowed to
            count. This cannot be ignored unless <see cref="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SupportsQuality"/>
            returns <c>false</c>.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Consume(StardewValley.Farmer,System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)">
            <summary>
            Consume this ingredient out of the player's inventory and the other
            available inventories.
            </summary>
            <param name="who">The farmer performing the craft.</param>
            <param name="inventories">All the available inventories.</param>
            <param name="maxQuality">The maximum item quality we are allowed to
            count. This cannot be ignored unless <see cref="P:DaLion.Shared.Integrations.BetterCrafting.IIngredient.SupportsQuality"/>
            returns <c>false</c>.</param>
            <param name="lowQualityFirst">Whether or not we should make an effort
            to consume lower quality ingredients before consuming higher quality
            ingredients.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent">
            <summary>
            This event is dispatched by Better Crafting whenever a player performs a
            craft, and may be fired multiple times in quick succession if a player is
            performing bulk crafting.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Player">
            <summary>
            Gets the player performing the craft.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Item">
            <summary>
            Gets or sets the item being crafted, may be null depending on the recipe.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Menu">
            <summary>
            Gets the <c>BetterCraftingPage</c> menu instance that the player is
            crafting from.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Cancel">
            <summary>
            Cancel the craft, marking it as a failure. The ingredients will not
            be consumed and the player will not receive the item.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent.Complete">
            <summary>
            Complete the craft, marking it as a success. The ingredients will be
            consumed and the player will receive the item, if there is one.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe">
            <summary>
            An <c>IRecipe</c> represents a single crafting recipe, though it need not
            be associated with a vanilla <see cref="T:StardewValley.CraftingRecipe"/>.
            Recipes usually produce <see cref="T:StardewValley.Item"/>s, but they are not required
            to do so.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.SortValue">
            <summary>
            Gets an additional sorting value to apply to recipes in the Better Crafting
            menu. Applied before other forms of sorting.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Name">
            <summary>
            Gets the internal name of the recipe. For standard recipes, this matches the
            name of the recipe used in the player's cookingRecipes / craftingRecipes
            dictionaries. For non-standard recipes, this can be anything as long as
            it's unique, and it's recommended to prefix the names with your mod's
            unique ID to ensure uniqueness.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.DisplayName">
            <summary>
            Gets a name displayed to the user.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Description">
            <summary>
            Gets an optional description of the recipe displayed on its tooltip.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.CraftingRecipe">
            <summary>
            Gets the vanilla <c>CraftingRecipe</c> instance for this recipe, if one
            exists. This may be used for interoperability with some other
            mods, but is not required.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.HasRecipe(StardewValley.Farmer)">
            <summary>
            Whether or not the player knows this recipe.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GetTimesCrafted(StardewValley.Farmer)">
            <summary>
            How many times the player has crafted this recipe. If advanced crafting
            information is enabled, and this value is non-zero, it will be
            displayed on recipe tooltips.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Texture">
            <summary>
            Gets the texture to use when drawing this recipe in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.SourceRectangle">
            <summary>
            Gets the source rectangle to use when drawing this recipe in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GridHeight">
            <summary>
            Gets how tall this recipe should appear in the menu, in grid squares.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GridWidth">
            <summary>
            Gets how wide this recipe should appear in the menu, in grid squares.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.QuantityPerCraft">
            <summary>
            Gets the quantity of item produced every time this recipe is crafted.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Ingredients">
            <summary>
            Gets the ingredients used by this recipe.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipe.Stackable">
            <summary>
            Gets a value indicating whether gets whether or not the item created by this recipe is stackable, and thus
            eligible for bulk crafting.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.CanCraft(StardewValley.Farmer)">
            <summary>
            Check to see if the given player can currently craft this recipe. This
            method is suitable for checking external conditions. For example, the
            add-on for crafting buildings from the crafting menu uses this to check
            that the current <see cref="T:StardewValley.GameLocation"/> allows building.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.GetTooltipExtra(StardewValley.Farmer)">
            <summary>
            An optional, extra string to appear on item tooltips. This can be used
            for displaying error messages to the user, or anything else that would
            be relevant. For example, the add-on for crafting buildings uses this
            to display error messages telling users why they are unable to craft
            a building, if they cannot.
            </summary>
            <param name="who">The player we're asking about.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.CreateItem">
            <summary>
            Create an instance of the Item this recipe crafts, if this recipe
            crafts an item. Returning null is perfectly acceptable.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipe.PerformCraft(DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent)">
            <summary>
            This method is called when performing a craft, and can be used to
            perform asynchronous actions or other additional logic as required.
            While crafting is taking place, Better Crafting will hold locks on
            every inventory involved. You should ideally do as little work
            here as possible.
            </summary>
            <param name="evt">Details about the event, and methods for telling
            Better Crafting when the craft has succeeded or failed.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider">
            <summary>
            Better Crafting uses <c>IRecipeProvider</c> to discover crafting recipes
            for display in the menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.RecipePriority">
            <summary>
            Gets the priority of this recipe provider, for sorting purposes.
            When handling CraftingRecipe instances, the first provider
            to return a result is used.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.CacheAdditionalRecipes">
            <summary>
            Gets a value indicating whether gets whether or not additional recipes from this provider should be
            cached. If the list should be updated every time the player
            opens the menu, this should return false.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.GetRecipe(StardewValley.CraftingRecipe)">
            <summary>
            Get an <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> wrapper for a <see cref="T:StardewValley.CraftingRecipe"/>.
            </summary>
            <param name="recipe">The vanilla <c>CraftingRecipe</c> to wrap.</param>
            <returns>An IRecipe wrapper, or null if this provider does
            not handle this recipe.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider.GetAdditionalRecipes(System.Boolean)">
            <summary>
            Get any additional recipes in IRecipe form. Additional recipes
            are those recipes not included in the `CraftingRecipe.cookingRecipes`
            and `CraftingRecipe.craftingRecipes` objects.
            </summary>
            <param name="cooking">Whether we want cooking recipes or crafting recipes.</param>
            <returns>An enumeration of this provider's additional recipes, or null.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu">
            <summary>
            This interface contains a few basic properties on the Better Crafting
            menu that may be useful for other mods.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Menu">
            <summary>
            Gets the <see cref="T:StardewValley.Menus.IClickableMenu"/> instance for this menu. This is the
            same object, but included for convenience due to how API proxying works.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Cooking">
            <summary>
            Gets a value indicating whether or not this crafting menu is for cooking. If this is
            false, then the menu is for crafting recipes.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Standalone">
            <summary>
            Gets a value indicating whether whether or not this is a standalone menu. If this is false,
            this menu is likely contained in <see cref="T:StardewValley.Menus.GameMenu"/>.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Editing">
            <summary>
            Gets a value indicating whether whether or not the user is currently editing their categories.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.Working">
            <summary>
            Gets a value indicating whether whether or not the menu is actively crafting something. This
            will only return true when a craft is happening, or when the
            menu is waiting for an asynchronous craft to return.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.ActiveRecipe">
            <summary>
            Gets get the current recipe. This is normally the recipe that the
            player's cursor is hovering over, but when performing a craft
            or when the bulk crafting menu is open, it will return the
            relevant recipe.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.ToggleEditMode">
            <summary>
            Calling this method will toggle edit mode, as though the user
            clicked the button themselves.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.GetListedRecipes">
            <summary>
            Get a list of specific recipes that are to be displayed in the
            crafting menu. If this list is <c>null</c>, all recipes will be
            displayed to the user.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingMenu.UpdateListedRecipes(System.Collections.Generic.IEnumerable{System.String})">
             <summary>
             Set a new list of specific recipes that are to be displayed in the
             crafting menu. Note: If the user does not know these recipes, they
             will not be displayed even if they're in this list.
            
             Set the list to <c>null</c> to display all recipes.
             </summary>
             <param name="recipes">The list of recipes that should be displayed.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IPopulateContainersEvent">
            <summary>
            This event is emitted by <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting"/> whenever a new
            Better Crafting menu is opened, and serves to allow other mods to add
            or remove specific containers from a menu.
            </summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.BetterCrafting.IPopulateContainersEvent.Menu">
            <summary>
            Gets the relevant Better Crafting menu.
            </summary>
        </member>
        <member name="E:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.MenuPopulateContainers">
            <summary>
            This event is fired whenever a new Better Crafting menu is opened,
            allowing other mods to manipulate the list of containers.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.OpenCraftingMenu(System.Boolean,System.Boolean,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Boolean,System.Collections.Generic.IList{System.Tuple{System.Object,StardewValley.GameLocation}},System.Collections.Generic.IList{System.String})">
             <summary>
             Try to open the Better Crafting menu. This may fail if there is another
             menu open that cannot be replaced.
            
             If opening the menu from an object in the world, such as a workbench,
             its location and tile position can be provided for automatic detection
             of nearby chests.
            
             Better Crafting has its own handling of mutexes, so please do not worry
             about locking Chests before handing them off to the menu.
            
             When discovering additional containers, Better Crafting scans all tiles
             around each of its existing known containers. If a location and position
             for the menu source is provided, the tiles around that position will
             be scanned as well.
            
             Discovery depends on the user's settings, though at a minimum a 3x3 area
             will be scanned to mimic the scanning radius of the vanilla workbench.
             </summary>
             <param name="cooking">If true, open the cooking menu. If false, open the crafting menu.</param>
             <param name="silent_open">If true, do not make a sound upon opening the menu.</param>
             <param name="location">The map the associated object is in, or null if there is no object.</param>
             <param name="position">The tile position the associated object is at, or null if there is no object.</param>
             <param name="area">The tile area the associated object covers, or null if there is no object or if the object only covers a single tile.</param>
             <param name="discover_containers">If true, attempt to discover additional material containers.</param>
             <param name="containers">An optional list of containers to draw extra crafting materials from.</param>
             <param name="listed_recipes">An optional list of recipes by name. If provided, only these recipes will be listed in the crafting menu.</param>
             <returns>Whether or not the menu was opened successfully.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.GetMenuType">
            <summary>
            Return the Better Crafting menu's type. In case you want to do
            spooky stuff to it, I guess.
            </summary>
            <returns>The BetterCraftingMenu type.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.GetActiveMenu">
            <summary>
            Get the currently open Better Crafting menu. This may be <c>null</c> if
            the menu is still opening.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.AddRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
             <summary>
             Register a recipe provider with Better Crafting. Calling this
             will also invalidate the recipe cache.
            
             If the recipe provider was already registered, this does nothing.
             </summary>
             <param name="provider">The recipe provider to add.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.RemoveRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
             <summary>
             Unregister a recipe provider. Calling this will also invalidate
             the recipe cache.
            
             If the recipe provider was not registered, this does nothing.
             </summary>
             <param name="provider">The recipe provider to remove.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.InvalidateRecipeCache">
            <summary>
            Invalidate the recipe cache. You should call this if your recipe
            provider ever adds new recipes after registering it.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.GetRecipes(System.Boolean)">
            <summary>
            Get all known recipes from all providers.
            </summary>
            <param name="cooking">If true, return cooking recipes. If false, return
            crafting recipes.</param>
            <returns>A collection of the recipes.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateRecipeWithIngredients(StardewValley.CraftingRecipe,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IIngredient},System.Action{DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent})">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> that gets its properties from an
            existing <see cref="T:StardewValley.CraftingRecipe"/> but that uses different
            <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="recipe">The <see cref="T:StardewValley.CraftingRecipe"/> to use
            as a base.</param>
            <param name="ingredients">An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s
            the recipe should consume.</param>
            <param name="onPerformCraft">An optional event handler to perform
            additional logic when the item is crafted.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateBaseIngredient(System.Int32,System.Int32)">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches an item by ID
            and that consumes an exact quantity.
            </summary>
            <param name="item">The item ID to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateMatcherIngredient(System.Func{StardewValley.Item,System.Boolean},System.Int32,System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches items using a
            function and that consumes an exact quantity.
            </summary>
            <param name="matcher">The function to check items.</param>
            <param name="quantity">The quantity to consume.</param>
            <param name="displayName">The name to display for the ingredient.</param>
            <param name="texture">The texture to display the ingredient with.</param>
            <param name="source">The source rectangle of the texture to display.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateCurrencyIngredient(DaLion.Shared.Integrations.BetterCrafting.CurrencyType,System.Int32)">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches a specific
            currency and consumes an exact quantity.
            </summary>
            <param name="type">The currency to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateErrorIngredient">
            <summary>
            Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that does not match anything
            but requires a quantity of one, thus always preventing a recipe
            from being crafted. It displays as an error item in the
            ingredients list.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.ConsumeItems(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Func{StardewValley.Item,System.Boolean},System.Int32}},StardewValley.Farmer,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)">
            <summary>
            Consume matching items from a player, and also from a set of
            <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/> instances. This is a helper method for
            building custom <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="items">An enumeration of tuples where the function
            matches items, and the integer is the quantity to consume.</param>
            <param name="who">The player to consume items from, if any. Items
            are consumed from the player's inventory first.</param>
            <param name="inventories">An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/>
            instances to consume items from, such as the one passed to
            <see cref="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Consume(StardewValley.Farmer,System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)"/>.</param>
            <param name="maxQuality">The maximum quality to consume.</param>
            <param name="lowQualityFirst">Whether or not to consume low quality
            items first.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.CreateDefaultCategory(System.Boolean,System.String,System.Func{System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             Create a new default category for recipes. Every player will receive
             this category, but they may delete it or alter it as they see fit.
             </summary>
             <param name="cooking">If true, this category is added to cooking.
             Otherwise, crafting.</param>
             <param name="categoryId">An internal ID for the category. Make sure
             this is unique.</param>
             <param name="Name">A method returning a human-readable name to be
             displayed in the menu.</param>
             <param name="recipeNames">An enumeration of recipe names for recipes to
             display in the category.</param>
             <param name="iconRecipe">The name of a recipe to use as the category's
             default icon.</param>
            
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.AddRecipesToDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add recipes to a default category. If a player has modified their
            category, this will not affect them.
            </summary>
            <param name="cooking">If true, we alter a cooking category.
            Otherwise, crafting.</param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">An enummeration of recipe names for recipes to
            add to the category.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.RemoveRecipesFromDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Remove recipes from a default category. If a player has modified their
            category, this will not affect them.
            </summary>
            <param name="cooking">If true, we alter a cooking category.
            Otherwise, crafting.</param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">An enummeration of recipe names for recipes to
            remove from the category.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.RegisterInventoryProvider(System.Type,DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider)">
            <summary>
            Register an inventory provider with Better Crafting. Inventory
            providers are used for interfacing with chests and other objects
            in the world that contain items.
            </summary>
            <param name="type"></param>
            <param name="provider"></param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCrafting.UnregisterInventoryProvider(System.Type)">
            <summary>
            Unregister an inventory provider.
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi">
            <summary>The API provided by Better Crafting.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.OpenCraftingMenu(System.Boolean,System.Boolean,StardewValley.GameLocation,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Boolean,System.Collections.Generic.IList{System.Tuple{System.Object,StardewValley.GameLocation}},System.Collections.Generic.IList{System.String})">
            <summary>
                Try to open the Better Crafting menu. This may fail if there is another
                menu open that cannot be replaced.
                If opening the menu from an object in the world, such as a workbench,
                its location and tile position can be provided for automatic detection
                of nearby chests.
                Better Crafting has its own handling of mutexes, so please do not worry
                about locking Chests before handing them off to the menu.
                When discovering additional containers, Better Crafting scans all tiles
                around each of its existing known containers. If a location and position
                for the menu source is provided, the tiles around that position will
                be scanned as well.
                Discovery depends on the user's settings, though at a minimum a 3x3 area
                will be scanned to mimic the scanning radius of the vanilla workbench.
            </summary>
            <param name="cooking">If true, open the cooking menu. If false, open the crafting menu.</param>
            <param name="silent_open">If true, do not make a sound upon opening the menu.</param>
            <param name="location">The map the associated object is in, or null if there is no object.</param>
            <param name="position">The tile position the associated object is at, or null if there is no object.</param>
            <param name="area">
                The tile area the associated object covers, or null if there is no object or if the object only
                covers a single tile.
            </param>
            <param name="discover_containers">If true, attempt to discover additional material containers.</param>
            <param name="containers">An optional list of containers to draw extra crafting materials from.</param>
            <param name="listed_recipes">
                An optional list of recipes by name. If provided, only these recipes will be listed in the
                crafting menu.
            </param>
            <returns>Whether or not the menu was opened successfully.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.AddRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
            <summary>
                Register a recipe provider with Better Crafting. Calling this
                will also invalidate the recipe cache.
                If the recipe provider was already registered, this does nothing.
            </summary>
            <param name="provider">The recipe provider to add.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.RemoveRecipeProvider(DaLion.Shared.Integrations.BetterCrafting.IRecipeProvider)">
            <summary>
                Unregister a recipe provider. Calling this will also invalidate
                the recipe cache.
                If the recipe provider was not registered, this does nothing.
            </summary>
            <param name="provider">The recipe provider to remove.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.InvalidateRecipeCache">
            <summary>
                Invalidate the recipe cache. You should call this if your recipe
                provider ever adds new recipes after registering it.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.GetRecipes(System.Boolean)">
            <summary>
                Get all known recipes from all providers.
            </summary>
            <param name="cooking">
                If true, return cooking recipes. If false, return
                crafting recipes.
            </param>
            <returns>A collection of the recipes.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateRecipeWithIngredients(StardewValley.CraftingRecipe,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IIngredient},System.Action{DaLion.Shared.Integrations.BetterCrafting.IPerformCraftEvent})">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IRecipe"/> that gets its properties from an
                existing <see cref="T:StardewValley.CraftingRecipe"/> but that uses different
                <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="recipe">
                The <see cref="T:StardewValley.CraftingRecipe"/> to use
                as a base.
            </param>
            <param name="ingredients">
                An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s
                the recipe should consume.
            </param>
            <param name="onPerformCraft">
                An optional event handler to perform
                additional logic when the item is crafted.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateBaseIngredient(System.Int32,System.Int32)">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches an item by ID
                and that consumes an exact quantity.
            </summary>
            <param name="item">The item ID to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateCurrencyIngredient(DaLion.Shared.Integrations.BetterCrafting.CurrencyType,System.Int32)">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches a specific
                currency and consumes an exact quantity.
            </summary>
            <param name="type">The currency to match.</param>
            <param name="quantity">The quantity to consume.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateMatcherIngredient(System.Func{StardewValley.Item,System.Boolean},System.Int32,System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that matches items using a
                function and that consumes an exact quantity.
            </summary>
            <param name="matcher">The function to check items.</param>
            <param name="quantity">The quantity to consume.</param>
            <param name="displayName">The name to display for the ingredient.</param>
            <param name="texture">The texture to display the ingredient with.</param>
            <param name="source">The source rectangle of the texture to display.</param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateErrorIngredient">
            <summary>
                Create a simple <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/> that does not match anything
                but requires a quantity of one, thus always preventing a recipe
                from being crafted. It displays as an error item in the
                ingredients list.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.ConsumeItems(System.Collections.Generic.IEnumerable{System.ValueTuple{System.Func{StardewValley.Item,System.Boolean},System.Int32}},StardewValley.Farmer,System.Collections.Generic.IEnumerable{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)">
            <summary>
                Consume matching items from a player, and also from a set of
                <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/> instances. This is a helper method for
                building custom <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IIngredient"/>s.
            </summary>
            <param name="items">
                An enumeration of tuples where the function
                matches items, and the integer is the quantity to consume.
            </param>
            <param name="who">
                The player to consume items from, if any. Items
                are consumed from the player's inventory first.
            </param>
            <param name="inventories">
                An enumeration of <see cref="T:DaLion.Shared.Integrations.BetterCrafting.IInventory"/>
                instances to consume items from, such as the one passed to
                <see cref="M:DaLion.Shared.Integrations.BetterCrafting.IIngredient.Consume(StardewValley.Farmer,System.Collections.Generic.IList{DaLion.Shared.Integrations.BetterCrafting.IInventory},System.Int32,System.Boolean)"/>.
            </param>
            <param name="maxQuality">The maximum quality to consume.</param>
            <param name="lowQualityFirst">
                Whether or not to consume low quality
                items first.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.CreateDefaultCategory(System.Boolean,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
                Create a new default category for recipes. Every player will receive
                this category, but they may delete it or alter it as they see fit.
            </summary>
            <param name="cooking">
                If true, this category is added to cooking.
                Otherwise, crafting.
            </param>
            <param name="categoryId">
                An internal ID for the category. Make sure
                this is unique.
            </param>
            <param name="name">A human-readable name displayed in the menu.</param>
            <param name="recipeNames">
                An enumeration of recipe names for recipes to
                display in the category.
            </param>
            <param name="iconRecipe">
                The name of a recipe to use as the category's
                default icon.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.AddRecipesToDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Add recipes to a default category. If a player has modified their
                category, this will not affect them.
            </summary>
            <param name="cooking">
                If true, we alter a cooking category.
                Otherwise, crafting.
            </param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">
                An enumeration of recipe names for recipes to
                add to the category.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.RemoveRecipesFromDefaultCategory(System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Remove recipes from a default category. If a player has modified their
                category, this will not affect them.
            </summary>
            <param name="cooking">
                If true, we alter a cooking category.
                Otherwise, crafting.
            </param>
            <param name="categoryId">The ID of the category to alter.</param>
            <param name="recipeNames">
                An enumeration of recipe names for recipes to
                remove from the category.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.RegisterInventoryProvider(System.Type,DaLion.Shared.Integrations.BetterCrafting.IInventoryProvider)">
            <summary>
                Register an inventory provider with Better Crafting. Inventory
                providers are used for interfacing with chests and other objects
                in the world that contain items.
            </summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.BetterCrafting.IBetterCraftingApi.UnregisterInventoryProvider(System.Type)">
            <summary>
                Un-register an inventory provider.
            </summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.CustomOreNodes.ICustomOreNodesApi">
            <summary>The API provided by Custom Ore Nodes.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi">
            <summary>The API provided by Dynamic Game Assets.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.GetDGAItemId(System.Object)">
            <summary>
                Get the DGA item ID of this item, if it has one.
            </summary>
            <param name="item">The item to get the DGA item ID of.</param>
            <returns>The DGA item ID if it has one, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.SpawnDGAItem(System.String,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
                Spawn a DGA item, referenced with its full ID ("mod.id/ItemId").
                Some items, such as crafting recipes or crops, don't have an item representation.
            </summary>
            <param name="fullId">The full ID of the item to spawn.</param>
            <param name="color">The color of the item.</param>
            <returns>The DGA item if it exists, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.SpawnDGAItem(System.String)">
            <summary>
                Spawn a DGA item, referenced with its full ID ("mod.id/ItemId").
                Some items, such as crafting recipes or crops, don't have an item representation.
            </summary>
            <param name="fullId">The full ID of the item to spawn.</param>
            <returns>The DGA item if it exists, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.ListContentPacks">
            <summary>
                Gets the names of all installed packs.
            </summary>
            <returns>Array of all pack names.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.GetItemsByPack(System.String)">
            <summary>
                Gets all items provided by a pack.
            </summary>
            <param name="packname">The name of the pack.</param>
            <returns>Namespaced item names.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.GetAllItems">
            <summary>
                Gets all the items (namespaced names).
            </summary>
            <returns>A list of all items.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.DynamicGameAssets.IDynamicGameAssetsApi.AddEmbeddedPack(StardewModdingAPI.IManifest,System.String)">
            <summary>
                Register a DGA pack embedded in another mod.
                Needs the standard DGA fields in the manifest. (See documentation.)
                Probably shouldn't use config-schema.json for these, because if you do it will overwrite your mod's config.json.
            </summary>
            <param name="manifest">The mod manifest.</param>
            <param name="dir">The absolute path to the directory of the pack.</param>
        </member>
        <member name="T:DaLion.Shared.Integrations.JsonAssets.IJsonAssetsApi">
            <summary>The API provided by Json Assets.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.LoveOfCooking.ICookingSkillApi">
            <summary>The API provided by Love Of Cooking.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.LuckSkill.ILuckSkillApi">
            <summary>The API provided by Luck Skill mod.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.SpaceCore.ISpaceCoreApi">
            <summary>The API provided by SpaceCore.</summary>
        </member>
        <member name="T:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi">
            <summary>The API provided by Teh's Fishing Overhaul.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi.GetChanceForFish(StardewValley.Farmer)">
            <summary>
                Gets the chance that a fish would be caught. This does not take into account whether
                there are actually fish to catch at the <see cref="T:StardewValley.Farmer"/>'s location. If no fish
                can be caught, then the <see cref="T:StardewValley.Farmer"/> will always catch trash.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> catching the fish.</param>
            <returns>The chance a fish would be caught instead of trash.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi.GetChanceForTreasure(StardewValley.Farmer)">
            <summary>
                Gets the chance that treasure will be found during the fishing minigame.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> catching the treasure.</param>
            <returns>The chance for treasure to appear during the fishing minigame.</returns>
        </member>
        <member name="M:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi.ModifyChanceForFish(System.Func{StardewValley.Farmer,System.Double,System.Double})">
            <summary>
                Modifies the chance that a fish would be caught. The provided callback is invoked every
                time <see cref="M:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi.GetChanceForFish(StardewValley.Farmer)"/> is called to modify the resulting chance before
                it's returned. Modifiers are invoked in the order they are registered.
            </summary>
            <param name="chanceModifier">
                The chance modifier function. The input arguments are the <see cref="T:StardewValley.Farmer"/> and the
                calculated chance, and the return value is the modified chance.
            </param>
        </member>
        <member name="M:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi.ModifyChanceForTreasure(System.Func{StardewValley.Farmer,System.Double,System.Double})">
            <summary>
                Modifies the chance that treasure would be found while fishing. The provided callback
                is invoked every time <see cref="M:DaLion.Shared.Integrations.TehsFishingOverhaul.ISimplifiedFishingApi.GetChanceForTreasure(StardewValley.Farmer)"/> is called to modify the
                resulting chance before it's returned. Modifiers are invoked in the order they are
                registered.
            </summary>
            <param name="chanceModifier">
                The chance modifier function. The input arguments are the <see cref="T:StardewValley.Farmer"/> and the
                calculated chance, and the return value is the modified chance.
            </param>
        </member>
        <member name="T:DaLion.Shared.Integrations.IModIntegration">
            <summary>Handles integration with a given mod.</summary>
            <remarks>Original code by <see href="https://github.com/Pathoschild">Pathoschild</see>.</remarks>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.ModName">
            <summary>Gets a human-readable name for the mod.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.ModId">
            <summary>Gets the mod's unique ID.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.IsLoaded">
            <summary>Gets a value indicating whether the mod is available.</summary>
        </member>
        <member name="P:DaLion.Shared.Integrations.IModIntegration.IsRegistered">
            <summary>Gets a value indicating whether the integration has been registered.</summary>
        </member>
        <member name="M:DaLion.Shared.Integrations.IModIntegration.Register">
            <summary>Registers the integration and performs initial setup.</summary>
            <returns><see langword="true"/> if the registration was successful, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Integrations.WearMoreRings.IWearMoreRingsApi">
            <summary>The API provided by Wear More Rings.</summary>
        </member>
        <member name="T:DaLion.Shared.MathUtils">
            <summary>Provides generally useful methods.</summary>
        </member>
        <member name="M:DaLion.Shared.MathUtils.Sigmoid(System.Double)">
            <summary>Applies the <paramref name="value"/> to a sigmoid function.</summary>
            <param name="value">The desired value.</param>
            <returns>The value of the sigmoid at <paramref name="value"/>.</returns>
        </member>
        <member name="T:DaLion.Shared.Networking.Broadcaster">
            <summary>Provides methods for synchronous and asynchronous communication between remote online players.</summary>
        </member>
        <member name="F:DaLion.Shared.Networking.Broadcaster._helper">
            <summary> The <see cref="T:StardewModdingAPI.IMultiplayerHelper"/> API of the current<see cref= "T:StardewModdingAPI.IMod"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Networking.Broadcaster._modId">
            <summary>The unique ID of the active mod.</summary>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.#ctor(StardewModdingAPI.IMultiplayerHelper,System.String)">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Networking.Broadcaster"/> class.</summary>
            <param name="helper">The <see cref="T:StardewModdingAPI.IMultiplayerHelper"/> API of the current <see cref="T:StardewModdingAPI.IMod"/>.</param>
            <param name="modId">The unique ID of the active mod.</param>
        </member>
        <member name="P:DaLion.Shared.Networking.Broadcaster.ResponseReceived">
            <summary>Gets the cached the response from the latest asynchronous <see cref="T:System.Threading.Tasks.Task"/>.</summary>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.SendPublicChat(System.String,System.Boolean)">
            <summary>Sends a chat message to all peers.</summary>
            <param name="text">The chat text to send.</param>
            <param name="error">Whether to format the text as an error.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.SendPrivateChat(System.Int64,StardewValley.LocalizedContentManager.LanguageCode,System.String)">
            <summary>Sends a private message to the specified network peer.</summary>
            <param name="playerId">The player ID.</param>
            <param name="code">The <see cref="T:StardewValley.LocalizedContentManager.LanguageCode"/>.</param>
            <param name="text">The text to send.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.Broadcast(System.String,System.String)">
            <summary>Sends a synchronous <paramref name="message"/> to all online peers.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessagePeer(System.String,System.String,System.Int64)">
            <summary>Sends a synchronous <paramref name="message"/> to a specific network peer.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="playerId">The unique ID of the recipient.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessagePeer(System.String,System.String,System.Int64,System.String)">
            <summary>
                Sends a synchronous <paramref name="message"/> to a network peer that should be received by a specific
                mod.
            </summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="playerId">The unique ID of the recipient player.</param>
            <param name="modId">The unique ID of the recipient mod.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessageHost(System.String,System.String)">
            <summary>Sends a synchronous <paramref name="message"/> to the network host.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.MessageHost(System.String,System.String,System.String)">
            <summary>
                Sends a synchronous <paramref name="message"/> to the network host that should be received by a specific
                mod.
            </summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="modId">The unique ID of the recipient mod.</param>
        </member>
        <member name="M:DaLion.Shared.Networking.Broadcaster.RequestAsync(System.String,System.String,System.Int64)">
            <summary>Sends an asynchronous request to a network peer and await a response.</summary>
            <param name="message">The message to send.</param>
            <param name="messageType">The message type.</param>
            <param name="playerId">The unique ID of the recipient player.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that should resolve to the peer's response.</returns>
        </member>
        <member name="T:DaLion.Shared.Log">
            <summary>Simplified wrapper for SMAPI's <see cref="T:StardewModdingAPI.IMonitor"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Log._monitor">
            <inheritdoc cref="T:StardewModdingAPI.IMonitor"/>
        </member>
        <member name="M:DaLion.Shared.Log.Init(StardewModdingAPI.IMonitor)">
            <summary>Initializes the static instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging for a given module.</param>
        </member>
        <member name="M:DaLion.Shared.Log.D(System.String)">
            <summary>Logs a message as debug.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Log.T(System.String)">
            <summary>Logs a message as trace.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Log.I(System.String)">
            <summary>Logs a message as info.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Log.A(System.String)">
            <summary>Logs a message as alert.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Log.W(System.String)">
            <summary>Logs a message as warn.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Log.E(System.String)">
            <summary>Logs a message as error.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:DaLion.Shared.Log.V(System.String)">
            <inheritdoc cref="M:StardewModdingAPI.IMonitor.VerboseLog(System.String)"/>
        </member>
        <member name="M:DaLion.Shared.Log.Caller">
            <summary>Logs the caller method as Debug.</summary>
        </member>
        <member name="T:DaLion.Shared.MathConstants">
            <summary>Provides generally useful mathematical constants.</summary>
        </member>
        <member name="F:DaLion.Shared.MathConstants.SQRT2">
            <summary>The square-root of 2.</summary>
        </member>
        <member name="T:DaLion.Shared.Caching.IntervalMemoryCache`2">
            <summary>A memory cache with sliding expiry based on custom intervals, with no background processing.</summary>
            <typeparam name="TKey">The cache key type.</typeparam>
            <typeparam name="TValue">The cache value type.</typeparam>
            <remarks>
                   This is optimized for small caches that are reset relatively rarely. Each cache entry is marked as hot (accessed since the interval started) or stale.
                   When a new interval is started, stale entries are cleared and hot entries become stale.
                   Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.
            </remarks>
        </member>
        <member name="F:DaLion.Shared.Caching.IntervalMemoryCache`2._hotCache">
            <summary>The cached values that were accessed during the current interval.</summary>
        </member>
        <member name="F:DaLion.Shared.Caching.IntervalMemoryCache`2._staleCache">
            <summary>The cached values that will expire on the next interval.</summary>
        </member>
        <member name="M:DaLion.Shared.Caching.IntervalMemoryCache`2.GetOrSet(`0,System.Func{`1})">
            <summary>Get a value from the cache, fetching it first if needed.</summary>
            <param name="cacheKey">The unique key for the cached value.</param>
            <param name="get">A delegate for getting the latest data if it's not in the cache yet.</param>
            <returns>The cached value corresponding to the given <paramref name="cacheKey"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Caching.IntervalMemoryCache`2.StartNewInterval">
            <summary>Start a new cache interval, removing any stale entries.</summary>
        </member>
        <member name="T:DaLion.Shared.Reflection.Reflector">
            <summary>Provides delegates to inaccessible code.</summary>
            <remarks>Based on SMAPI's <see href="https://github.com/Pathoschild/SMAPI/blob/develop/src/SMAPI/Modules/Reflection/Reflector.cs">Reflector</see> class by Pathoschild.</remarks>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.NewCacheInterval">
            <summary>Starts a new cache interval, clearing stale reflection lookups.</summary>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldGetter``2(System.Object,System.String)">
            <summary>Gets a delegate which returns the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance which declares the field.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="instance">The instance which has the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldGetter``1(System.Type,System.String)">
            <summary>Gets a delegate which returns the value of a static field.</summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="type">The type which declares the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldGetter``1(System.String,System.String)">
            <summary>Gets a delegate which returns the value of a static field.</summary>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="typeName">The name of the type which declares the field.</param>
            <param name="fieldName">The field name.</param>
            <returns>A delegate for getting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundFieldSetter``2(System.Object,System.String)">
            <summary>Gets a delegate which sets the value of an instance field.</summary>
            <typeparam name="TInstance">The type of the instance which declares the field.</typeparam>
            <typeparam name="TField">The type of the field.</typeparam>
            <param name="instance">The instance which has the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldSetter``1(System.Type,System.String)">
            <summary>Gets a delegate which sets the value of a static field.</summary>
            <typeparam name="TField">The type that will be returned by the delegate.</typeparam>
            <param name="type">The type which declares the field.</param>
            <param name="name">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticFieldSetter``1(System.String,System.String)">
            <summary>Gets a delegate which sets the value of a static field.</summary>
            <typeparam name="TField">The type that will be returned by the delegate.</typeparam>
            <param name="typeName">The name of the type which declares the field.</param>
            <param name="fieldName">The field name.</param>
            <returns>A delegate for setting the field's value.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertyGetter``2(System.Object,System.String)">
            <summary>Gets a delegate which returns the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance which declares the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="instance">The instance which has the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertyGetter``1(System.Type,System.String)">
            <summary>Gets a delegate which returns the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="type">The type which declares the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertyGetter``1(System.String,System.String)">
            <summary>Gets a delegate which returns the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="typeName">The name of the type which declares the property.</param>
            <param name="propertyName">The property name.</param>
            <returns>A delegate to the property getter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundPropertySetter``2(System.Object,System.String)">
            <summary>Gets a delegate which sets the value of an instance property.</summary>
            <typeparam name="TInstance">The type of the instance which declares the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="instance">The instance which has the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertySetter``1(System.Type,System.String)">
            <summary>Gets a delegate which sets the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="type">The type which declares the property.</param>
            <param name="name">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticPropertySetter``1(System.String,System.String)">
            <summary>Gets a delegate which sets the value of a static property.</summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="typeName">The name of the type which declares the property.</param>
            <param name="propertyName">The property name.</param>
            <returns>A delegate to the property setter.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetUnboundMethodDelegate``1(System.Object,System.String)">
            <summary>Gets a delegate which calls an instance method.</summary>
            <typeparam name="TDelegate">
                A delegate type which mirrors the desired method signature and accepts the target
                instance type as the first parameter.</typeparam>
            <param name="instance">The instance which has the method.</param>
            <param name="name">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticMethodDelegate``1(System.Type,System.String)">
            <summary>Gets a delegate which calls a static method.</summary>
            <typeparam name="TDelegate">A delegate type which mirrors the desired method signature.</typeparam>
            <param name="type">The type which declares the method.</param>
            <param name="name">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetStaticMethodDelegate``1(System.String,System.String)">
            <summary>Gets a delegate which calls a static method.</summary>
            <typeparam name="TDelegate">A delegate type which mirrors the desired method signature.</typeparam>
            <param name="typeName">The name of the type which declares the method.</param>
            <param name="methodName">The method name.</param>
            <returns>A delegate to the method.</returns>
        </member>
        <member name="M:DaLion.Shared.Reflection.Reflector.GetCachedDelegate``1(System.String,System.Type,System.String,System.Boolean,System.Func{``0})">
            <summary>Retrieves an existing delegate instance from the cache, or caches a new instance.</summary>
            <typeparam name="TDelegate">The expected <see cref="T:System.Delegate"/> type.</typeparam>
            <param name="prefix">A letter or letters representing the member type (like 'm' for method).</param>
            <param name="type">The declaring type of the reflected member.</param>
            <param name="name">The member name.</param>
            <param name="isStatic">Whether the member is static.</param>
            <param name="fetch">Fetches a new value to cache.</param>
            <returns>The cached delegated.</returns>
        </member>
        <member name="T:DaLion.Shared.VectorUtils">
            <summary>Provides generally useful methods.</summary>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.UpVector">
            <summary>A unit vector pointing up.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing up.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.DownVector">
            <summary>A unit vector pointing down.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing down.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.RightVector">
            <summary>A unit vector pointing right.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing right.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.LeftVector">
            <summary>A unit vector pointing left.</summary>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> pointing left.</returns>
        </member>
        <member name="M:DaLion.Shared.VectorUtils.GetRelativeCursorDirection(DaLion.Shared.Enums.FacingDirection@)">
            <summary>
                Gets the unit vector which points towards the cursor's current position relative to the local player's
                position.
            </summary>
            <param name="direction">The corresponding <see cref="T:DaLion.Shared.Enums.FacingDirection"/> for the player to face the cursor.</param>
            <returns>A unit <see cref="T:Microsoft.Xna.Framework.Vector2"/> which points from the local player's position to the cursor's position.</returns>
        </member>
        <member name="T:DaLion.Shared.Watchers.DisposableWatcher">
            <summary>The base implementation for a disposable watcher.</summary>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="P:DaLion.Shared.Watchers.DisposableWatcher.IsDisposed">
            <summary>Gets a value indicating whether the watcher has been disposed.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.DisposableWatcher.Dispose">
            <summary>Stop watching the field and release all references.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.DisposableWatcher.AssertNotDisposed">
            <summary>Throw an exception if the watcher is disposed.</summary>
            <exception cref="T:System.ObjectDisposedException">The watcher is disposed.</exception>
        </member>
        <member name="T:DaLion.Shared.Watchers.ICollectionWatcher`1">
            <summary>A watcher which tracks changes to a <see cref="T:System.Collections.Generic.ICollection`1"/>.</summary>
            <typeparam name="TValue">The collection value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="P:DaLion.Shared.Watchers.ICollectionWatcher`1.Added">
            <summary>Gets the values added since the last reset.</summary>
        </member>
        <member name="P:DaLion.Shared.Watchers.ICollectionWatcher`1.Removed">
            <summary>Gets the values removed since the last reset.</summary>
        </member>
        <member name="T:DaLion.Shared.Watchers.IDictionaryWatcher`2">
            <summary>A watcher which tracks changes to a <see cref="T:System.Collections.Generic.IDictionary`2"/>.</summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="T:DaLion.Shared.Watchers.IValueWatcher`1">
            <summary>A watcher which tracks changes to a value.</summary>
            <typeparam name="TValue">The watched value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="P:DaLion.Shared.Watchers.IValueWatcher`1.PreviousValue">
            <summary>Gets the field value at the last reset.</summary>
        </member>
        <member name="P:DaLion.Shared.Watchers.IValueWatcher`1.CurrentValue">
            <summary>Gets the latest value.</summary>
        </member>
        <member name="T:DaLion.Shared.Watchers.IWatcher">
            <summary>A watcher which detects changes to something.</summary>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="P:DaLion.Shared.Watchers.IWatcher.Name">
            <summary>Gets a name which identifies what the watcher is watching, used for troubleshooting.</summary>
        </member>
        <member name="P:DaLion.Shared.Watchers.IWatcher.IsChanged">
            <summary>Gets a value indicating whether the watched value changed since the last reset.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.IWatcher.Update">
            <summary>Update the current value if needed.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.IWatcher.Reset">
            <summary>Set the current value as the baseline.</summary>
        </member>
        <member name="T:DaLion.Shared.Watchers.NetCollectionWatcher`1">
            <summary>A watcher which detects changes to a <see cref="T:Netcode.NetCollection`1"/>.</summary>
            <typeparam name="TValue">The value type within the collection.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetCollectionWatcher`1._field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetCollectionWatcher`1._added">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetCollectionWatcher`1._removed">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetCollectionWatcher`1.#ctor(System.String,Netcode.NetCollection{`0})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.NetCollectionWatcher`1"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The field to watch.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.NetCollectionWatcher`1.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetCollectionWatcher`1.IsChanged">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetCollectionWatcher`1.Added">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetCollectionWatcher`1.Removed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetCollectionWatcher`1.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetCollectionWatcher`1.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetCollectionWatcher`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetCollectionWatcher`1.OnValueAdded(`0)">
            <summary>A callback invoked when an entry is added to the collection.</summary>
            <param name="value">The added value.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetCollectionWatcher`1.OnValueRemoved(`0)">
            <summary>A callback invoked when an entry is removed from the collection.</summary>
            <param name="value">The added value.</param>
        </member>
        <member name="T:DaLion.Shared.Watchers.NetDictionaryWatcher`5">
            <summary>A watcher which detects changes to a <see cref="T:Netcode.NetDictionary`5"/>.</summary>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <typeparam name="TField">The net type equivalent to <typeparamref name="TValue"/>.</typeparam>
            <typeparam name="TSerialDict">The serializable dictionary type that can store the keys and values.</typeparam>
            <typeparam name="TSelf">The net field instance type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetDictionaryWatcher`5._field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetDictionaryWatcher`5._added">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetDictionaryWatcher`5._removed">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetDictionaryWatcher`5.#ctor(System.String,Netcode.NetDictionary{`0,`1,`2,`3,`4})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.NetDictionaryWatcher`5"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The field to watch.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.NetDictionaryWatcher`5.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetDictionaryWatcher`5.IsChanged">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetDictionaryWatcher`5.Added">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetDictionaryWatcher`5.Removed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetDictionaryWatcher`5.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetDictionaryWatcher`5.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetDictionaryWatcher`5.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetDictionaryWatcher`5.OnValueAdded(`0,`1)">
            <summary>A callback invoked when an entry is added to the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetDictionaryWatcher`5.OnValueRemoved(`0,`1)">
            <summary>A callback invoked when an entry is removed from the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="T:DaLion.Shared.Watchers.NetStringListWatcher">
            <summary>A watcher which detects changes to a <see cref="T:Netcode.NetStringList"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetStringListWatcher._field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetStringListWatcher._added">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetStringListWatcher._removed">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.#ctor(System.String,Netcode.NetList{System.String,Netcode.NetString})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.NetStringListWatcher"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The field to watch.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.NetStringListWatcher.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetStringListWatcher.IsChanged">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetStringListWatcher.Added">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetStringListWatcher.Removed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.OnArrayReplaced(Netcode.NetList{System.String,Netcode.NetString},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>A callback invoked when the value list is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="oldValues">The previous list of values.</param>
            <param name="newValues">The new list of values.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.OnElementChanged(Netcode.NetList{System.String,Netcode.NetString},System.Int32,System.String,System.String)">
            <summary>A callback invoked when an entry is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="index">The list index which changed.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.Add(System.String)">
            <summary>Track an added item.</summary>
            <param name="value">The value that was added.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetStringListWatcher.Remove(System.String)">
            <summary>Track a removed item.</summary>
            <param name="value">The value that was removed.</param>
        </member>
        <member name="T:DaLion.Shared.Watchers.NetIntListWatcher">
            <summary>A watcher which detects changes to a <see cref="T:Netcode.NetIntList"/>.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetIntListWatcher._field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetIntListWatcher._added">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetIntListWatcher._removed">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.#ctor(System.String,Netcode.NetList{System.Int32,Netcode.NetInt})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.NetIntListWatcher"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The field to watch.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.NetIntListWatcher.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetIntListWatcher.IsChanged">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetIntListWatcher.Added">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetIntListWatcher.Removed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.OnArrayReplaced(Netcode.NetList{System.Int32,Netcode.NetInt},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Int32})">
            <summary>A callback invoked when the value list is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="oldValues">The previous list of values.</param>
            <param name="newValues">The new list of values.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.OnElementChanged(Netcode.NetList{System.Int32,Netcode.NetInt},System.Int32,System.Int32,System.Int32)">
            <summary>A callback invoked when an entry is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="index">The list index which changed.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.Add(System.Int32)">
            <summary>Track an added item.</summary>
            <param name="value">The value that was added.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetIntListWatcher.Remove(System.Int32)">
            <summary>Track a removed item.</summary>
            <param name="value">The value that was removed.</param>
        </member>
        <member name="T:DaLion.Shared.Watchers.NetListWatcher`1">
            <summary>A watcher which detects changes to a <see cref="T:Netcode.NetList`2"/>.</summary>
            <typeparam name="TValue">The list value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetListWatcher`1._field">
            <summary>The field being watched.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetListWatcher`1._added">
            <summary>The pairs added since the last reset.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetListWatcher`1._removed">
            <summary>The pairs removed since the last reset.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.#ctor(System.String,Netcode.NetList{`0,Netcode.NetRef{`0}})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.NetListWatcher`1"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The field to watch.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.NetListWatcher`1.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetListWatcher`1.IsChanged">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetListWatcher`1.Added">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetListWatcher`1.Removed">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.OnArrayReplaced(Netcode.NetList{`0,Netcode.NetRef{`0}},System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>A callback invoked when the value list is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="oldValues">The previous list of values.</param>
            <param name="newValues">The new list of values.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.OnElementChanged(Netcode.NetList{`0,Netcode.NetRef{`0}},System.Int32,`0,`0)">
            <summary>A callback invoked when an entry is replaced.</summary>
            <param name="list">The net field whose values changed.</param>
            <param name="index">The list index which changed.</param>
            <param name="oldValue">The previous value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.Add(`0)">
            <summary>Track an added item.</summary>
            <param name="value">The value that was added.</param>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetListWatcher`1.Remove(`0)">
            <summary>Track a removed item.</summary>
            <param name="value">The value that was removed.</param>
        </member>
        <member name="T:DaLion.Shared.Watchers.NetFieldWatcher`2">
            <summary>A watcher which detects changes to a <see cref="T:Netcode.NetField`2"/>.</summary>
            <typeparam name="TValue">The value type wrapped by the net field.</typeparam>
            <typeparam name="TNetField">The net field type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="F:DaLion.Shared.Watchers.NetFieldWatcher`2._field">
            <summary>The field being watched.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.NetFieldWatcher`2.#ctor(System.String,Netcode.NetFieldBase{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.NetFieldWatcher`2"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The field to watch.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.NetFieldWatcher`2.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetFieldWatcher`2.IsChanged">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetFieldWatcher`2.PreviousValue">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.NetFieldWatcher`2.CurrentValue">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetFieldWatcher`2.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetFieldWatcher`2.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetFieldWatcher`2.Dispose">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.NetFieldWatcher`2.OnValueChanged(`1,`0,`0)">
            <summary>A callback invoked when the field's value changes.</summary>
            <param name="field">The field being watched.</param>
            <param name="oldValue">The old field value.</param>
            <param name="newValue">The new field value.</param>
        </member>
        <member name="T:DaLion.Shared.Watchers.ComparableValueWatcher`1">
            <summary>A watcher which detects changes to a value using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instance.</summary>
            <typeparam name="TValue">A comparable value type.</typeparam>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="F:DaLion.Shared.Watchers.ComparableValueWatcher`1._getValue">
            <summary>Get the current value.</summary>
        </member>
        <member name="F:DaLion.Shared.Watchers.ComparableValueWatcher`1._comparer">
            <summary>The equality comparer.</summary>
        </member>
        <member name="M:DaLion.Shared.Watchers.ComparableValueWatcher`1.#ctor(System.String,System.Func{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Initializes a new instance of the <see cref="T:DaLion.Shared.Watchers.ComparableValueWatcher`1"/> class.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="getValue">Get the current value.</param>
            <param name="comparer">The equality comparer which indicates whether two values are the same.</param>
        </member>
        <member name="P:DaLion.Shared.Watchers.ComparableValueWatcher`1.Name">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.ComparableValueWatcher`1.PreviousValue">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.ComparableValueWatcher`1.CurrentValue">
            <inheritdoc />
        </member>
        <member name="P:DaLion.Shared.Watchers.ComparableValueWatcher`1.IsChanged">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.ComparableValueWatcher`1.Update">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.ComparableValueWatcher`1.Reset">
            <inheritdoc />
        </member>
        <member name="M:DaLion.Shared.Watchers.ComparableValueWatcher`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:DaLion.Shared.Watchers.WatcherFactory">
            <summary>Provides convenience wrappers for creating watchers.</summary>
            <remarks>Pulled from <see href="https://github.com/Pathoschild/SMAPI/tree/develop/src/SMAPI/Modules/StateTracking">SMAPI</see>.</remarks>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForEquatable``1(System.String,System.Func{``0})">
            <summary>Creates a watcher for a <see cref="T:System.IEquatable`1"/> value.</summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="getValue">Get the current value.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.ComparableValueWatcher`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForGenericEquality``1(System.String,System.Func{``0})">
            <summary>Get a watcher which compares values using their <see cref="M:System.Object.Equals(System.Object)"/> method. This method should only be used when <see cref="M:DaLion.Shared.Watchers.WatcherFactory.ForEquatable``1(System.String,System.Func{``0})"/> won't work, since this doesn't validate whether they're comparable.</summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="getValue">Get the current value.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.ComparableValueWatcher`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForReference``1(System.String,System.Func{``0})">
            <summary>Get a watcher which detects when an object reference changes.</summary>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="getValue">Get the current value.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.ComparableValueWatcher`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForNetValue``2(System.String,Netcode.NetFieldBase{``0,``1})">
            <summary>Creates a watcher for a <see cref="T:Netcode.NetFieldBase`2"/>.</summary>
            <typeparam name="T">The value type.</typeparam>
            <typeparam name="TSelf">The net field instance type.</typeparam>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="field">The <see cref="T:Netcode.NetFieldBase`2"/>.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.NetFieldWatcher`2"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForNetCollection``1(System.String,Netcode.NetCollection{``0})">
            <summary>Creates a watcher for a <see cref="T:Netcode.NetCollection`1"/>.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="collection">The <see cref="T:Netcode.NetCollection`1"/>.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.NetCollectionWatcher`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForNetList``1(System.String,Netcode.NetList{``0,Netcode.NetRef{``0}})">
            <summary>Creates a watcher for a <see cref="T:Netcode.NetList`2"/>.</summary>
            <typeparam name="T">The value type.</typeparam>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="collection">The <see cref="T:Netcode.NetList`2"/>.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.NetListWatcher`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForNetIntList(System.String,Netcode.NetIntList)">
            <summary>Creates a watcher for a <see cref="T:Netcode.NetIntList"/>.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <param name="collection">The <see cref="T:Netcode.NetIntList"/>.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.NetListWatcher`1"/>.</returns>
        </member>
        <member name="M:DaLion.Shared.Watchers.WatcherFactory.ForNetDictionary``5(System.String,Netcode.NetDictionary{``0,``1,``2,``3,``4})">
            <summary>Creates a watcher for a <see cref="T:Netcode.NetDictionary`5"/>.</summary>
            <param name="name">A name which identifies what the watcher is watching, used for troubleshooting.</param>
            <typeparam name="TKey">The dictionary key type.</typeparam>
            <typeparam name="TValue">The dictionary value type.</typeparam>
            <typeparam name="TField">The net type equivalent to <typeparamref name="TValue"/>.</typeparam>
            <typeparam name="TSerialDict">The serializable dictionary type that can store the keys and values.</typeparam>
            <typeparam name="TSelf">The net field instance type.</typeparam>
            <param name="field">The <see cref="T:Netcode.NetDictionary`5"/>.</param>
            <returns>An interface for a new instance of <see cref="T:DaLion.Shared.Watchers.NetDictionaryWatcher`5"/>.</returns>
        </member>
        <member name="T:NetEscapades.EnumGenerators.EnumExtensionsAttribute">
            <summary>
            Add to enums to indicate that extension methods should be generated for the type
            </summary>
        </member>
        <member name="P:NetEscapades.EnumGenerators.EnumExtensionsAttribute.ExtensionClassNamespace">
            <summary>
            The namespace to generate the extension class.
            If not provided the namespace of the enum will be used
            </summary>
        </member>
        <member name="P:NetEscapades.EnumGenerators.EnumExtensionsAttribute.ExtensionClassName">
            <summary>
            The name to use for the extension class.
            If not provided, the enum name with "Extensions" will be used.
            For example for an Enum called StatusCodes, the default name
            will be StatusCodesExtensions
            </summary>
        </member>
    </members>
</doc>
