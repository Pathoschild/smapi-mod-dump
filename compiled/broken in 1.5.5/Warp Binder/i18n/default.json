{
  "lang.start": "Started {{mod}} from folder: {{folder}}",
  "lang.words.Origin": "Origin",
  "lang.words.Target": "Target",
  "lang.warps.FixedMap": "Repaired {{Map}} name, the registered name was {{MapName}}, it has been changed to {{MapNewName}}.",
  "lang.exceptions.LocationNull": "A null location was detected for the warps {{Map}} location vector.",
  "lang.warps.FixedFloatingCoordinate": "Floating Coordinates Detected and Updated. Old Coordinate: {{X}},{{Y}}; New Coordinate: {{NewX}},{{NewY}}.",
  "lang.warps.FixedInvalidRotation": "Invalid rotation of {{Rotation}} detected on the {{Map}} map, resetting to {{NewRotation}}.",
  "lang.warps.FixedMissingID": "Warp ID missing, created and set new ID of \"{{ID}}\"",
  "lang.warps.FixedRemovedMapNamespace": "Namespace detected in {{Map}} map, this has been corrected.",
  "lang.warps.RegisteredAdHocWarp": "Successfully registered Ad Hoc warp string.",
  "lang.warpGenerator.ExportedWarpFile": "Warp file exported to: {{file}}",
  "lang.exceptions.MapCorrectionFailure": "Failed to correct {{Map}} map due to invalid or undetectable map name, if you are not in single player mode or not the host the map may not be detectable and this should be ignored. Registered map: {{MapName}}.",
  "lang.exceptions.warpExportNullProperties": "Failed to export warp due to {{value}} being null",
  "lang.exceptions.WarpUpdateTickFailed": "Warp Update Tick Exception Caught",
  "lang.exceptions.command.InvalidArguments.LoadWarpFile": "Invalid arguments detected for the Load Warp File command set, please see the following details:\n{{usage}}",
  "lang.exceptions.command.InvalidArguments.ExportWarpFile": "Invalid arguments detected for the Export Warp File command set, please see the following details:\n{{usage}}",
  "lang.exceptions.command.NoSuchWarp.ExportWarp": "No such warp found: {{Map}} - X: {{X}} Y: {{Y}}",
  "lang.command.GetWarpDictionaryAsJson": "wbGetWarpDictionary",
  "lang.command.GetWarpDictionaryAsJson.Description": "Gets a JSON serialization of the current active warp dictionary form the WarpTracker class.",
  "lang.command.LoadWarpFile": "wbLoadWarpFile",
  "lang.command.LoadWarpFile.Description": "Loads a warp file into a selected warp type. \nUsage: \n{{command}} \"Path/To/Warp.warp\" (WARPTYPE)\nWhere (WARPTYPE) being WARP for a standard warp file or ROAMING for a roaming warp file.",
  "lang.command.LoadWarpJson": "wbLoadWarpJson",
  "lang.command.LoadWarpJson.Description": "Loads a warp json string into a selected warp type. \nUsage: \n{{command}} (WARPTYPE) (JSONString)\nWhere (WARPTYPE) being WARP for a standard warp or ROAMING for a roaming warp.\nWhere (JSONString) is a properly escaped JSON string representation of the warp.",
  "lang.command.GetPlayerLocation": "wbGetLocation",
  "lang.command.GetPlayerLocation.Description": "Gets the players current tile based location data.",
  "lang.command.GetPlayerLocation.Output": "\nPlayer Location Details\nX: {{X}}\nY: {{Y}}\nRotation: {{R}}\nMap: {{Map}}\n",
  "lang.command.GetGameLocations": "wbGetGameLocations",
  "lang.command.GetGameLocations.Description": "Gets a list of Game Maps, non-inclusive of internal maps",
  "lang.command.GetGameLocations.Line": "Map: {{Map}}",
  "lang.command.ExportWarpFile": "wbExportWarpFile",
  "lang.command.ExportWarpFile.Description": "Exports a warp file to the designated file location, file extension will be automatically appended based on warp type detected.\nUsage: {{command}} MapName X Y [O:OutputName] [T:WarpType]\nMap: Name of Map\nX/Y: Integer Coordinates\nWarpType: WARP || ROAMING",
  "lang.command.ReloadWarpFiles": "wbReloadWarps",
  "lang.command.ReloadWarpFiles.Description": "Clears and Reloads all configured warp files into the warp dicitonary from the file system.",
  "lang.command.SyncToHost": "wbSyncToHost",
  "lang.command.SyncToHost.Description": "Requests the host to force sync their warp dictionary to the current clients dicitonary.",
  "lang.item.WarpCrystalLabel": "Warp Crystal To: "
}