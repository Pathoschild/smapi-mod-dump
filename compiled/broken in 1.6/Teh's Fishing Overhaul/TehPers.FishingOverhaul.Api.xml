<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TehPers.FishingOverhaul.Api</name>
    </assembly>
    <members>
        <member name="T:TehPers.FishingOverhaul.Api.BaseFishingApi">
            <summary>
            Base API for working with fishing. This implements many of the API members
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CaughtItem">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.OpeningChest">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CustomEvent">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CreatedDefaultFishingInfo">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.PreparedFishChances">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.PreparedTrashChances">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.PreparedTreasureChances">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedFishChance">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMinFishChance">
            <inheritdoc />
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMaxFishChance">
            <inheritdoc />
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedTreasureChance">
            <inheritdoc/>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMinTreasureChance">
            <inheritdoc />
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMaxTreasureChance">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetStreak(StardewValley.Farmer)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.SetStreak(StardewValley.Farmer,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.CreateDefaultFishingInfo(StardewValley.Farmer)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetFishChances(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetCatchableFish(StardewValley.Farmer,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetFishPondFish(StardewValley.Farmer,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetTrashChances(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetCatchableTrash(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetTreasureChances(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetCatchableTreasure(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetChanceForFish(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetChanceForFish(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetChanceForTreasure(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetChanceForTreasure(StardewValley.Farmer)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.ModifyChanceForFish(System.Func{StardewValley.Farmer,System.Double,System.Double})">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.ModifyChanceForTreasure(System.Func{StardewValley.Farmer,System.Double,System.Double})">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.TryGetFishTraits(TehPers.Core.Api.Items.NamespacedKey,TehPers.FishingOverhaul.Api.Content.FishTraits@)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.IsLegendary(TehPers.Core.Api.Items.NamespacedKey)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.IsLegendary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetPossibleCatch(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetPossibleCatch(StardewValley.Farmer,System.Int32,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetPossibleTreasure(TehPers.FishingOverhaul.Api.CatchInfo.FishCatch)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetPossibleTreasure(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc />
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.GetPossibleTreasure(StardewValley.Farmer)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.RaiseCustomEvent(TehPers.FishingOverhaul.Api.Events.CustomEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.RequestReload">
            <inheritdoc/>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCaughtItem(TehPers.FishingOverhaul.Api.Events.CaughtItemEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CaughtItem"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnOpeningChest(TehPers.FishingOverhaul.Api.Events.OpeningChestEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.OpeningChest"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCreatedDefaultFishingInfo(TehPers.FishingOverhaul.Api.Events.CreatedDefaultFishingInfoEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CreatedDefaultFishingInfo"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnPreparedFishChances(TehPers.FishingOverhaul.Api.Events.PreparedFishEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.PreparedFishChances"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnPreparedTrashChances(TehPers.FishingOverhaul.Api.Events.PreparedTrashEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.PreparedTrashChances"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnPreparedTreasureChances(TehPers.FishingOverhaul.Api.Events.PreparedTreasureEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.PreparedTreasureChances"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCalculatedFishChance(TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedFishChance"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCalculatedTreasureChance(TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedTreasureChance"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCalculatedMinFishChance(TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMinFishChance"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCalculatedMaxFishChance(TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMaxFishChance"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCalculatedMinTreasureChance(TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMinTreasureChance"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.BaseFishingApi.OnCalculatedMaxTreasureChance(TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs)">
            <summary>
            Invokes the <see cref="E:TehPers.FishingOverhaul.Api.BaseFishingApi.CalculatedMaxTreasureChance"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.CatchInfo">
            <summary>
            Information about a caught item.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that caught this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.Item">
            <summary>
            The item that was caught.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FromFishPond">
            <summary>
            Whether this was caught from a fish pond.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.CatchInfo.Deconstruct(TehPers.FishingOverhaul.Api.FishingInfo@,StardewValley.Item@,System.Boolean@)">
            <summary>
            Deconstructs this <see cref="T:TehPers.FishingOverhaul.Api.CatchInfo"/> into its components.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that caught this.</param>
            <param name="item">The item that was caught.</param>
            <param name="fromFishPond">Whether this was caught from a fish pond.</param>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch">
            <summary>
            Information about a caught fish.
            </summary>
            <inheritdoc cref="T:TehPers.FishingOverhaul.Api.CatchInfo"/>
            <param name="FishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that caught this fish.</param>
            <param name="FishEntry">The availability entry for the fish that was caught.</param>
            <param name="FishItem">The fish item that was caught.</param>
            <param name="FishSize">The size of the caught fish.</param>
            <param name="IsLegendary">Whether the fish is legendary.</param>
            <param name="FishQuality">The quality level of the fish.</param>
            <param name="FishDifficulty">The difficulty of the fish.</param>
            <param name="State">The state of the minigame when the fish was caught.</param>
            <param name="FromFishPond">Whether this was caught from a fish pond.</param>
            <param name="CaughtDouble">Whether two fish were caught instead of just one.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.FishingOverhaul.Api.Content.FishEntry,StardewValley.Item,System.Int32,System.Boolean,System.Int32,System.Int32,TehPers.FishingOverhaul.Api.MinigameState,System.Boolean,System.Boolean)">
            <summary>
            Information about a caught fish.
            </summary>
            <inheritdoc cref="T:TehPers.FishingOverhaul.Api.CatchInfo"/>
            <param name="FishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that caught this fish.</param>
            <param name="FishEntry">The availability entry for the fish that was caught.</param>
            <param name="FishItem">The fish item that was caught.</param>
            <param name="FishSize">The size of the caught fish.</param>
            <param name="IsLegendary">Whether the fish is legendary.</param>
            <param name="FishQuality">The quality level of the fish.</param>
            <param name="FishDifficulty">The difficulty of the fish.</param>
            <param name="State">The state of the minigame when the fish was caught.</param>
            <param name="FromFishPond">Whether this was caught from a fish pond.</param>
            <param name="CaughtDouble">Whether two fish were caught instead of just one.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.FishEntry">
            <summary>The availability entry for the fish that was caught.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.FishItem">
            <summary>The fish item that was caught.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.FishSize">
            <summary>The size of the caught fish.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.IsLegendary">
            <summary>Whether the fish is legendary.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.FishQuality">
            <summary>The quality level of the fish.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.FishDifficulty">
            <summary>The difficulty of the fish.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.State">
            <summary>The state of the minigame when the fish was caught.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.FishCatch.CaughtDouble">
            <summary>Whether two fish were caught instead of just one.</summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.CatchInfo.TrashCatch">
            <summary>
            Information about a caught trash item.
            </summary>
            <param name="FishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that caught this fish.</param>
            <param name="TrashEntry">The availability entry for the trash that was caught.</param>
            <param name="TrashItem">The trash item that was caught.</param>
            <param name="FromFishPond">Whether this was caught from a fish pond.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.CatchInfo.TrashCatch.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.FishingOverhaul.Api.Content.TrashEntry,StardewValley.Item,System.Boolean)">
            <summary>
            Information about a caught trash item.
            </summary>
            <param name="FishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that caught this fish.</param>
            <param name="TrashEntry">The availability entry for the trash that was caught.</param>
            <param name="TrashItem">The trash item that was caught.</param>
            <param name="FromFishPond">Whether this was caught from a fish pond.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.TrashCatch.TrashEntry">
            <summary>The availability entry for the trash that was caught.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.CatchInfo.TrashCatch.TrashItem">
            <summary>The trash item that was caught.</summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions">
            <summary>
            Conditions for availability.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.ObsoletionWarnings">
            <summary>
            Obsoletion warnings from initializing this <see cref="T:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo"/>.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.StartTime">
            <summary>
            Time this becomes available (inclusive).
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.EndTime">
            <summary>
            Time this is no longer available (exclusive).
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.SeasonsSplit">
            <summary>
            Used for JSON serialization. Prefer <see cref="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.Seasons"/>.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.Seasons">
            <summary>
            Seasons this can be caught in.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.WeathersSplit">
            <summary>
            Used for JSON serialization. Prefer <see cref="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.Weathers"/>.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.Weathers">
            <summary>
            Weathers this can be caught in.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.WaterTypesSplit">
            <summary>
            Used for JSON serialization. Prefer <see cref="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.WaterTypes"/>.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.WaterTypes">
            <summary>
            The type of water this can be caught in. Each location handles this differently.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.MinFishingLevel">
            <summary>
            Required fishing level to catch this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.MaxFishingLevel">
            <summary>
            Maximum fishing level required to catch this, or null for no max.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.IncludeLocations">
            <summary>
            List of locations this should be available in. Leaving this empty will make this
            available everywhere. Some locations have special handling. For example, the mines use
            the location names "UndergroundMine" and "UndergroundMine/N", where N is the floor
            number (both location names are valid for the floor).
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.ExcludeLocations">
            <summary>
            List of locations this should not be available in. This takes priority over
            <see cref="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.IncludeLocations"/>.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.Position">
            <summary>
            Constraints on the bobber's position on the map when fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.FarmerPosition">
            <summary>
            Constraints on the farmer's position on the map when fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.MinDepth">
            <summary>
            Minimum bobber depth required to catch this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.MinBobberDepth">
            <summary>
            Minimum bobber depth required to catch this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.MaxDepth">
            <summary>
            Maximum bobber depth required to catch this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.MaxBobberDepth">
            <summary>
            Maximum bobber depth required to catch this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.When">
            <summary>
            Content Patcher conditions for when this is available.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.IsAvailable(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Check whether these conditions are met.
            </summary>
            <param name="fishingInfo">Information about the farmer that is fishing.</param>
            <returns>Whether these conditions are met.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo">
            <summary>
            Information about the availability of a catchable item.
            </summary>
            <param name="BaseChance">
            The base chance this will be caught. This is not a percentage chance, but rather a weight
            relative to all available entries.
            </param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo.#ctor(System.Double)">
            <summary>
            Information about the availability of a catchable item.
            </summary>
            <param name="BaseChance">
            The base chance this will be caught. This is not a percentage chance, but rather a weight
            relative to all available entries.
            </param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo.BaseChance">
            <summary>
            The base chance this will be caught. This is not a percentage chance, but rather a weight
            relative to all available entries.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo.PriorityTier">
            <summary>
            The priority tier for this entry. For all available entries, only the entries that
            share the highest priority tier can be caught. For example, if all trash entries have a
            tier of 0 except for a single entry that has a tier of 1, then that single entry is
            guaranteed to be caught, regardless of its calculated weighted chance. If that entry
            becomes unavailable, then entries from tier 0 are selected from instead. This can be
            useful when creating special items that should always be caught first but which can only
            be caught once, for example.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo.GetWeightedChance(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the weighted chance of this being caught, if any. This does not test the
            conditions in <see cref="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.When"/>.
            </summary>
            <param name="fishingInfo">Information about the farmer that is fishing.</param>
            <returns>The weighted chance of this being caught, or <see langword="null"/> if not available.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.AvailabilityInfo.GetChance(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the weighted chance of this being caught. This does not test the conditions in
            <see cref="P:TehPers.FishingOverhaul.Api.Content.AvailabilityConditions.When"/>.
            </summary>
            <param name="fishingInfo">Information about the farmer that is fishing.</param>
            <returns>The weighted chance of this being caught.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.CatchActions">
            <summary>
            Actions to be executed on catch.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CatchActions.CustomEvents">
            <summary>
            Raise custom events with this name to notify SMAPI mods that this was caught. Event key
            format is "namespace:key" (for example "TehPers.FishingOverhaul:GoldenWalnut").
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CatchActions.SetFlags">
            <summary>
            Sets one or more mail flags.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CatchActions.StartQuests">
            <summary>
            Sets one or more quests as active.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CatchActions.AddMail">
            <summary>
            Adds mail entries to the player's mail tomorrow.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CatchActions.StartConversations">
            <summary>
            Starts conversations. The key is the conversation ID and the value is the number of days.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.CatchActions.OnCatch(TehPers.FishingOverhaul.Api.IFishingApi,TehPers.FishingOverhaul.Api.CatchInfo)">
            <summary>
            Executes these actions.
            </summary>
            <param name="fishingApi">The fishing API.</param>
            <param name="catchInfo">The catch information.</param>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.CaughtItem">
            <summary>
            An item caught from fishing.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.CaughtItem.#ctor(StardewValley.Item)">
            <summary>
            An item caught from fishing.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.CoordinateConstraint">
            <summary>
            A set of constraints for coordinates.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CoordinateConstraint.GreaterThan">
            <summary>
            Coordinate value must be greater than this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CoordinateConstraint.GreaterThanEq">
            <summary>
            Coordinate value must be greater than or equal to this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CoordinateConstraint.LessThan">
            <summary>
            Coordinate value must be less than this.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.CoordinateConstraint.LessThanEq">
            <summary>
            Coordinate value must be less than or equal to this.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.CoordinateConstraint.Matches(System.Single)">
            <summary>
            Checks whether a coordinate value matches these constraints.
            </summary>
            <param name="value">The value of the coordinate.</param>
            <returns><see langword="true"/> if the value matches, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.Entry`1">
            <summary>
            An entry for a fishing item.
            </summary>
            <typeparam name="T">The type of availability for this entry.</typeparam>
            <param name="AvailabilityInfo">The availability information.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.Entry`1.#ctor(`0)">
            <summary>
            An entry for a fishing item.
            </summary>
            <typeparam name="T">The type of availability for this entry.</typeparam>
            <param name="AvailabilityInfo">The availability information.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.Entry`1.AvailabilityInfo">
            <summary>The availability information.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.Entry`1.OnCatch">
            <summary>
            Actions to perform when this is caught.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.Entry`1.TryCreateItem(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.Core.Api.Items.INamespaceRegistry,TehPers.FishingOverhaul.Api.Content.CaughtItem@)">
            <summary>
            Tries to create an instance of the item this entry represents.
            </summary>
            <param name="fishingInfo">Information about the farmer that is fishing.</param>
            <param name="namespaceRegistry">The namespace registry.</param>
            <param name="item">The item that was created, if possible.</param>
            <returns><see langword="true"/> if the item was created, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo">
            <summary>
            Information about the availability of a catchable fish.
            </summary>
            <param name="BaseChance">The base chance of this being caught.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo.#ctor(System.Double)">
            <summary>
            Information about the availability of a catchable fish.
            </summary>
            <param name="BaseChance">The base chance of this being caught.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo.DepthMultiplier">
            <summary>
            Effect that sending the bobber by less than the max distance has on the chance. This
            value should be no more than 1.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo.MaxChanceDepth">
            <summary>
            The required fishing depth to maximize the chances of catching the fish.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo.MaxDepth">
            <summary>
            Obsolete - use <see cref="P:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo.MaxChanceDepth"/> instead.<br/>
            The required fishing depth to maximize the chances of catching the fish.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo.GetChance(TehPers.FishingOverhaul.Api.FishingInfo)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.FishEntry">
            <summary>
            A fish availability entry.
            </summary>
            <param name="FishKey">The item key.</param>
            <param name="AvailabilityInfo">The availability information.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishEntry.#ctor(TehPers.Core.Api.Items.NamespacedKey,TehPers.FishingOverhaul.Api.Content.FishAvailabilityInfo)">
            <summary>
            A fish availability entry.
            </summary>
            <param name="FishKey">The item key.</param>
            <param name="AvailabilityInfo">The availability information.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishEntry.FishKey">
            <summary>The item key.</summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishEntry.TryCreateItem(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.Core.Api.Items.INamespaceRegistry,TehPers.FishingOverhaul.Api.Content.CaughtItem@)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.FishEntryFilter">
            <summary>
            Fish entry filter.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishEntryFilter.FishKey">
            <summary>
            The namespaced key of the fish.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishEntryFilter.Matches(TehPers.FishingOverhaul.Api.Content.FishEntry)">
            <summary>
            Checks if the entry matches this filter.
            </summary>
            <param name="entry">The entry to check.</param>
            <returns>Whether the entry matches this filter.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.FishingContent">
            <summary>
            Content which affects fishing.
            </summary>
            <param name="ModManifest">The manifest of the mod that created this content.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishingContent.#ctor(StardewModdingAPI.IManifest)">
            <summary>
            Content which affects fishing.
            </summary>
            <param name="ModManifest">The manifest of the mod that created this content.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.ModManifest">
            <summary>The manifest of the mod that created this content.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.SetFishTraits">
            <summary>
            Gets the fish traits this content is trying to set.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.RemoveFishTraits">
            <summary>
            Gets the fish traits this content is trying to remove.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.AddFish">
            <summary>
            Gets the new fish entries this content wants to create.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.RemoveFish">
            <summary>
            Gets the fish entries this content wants to remove.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.AddTrash">
            <summary>
            Gets the new trash entries this content wants to create.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.RemoveTrash">
            <summary>
            Gets the trash entries this content wants to remove.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.AddTreasure">
            <summary>
            Gets the new treasure entries this content wants to create.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.RemoveTreasure">
            <summary>
            Gets the treasure entries this content wants to remove.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingContent.AddEffects">
            <summary>
            Fishing effects entries to add.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.FishingEffectEntry">
            <summary>
            An entry for an effect that may be applied while fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishingEffectEntry.Conditions">
            <summary>
            Conditions for when this effect should be applied.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishingEffectEntry.CreateEffect(TehPers.Core.Api.DI.IGlobalKernel)">
            <summary>
            Creates the fishing effect associated with this entry.
            </summary>
            <param name="kernel">The global kernel.</param>
            <returns>The fishing effect associated with this entry.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.FishTraits">
            <summary>
            Definition for a fish's traits.
            </summary>
            <param name="DartFrequency">How often the fish darts in the fishing minigame.</param>
            <param name="DartBehavior">How the fish moves during the fishing minigame.</param>
            <param name="MinSize">The minimum size the fish can be.</param>
            <param name="MaxSize">The maximum size the fish can be.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.FishTraits.#ctor(System.Int32,TehPers.FishingOverhaul.Api.DartBehavior,System.Int32,System.Int32)">
            <summary>
            Definition for a fish's traits.
            </summary>
            <param name="DartFrequency">How often the fish darts in the fishing minigame.</param>
            <param name="DartBehavior">How the fish moves during the fishing minigame.</param>
            <param name="MinSize">The minimum size the fish can be.</param>
            <param name="MaxSize">The maximum size the fish can be.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishTraits.DartFrequency">
            <summary>How often the fish darts in the fishing minigame.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishTraits.DartBehavior">
            <summary>How the fish moves during the fishing minigame.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishTraits.MinSize">
            <summary>The minimum size the fish can be.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishTraits.MaxSize">
            <summary>The maximum size the fish can be.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.FishTraits.IsLegendary">
            <summary>
            Whether the fish is legendary.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.IFishingContentSource">
            <summary>
            Content source for fishing data. Registering a global binding for this interface will allow
            custom fishing content to be added to the game.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.IFishingContentSource.Reload">
            <summary>
            Reloads the fishing data.
            </summary>
            <returns>The reloaded fishing data.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.PositionConstraint">
            <summary>
            A set of constraints for positions.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.PositionConstraint.X">
            <summary>
            Constraints for the x-coordinate.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.PositionConstraint.Y">
            <summary>
            Constraints for the Y-coordinate.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.PositionConstraint.Matches(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks whether a position matches these constraints.
            </summary>
            <param name="position">The position.</param>
            <returns><see langword="true"/> if the position matches, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.TrashEntry">
            <summary>
            A trash availability entry.
            </summary>
            <param name="ItemKey">The item key.</param>
            <param name="AvailabilityInfo">The availability information.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.TrashEntry.#ctor(TehPers.Core.Api.Items.NamespacedKey,TehPers.FishingOverhaul.Api.Content.AvailabilityInfo)">
            <summary>
            A trash availability entry.
            </summary>
            <param name="ItemKey">The item key.</param>
            <param name="AvailabilityInfo">The availability information.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TrashEntry.ItemKey">
            <summary>The item key.</summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.TrashEntry.TryCreateItem(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.Core.Api.Items.INamespaceRegistry,TehPers.FishingOverhaul.Api.Content.CaughtItem@)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.TrashEntryFilter">
            <summary>
            Trash entry filter.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TrashEntryFilter.ItemKey">
            <summary>
            The namespaced key of the trash.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.TrashEntryFilter.Matches(TehPers.FishingOverhaul.Api.Content.TrashEntry)">
            <summary>
            Checks if the entry matches this filter.
            </summary>
            <param name="entry">The entry to check.</param>
            <returns>Whether the entry matches this filter.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.TreasureEntry">
            <summary>
            An entry for treasure loot.
            </summary>
            <param name="AvailabilityInfo">The availability information.</param>
            <param name="ItemKeys">The possible namespaced keys for the loot. The item key is chosen randomly.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.TreasureEntry.#ctor(TehPers.FishingOverhaul.Api.Content.AvailabilityInfo,System.Collections.Immutable.ImmutableArray{TehPers.Core.Api.Items.NamespacedKey})">
            <summary>
            An entry for treasure loot.
            </summary>
            <param name="AvailabilityInfo">The availability information.</param>
            <param name="ItemKeys">The possible namespaced keys for the loot. The item key is chosen randomly.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TreasureEntry.ItemKeys">
            <summary>The possible namespaced keys for the loot. The item key is chosen randomly.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TreasureEntry.MinQuantity">
            <summary>
            The minimum quantity of this item. This is only valid for stackable items.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TreasureEntry.MaxQuantity">
            <summary>
            The maximum quantity of this item. This is only valid for stackable items.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TreasureEntry.AllowDuplicates">
            <summary>
            Whether this can be found multiple times in one chest.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.TreasureEntry.TryCreateItem(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.Core.Api.Items.INamespaceRegistry,TehPers.FishingOverhaul.Api.Content.CaughtItem@)">
            <inheritdoc/>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Content.TreasureEntryFilter">
            <summary>
            Treasure entry filter.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TreasureEntryFilter.ItemKeys">
            <summary>
            The namespaced keys of the treasure. This must match every listed item key in the entry
            you want to remove. For example, if an entry lists bait, stone, and wood as its
            possible item keys, you must list *all* of those to remove it.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Content.TreasureEntryFilter.AnyWithItem">
            <summary>
            A namespaced key in the treasure entry. Any entry that can produce this item will be
            removed. This takes precedence over <see cref="P:TehPers.FishingOverhaul.Api.Content.TreasureEntryFilter.ItemKeys"/> (if both are listed and this
            condition is matched, then <see cref="P:TehPers.FishingOverhaul.Api.Content.TreasureEntryFilter.ItemKeys"/> is ignored).
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Content.TreasureEntryFilter.Matches(TehPers.FishingOverhaul.Api.Content.TreasureEntry)">
            <summary>
            Checks if the entry matches this filter.
            </summary>
            <param name="entry">The entry to check.</param>
            <returns>Whether the entry matches this filter.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.DartBehavior">
            <summary>
            The movement behavior of the fish in the minigame.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.DartBehavior.Mixed">
            <summary>
            Maps to "mixed" vanilla behavior.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.DartBehavior.Dart">
            <summary>
            Maps to "dart" vanilla behavior.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.DartBehavior.Smooth">
            <summary>
            Maps to "smooth" vanilla behavior.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.DartBehavior.Sink">
            <summary>
            Maps to "sink" vanilla behavior.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.DartBehavior.Floater">
            <summary>
            Maps to "floater" vanilla behavior.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Effects.FishingEffectRegistration">
            <summary>
            A registered fishing effect.
            </summary>
            <param name="Name">The name of the effect.</param>
            <param name="EntryType">The entry type (which must extend <see cref="T:TehPers.FishingOverhaul.Api.Content.FishingEffectEntry"/>).</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Effects.FishingEffectRegistration.#ctor(System.String,System.Type)">
            <summary>
            A registered fishing effect.
            </summary>
            <param name="Name">The name of the effect.</param>
            <param name="EntryType">The entry type (which must extend <see cref="T:TehPers.FishingOverhaul.Api.Content.FishingEffectEntry"/>).</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Effects.FishingEffectRegistration.Name">
            <summary>The name of the effect.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Effects.FishingEffectRegistration.EntryType">
            <summary>The entry type (which must extend <see cref="T:TehPers.FishingOverhaul.Api.Content.FishingEffectEntry"/>).</summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Effects.FishingEffectRegistration.Of``1(System.String)">
            <summary>
            Creates a fishing effect registration.
            </summary>
            <typeparam name="T">The entry type.</typeparam>
            <param name="name">The name of the effect.</param>
            <returns>The registration.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Effects.IFishingEffect">
            <summary>
            An effect that can be applied while fishing.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Effects.IFishingEffect.Apply(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Applies this effect.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Effects.IFishingEffect.Unapply(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Unapplies this effect.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Effects.IFishingEffect.UnapplyAll">
            <summary>
            Unapplies this effect from all players.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs">
            <summary>
            Event data for after the chance for a fish is calculated.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs.ChanceForFish">
            <summary>
            The chance of hitting a fish (instead of trash).
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.CalculatedFishChanceEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="chanceForFish">The chance of hitting a fish (instead of trash).</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs">
            <summary>
            Event data for after the chance for a treasure chest is calculated.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs.ChanceForTreasure">
            <summary>
            The chance of finding a treasure chest.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.CalculatedTreasureChanceEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="chanceForTreasure">The chance of finding a treasure chest.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.CaughtItemEventArgs">
            <summary>
            Event data for when an item (either a fish or trash) is caught while fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.CaughtItemEventArgs.Catch">
            <summary>
            The catch info.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.CaughtItemEventArgs.#ctor(TehPers.FishingOverhaul.Api.CatchInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.CaughtItemEventArgs"/> class.
            </summary>
            <param name="catch">The catch info.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.ChanceCalculatedEventArgs">
            <summary>
            Event data for when a chance is calculated.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.ChanceCalculatedEventArgs.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.ChanceCalculatedEventArgs.Chance">
            <summary>
            The chance that was calculated.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.ChanceCalculatedEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.ChanceCalculatedEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="chance">The calculated chance.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.CreatedDefaultFishingInfoEventArgs">
            <summary>
            Event data for after the default fishing info is created.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.CreatedDefaultFishingInfoEventArgs.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.CreatedDefaultFishingInfoEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.CreatedDefaultFishingInfoEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.CustomEventArgs">
            <summary>
            Event data for a custom fishing event.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.CustomEventArgs.Catch">
            <summary>
            The catch info.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.CustomEventArgs.EventKey">
            <summary>
            The key for the event.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.CustomEventArgs.#ctor(TehPers.FishingOverhaul.Api.CatchInfo,TehPers.Core.Api.Items.NamespacedKey)">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.CustomEventArgs"/> class.
            </summary>
            <param name="catch">The catch info.</param>
            <param name="eventKey">The key for the event.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.OpeningChestEventArgs">
            <summary>
            Event data for whenever a treasure chest is opened.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.OpeningChestEventArgs.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.OpeningChestEventArgs.CaughtItems">
            <summary>
            The items in the chest.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.OpeningChestEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Collections.Generic.IList{TehPers.FishingOverhaul.Api.Content.CaughtItem})">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.OpeningChestEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="caughtItems">The items in the chest.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.PreparedFishEventArgs">
            <summary>
            Event data for after fish chances are calculated.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.PreparedFishEventArgs.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.PreparedFishEventArgs.FishChances">
            <summary>
            The chances of finding fish. The weights are not yet normalized.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.PreparedFishEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Collections.Generic.IList{TehPers.FishingOverhaul.Api.Weighted.IWeightedValue{TehPers.FishingOverhaul.Api.Content.FishEntry}})">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.PreparedFishEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="fishChances">The chances of finding fish.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.PreparedTrashEventArgs">
            <summary>
            Event data for after trash chances are calculated.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.PreparedTrashEventArgs.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.PreparedTrashEventArgs.TrashChances">
            <summary>
            The chances of finding trash. The weights are not yet normalized.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.PreparedTrashEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Collections.Generic.IList{TehPers.FishingOverhaul.Api.Weighted.IWeightedValue{TehPers.FishingOverhaul.Api.Content.TrashEntry}})">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.PreparedTrashEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="trashChances">The chances of finding trash.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Events.PreparedTreasureEventArgs">
            <summary>
            Event data for after treasure chances are calculated.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.PreparedTreasureEventArgs.FishingInfo">
            <summary>
            Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Events.PreparedTreasureEventArgs.TreasureChances">
            <summary>
            The chances of finding treasure. The weights are not yet normalized.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Events.PreparedTreasureEventArgs.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,System.Collections.Generic.IList{TehPers.FishingOverhaul.Api.Weighted.IWeightedValue{TehPers.FishingOverhaul.Api.Content.TreasureEntry}})">
            <summary>
            Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Events.PreparedTreasureEventArgs"/> class.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="treasureChances">The chances of finding treasure.</param>
            <exception cref="T:System.ArgumentNullException">An argument was null.</exception>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> for weighted random item selection.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.ChooseOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>Chooses a random item using the items' weights, or a default value if there are no items.</summary>
            <typeparam name="T">The type of item in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="rand">The <see cref="T:System.Random"/> to use.</param>
            <returns>The chosen item.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.Choose``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>Chooses a random item using the items' weights.</summary>
            <typeparam name="T">The type of item in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="rand">The <see cref="T:System.Random"/> to use.</param>
            <returns>The chosen item.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.ToWeighted``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>Converts the items in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/>.</summary>
            <typeparam name="T">The type of item in the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="weightSelector">A callback which maps each item to its weight.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all the items converted to <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/>.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.ToWeighted``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double},System.Func{``0,``1})">
            <summary>Converts the items in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/>.</summary>
            <typeparam name="TSource">The type of item in the source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="TEntry">The type of values in the resulting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="weightSelector">A callback which maps each item to its weight.</param>
            <param name="elementSelector">A callback which maps each item to its value.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with all the items converted to <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/>.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.Normalize``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>Normalizes the weights of each item and returns a new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the normalized items.</summary>
            <typeparam name="T">The type of item in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>. It must implement <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeighted"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="weight">The weight to normalize to.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing new, normalized items in the same order.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.Normalize``1(System.Collections.Generic.IEnumerable{TehPers.FishingOverhaul.Api.Weighted.IWeightedValue{``0}},System.Double)">
            <summary>Normalizes the weights of each <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/> and returns a new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the normalized items.</summary>
            <typeparam name="T">The type of value in the <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="weight">The weight to normalize to.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing new, normalized items in the same order.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.Condense``1(System.Collections.Generic.IEnumerable{TehPers.FishingOverhaul.Api.Weighted.IWeightedValue{``0}})">
            <summary>
            Groups equivalent values together and calculates the condensed weights of each value.
            </summary>
            <typeparam name="T">The type of value in the <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing each value only once and the sum of the weights for those values from the source.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.SumWeights``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Sums all of the weights of the items in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</summary>
            <typeparam name="T">The type of item in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>. It must implement <see cref="T:TehPers.FishingOverhaul.Api.Weighted.IWeighted"/>.</typeparam>
            <param name="source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The sum of the weights.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.Shuffle``1(System.Collections.Generic.IList{``0})">
            <summary>Shuffles a list.</summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to shuffle.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Extensions.WeightedExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>Shuffles a list.</summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> to shuffle.</param>
            <param name="rand">The <see cref="T:System.Random"/> to use while shuffling.</param>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingInfo">
             <summary>
             Information about a <see cref="T:StardewValley.Farmer"/> that is fishing.
            
             It is recommended to instead call <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.CreateDefaultFishingInfo(StardewValley.Farmer)"/> to
             create a new instance of this rather than call the constructor directly.
             </summary>
             <param name="User">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingInfo.#ctor(StardewValley.Farmer)">
             <summary>
             Information about a <see cref="T:StardewValley.Farmer"/> that is fishing.
            
             It is recommended to instead call <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.CreateDefaultFishingInfo(StardewValley.Farmer)"/> to
             create a new instance of this rather than call the constructor directly.
             </summary>
             <param name="User">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.User">
            <summary>The <see cref="T:StardewValley.Farmer"/> that is fishing.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.Times">
            <summary>
            The times of day being fished at.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.Seasons">
            <summary>
            The seasons being fished in.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.Weathers">
            <summary>
            The weathers being fished in.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.WaterTypes">
            <summary>
            The water types being fished in.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.FishingLevel">
            <summary>
            The fishing level of the <see cref="T:StardewValley.Farmer"/> that is fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.BobberDepth">
            <summary>
            The bobber depth.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.Locations">
            <summary>
            The names of the locations being fished in.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.BobberPosition">
            <summary>
            The fishing rod's bobber position.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.Bait">
            <summary>
            The bait used for fishing.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.FishingInfo.Bobber">
            <summary>
            The bobber/tackle used for fishing.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingInfo.GetDefaultLocationNames(StardewValley.GameLocation)">
             <summary>
             Gets the location names associated with a <see cref="T:StardewValley.GameLocation"/>. Some locations
             have names in addition to their normal names:
            
             <list type="bullet">
                 <item>
                     <term><see cref="T:StardewValley.Locations.MineShaft"/></term>
                     <description>"UndergroundMine/#", where # is the floor number.</description>
                 </item>
                 <item>
                     <term><see cref="T:StardewValley.Farm"/></term>
                     <description>
                         "Farm/X", where X is one of "Standard", "Riverland", "Forest", "Hills",
                         "Wilderness", or "FourCorners". Only vanilla farms have this name.
                     </description>
                 </item>
                 <item>
                     <term><see cref="T:StardewValley.Locations.IslandLocation"/></term>
                     <description>"Island".</description>
                 </item>
             </list>
             </summary>
             <param name="location">The location to get the names of.</param>
             <returns>The location's names.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState">
            <summary>
            The state of a user that is fishing.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState.NotFishing">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is not fishing.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState.WaitingForBite">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is waiting for a bite.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingState.WaitingForBite.#ctor(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is waiting for a bite.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState.Fishing">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is in the fishing minigame.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingState.Fishing.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.Core.Api.Items.NamespacedKey)">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is in the fishing minigame.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState.Caught">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> just caught something.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingState.Caught.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.FishingOverhaul.Api.CatchInfo)">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> just caught something.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState.Holding">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is holding a catch.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingState.Holding.#ctor(TehPers.FishingOverhaul.Api.FishingInfo,TehPers.FishingOverhaul.Api.CatchInfo)">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is holding a catch.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.FishingState.OpeningTreasure">
            <summary>
            A fishing state that represents when a <see cref="T:StardewValley.Farmer"/> is opening treasure.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.FishingState.Start">
            <summary>
            Creates the initial state.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.IFishingApi">
            <summary>
            API for working with fishing.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CaughtItem">
            <summary>
            Invoked after an item is caught from the water.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.OpeningChest">
            <summary>
            Invoked before a treasure chest is opened.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CustomEvent">
            <summary>
            Invoked whenever an item is caught and raises a custom event.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CreatedDefaultFishingInfo">
            <summary>
            Invoked after the default fishing info is created.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.PreparedFishChances">
            <summary>
            Invoked after fish chances are calculated. This is invoked at the end of
            <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.GetFishChances(TehPers.FishingOverhaul.Api.FishingInfo)"/>.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.PreparedTrashChances">
            <summary>
            Invoked after trash chances are calculated. This is invoked at the end of
            <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.GetTrashChances(TehPers.FishingOverhaul.Api.FishingInfo)"/>.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.PreparedTreasureChances">
            <summary>
            Invoked after treasure chances are calculated. This is invoked at the end of
            <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.GetTreasureChances(TehPers.FishingOverhaul.Api.FishingInfo)"/>.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CalculatedFishChance">
            <summary>
            Invoked after the chance of catching a fish (instead of trash) is calculated. This is
            invoked at the end of <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.GetChanceForFish(TehPers.FishingOverhaul.Api.FishingInfo)"/>.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CalculatedMinFishChance">
            <summary>
            Invoked after the minimum chance of catching a fish (instead of trash) is calculated.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CalculatedMaxFishChance">
            <summary>
            Invoked after the maximum chance of catching a fish (instead of trash) is calculated.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CalculatedTreasureChance">
            <summary>
            Invoked after the chance of finding a treasure chest is calculated. This is invoked at
            the end of <see cref="M:TehPers.FishingOverhaul.Api.IFishingApi.GetChanceForTreasure(TehPers.FishingOverhaul.Api.FishingInfo)"/>.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CalculatedMinTreasureChance">
            <summary>
            Invoked after the minimum chance of finding a treasure chest is calculated.
            </summary>
        </member>
        <member name="E:TehPers.FishingOverhaul.Api.IFishingApi.CalculatedMaxTreasureChance">
            <summary>
            Invoked after the maximum chance of finding a treasure chest is calculated.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.CreateDefaultFishingInfo(StardewValley.Farmer)">
            <summary>
            Creates a default <see cref="T:TehPers.FishingOverhaul.Api.FishingInfo"/> for a farmer.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>A default <see cref="T:TehPers.FishingOverhaul.Api.FishingInfo"/> for that farmer.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetFishChances(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the weighted chances of catching any fish. This does not take into account fish
            ponds.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The catchable fish and their chances of being caught.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetFishPondFish(StardewValley.Farmer,Microsoft.Xna.Framework.Vector2,System.Boolean)">
            <summary>
            Gets the fish from a <see cref="T:StardewValley.Buildings.FishPond"/> at the given tile if possible.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="bobberTile">The tile the bobber is on.</param>
            <param name="takeFish">If <see langword="false"/>, simulates taking the fish. Otherwise, actually pulls the fish from the pond.</param>
            <returns>The fish to get from the pond, if any.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetTrashChances(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the weighted chances of catching any trash.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The catchable trash and their chances of being caught.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetTreasureChances(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the weighted chances of catching any treasure.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The catchable treasure and their chances of being caught.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetChanceForFish(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the chance that a fish would be caught. This does not take into account whether
            there are actually fish to catch at the <see cref="T:StardewValley.Farmer"/>'s location. If no fish
            can be caught, then the <see cref="T:StardewValley.Farmer"/> will always catch trash.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The chance a fish would be caught instead of trash.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetChanceForTreasure(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Gets the chance that treasure will be found during the fishing minigame.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The chance for treasure to appear during the fishing minigame.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.TryGetFishTraits(TehPers.Core.Api.Items.NamespacedKey,TehPers.FishingOverhaul.Api.Content.FishTraits@)">
            <summary>
            Tries to get the traits for a fish.
            </summary>
            <param name="fishKey">The fish's <see cref="T:TehPers.Core.Api.Items.NamespacedKey"/>.</param>
            <param name="traits">The fish's traits.</param>
            <returns><see langword="true"/> if the fish has registered traits, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.IsLegendary(TehPers.Core.Api.Items.NamespacedKey)">
            <summary>
            Gets whether a fish is legendary.
            </summary>
            <param name="fishKey">The item key of the fish.</param>
            <returns>Whether that fish is legendary.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetPossibleCatch(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Selects a random catch. A player may catch either a fish or trash item.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>A possible catch.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetPossibleTreasure(TehPers.FishingOverhaul.Api.CatchInfo.FishCatch)">
            <summary>
            Selects random treasure.
            </summary>
            <param name="catchInfo">Information about the caught fish.</param>
            <returns>Possible loot from a treasure chest.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.GetPossibleTreasure(TehPers.FishingOverhaul.Api.FishingInfo)">
            <summary>
            Selects random treasure.
            </summary>
            <param name="fishingInfo">Information about the <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>Possible loot from a treasure chest.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.RaiseCustomEvent(TehPers.FishingOverhaul.Api.Events.CustomEventArgs)">
            <summary>
            Raises a custom event for other mods to handle.
            </summary>
            <param name="customEventArgs">The event to raise.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.IFishingApi.RequestReload">
            <summary>
            Requests fishing data to be reloaded.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi">
             <summary>
             Simplified API for working with fishing. Prefer <see cref="T:TehPers.FishingOverhaul.Api.IFishingApi"/> if possible.
            
             You can copy this interface directly into your mod and use it with SMAPI's mod registry.
             </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetCatchableFish(StardewValley.Farmer,System.Int32)">
            <summary>
            Gets the fish that can be caught. This does not take into account fish ponds.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="depth">The bobber depth.</param>
            <returns>The catchable fish as stringified namespaced keys.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetCatchableTrash(StardewValley.Farmer)">
            <summary>
            Gets the trash that can be caught.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The catchable trash as stringified namespaced keys.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetCatchableTreasure(StardewValley.Farmer)">
            <summary>
            Gets the treasure that can be caught.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>The catchable treasure as stringified namespaced keys.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetChanceForFish(StardewValley.Farmer)">
            <summary>
            Gets the chance that a fish would be caught. This does not take into account whether
            there are actually fish to catch at the <see cref="T:StardewValley.Farmer"/>'s location. If no fish
            can be caught, then the <see cref="T:StardewValley.Farmer"/> will always catch trash.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> catching the fish.</param>
            <returns>The chance a fish would be caught instead of trash.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetChanceForTreasure(StardewValley.Farmer)">
            <summary>
            Gets the chance that treasure will be found during the fishing minigame.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> catching the treasure.</param>
            <returns>The chance for treasure to appear during the fishing minigame.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.ModifyChanceForFish(System.Func{StardewValley.Farmer,System.Double,System.Double})">
            <summary>
            Modifies the chance that a fish would be caught. The provided callback is invoked every
            time <see cref="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetChanceForFish(StardewValley.Farmer)"/> is called to modify the resulting chance before
            it's returned. Modifiers are invoked in the order they are registered.
            </summary>
            <param name="chanceModifier">
            The chance modifier function. The input arguments are the <see cref="T:StardewValley.Farmer"/> and the
            calculated chance, and the return value is the modified chance.
            </param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.ModifyChanceForTreasure(System.Func{StardewValley.Farmer,System.Double,System.Double})">
            <summary>
            Modifies the chance that treasure would be found while fishing. The provided callback
            is invoked every time <see cref="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetChanceForTreasure(StardewValley.Farmer)"/> is called to modify the
            resulting chance before it's returned. Modifiers are invoked in the order they are
            registered.
            </summary>
            <param name="chanceModifier">
            The chance modifier function. The input arguments are the <see cref="T:StardewValley.Farmer"/> and the
            calculated chance, and the return value is the modified chance.
            </param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.IsLegendary(System.String)">
            <summary>
            Gets whether a fish is legendary.
            </summary>
            <param name="fishKey">The item key of the fish as a stringified namespaced key.</param>
            <returns>Whether that fish is legendary.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetStreak(StardewValley.Farmer)">
            <summary>
            Gets a <see cref="T:StardewValley.Farmer"/>'s current fishing streak.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> to get the streak of.</param>
            <returns>The <see cref="T:StardewValley.Farmer"/>'s streak.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.SetStreak(StardewValley.Farmer,System.Int32)">
            <summary>
            Sets a <see cref="T:StardewValley.Farmer"/>'s current fishing streak.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> to set the streak of.</param>
            <param name="streak">The <see cref="T:StardewValley.Farmer"/>'s streak.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetPossibleCatch(StardewValley.Farmer,System.Int32,System.Boolean@)">
            <summary>
            Selects a random catch. A player may catch either a fish or trash item.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <param name="bobberDepth">The bobber's water depth.</param>
            <param name="isFish">Whether the caught item is a fish.</param>
            <returns>A possible catch.</returns>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.ISimplifiedFishingApi.GetPossibleTreasure(StardewValley.Farmer)">
            <summary>
            Selects random treasure.
            </summary>
            <param name="farmer">The <see cref="T:StardewValley.Farmer"/> that is fishing.</param>
            <returns>Possible loot from a treasure chest.</returns>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.MinigameState">
            <summary>
            The state of the fishing minigame.
            </summary>
            <param name="IsPerfect">Whether the current catch is still perfect.</param>
            <param name="Treasure">The state of the treasure in the minigame.</param>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.MinigameState.#ctor(System.Boolean,TehPers.FishingOverhaul.Api.TreasureState)">
            <summary>
            The state of the fishing minigame.
            </summary>
            <param name="IsPerfect">Whether the current catch is still perfect.</param>
            <param name="Treasure">The state of the treasure in the minigame.</param>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.MinigameState.IsPerfect">
            <summary>Whether the current catch is still perfect.</summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.MinigameState.Treasure">
            <summary>The state of the treasure in the minigame.</summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.PossibleCatch">
            <summary>
            A possible catch from fishing. This may or may not be a fish.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.PossibleCatch.Fish">
            <summary>
            A fish catch.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.PossibleCatch.Fish.#ctor(TehPers.FishingOverhaul.Api.Content.FishEntry)">
            <summary>
            A fish catch.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.PossibleCatch.Trash">
            <summary>
            A trash catch.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.PossibleCatch.Trash.#ctor(TehPers.FishingOverhaul.Api.Content.TrashEntry)">
            <summary>
            A trash catch.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.TreasureState">
            <summary>
            The state of the treasure in the fishing minigame.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.TreasureState.None">
            <summary>
            No treasure can be caught.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.TreasureState.NotCaught">
            <summary>
            Treasure can be caught, but it has not yet been caught.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.TreasureState.Caught">
            <summary>
            Treasure was caught.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.WaterTypes">
            <summary>
            Type of water that fish can be caught in. Each location handles these values differently.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.WaterTypes.River">
            <summary>
            River water tiles.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.WaterTypes.PondOrOcean">
            <summary>
            Pond or ocean water tiles. They use the same ID.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.WaterTypes.Freshwater">
            <summary>
            Freshwater tiles.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.WaterTypes.None">
            <summary>
            No water tiles.
            </summary>
        </member>
        <member name="F:TehPers.FishingOverhaul.Api.WaterTypes.All">
            <summary>
            All water tiles.
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Weighted.IWeighted">
            <summary>
            Defines a weighted chance for an object, allowing easy weighted choosing of a random
            element from a list of the object.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Weighted.IWeighted.Weight">
            <summary>
            Gets the positive weighted chance of this object being selected (in comparison to other
            objects).
            </summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1">
            <summary>A wrapper for objects that assigns a weighted chance to them.</summary>
            <typeparam name="T">The type of object being wrapped.</typeparam>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Weighted.IWeightedValue`1.Value">
            <summary>Gets the value wrapped by this element.</summary>
        </member>
        <member name="T:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1">
            <summary>
            A value and a weight.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1.Value">
            <summary>
            The inner value.
            </summary>
        </member>
        <member name="P:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1.Weight">
            <summary>
            The weighted chance of this value.
            </summary>
        </member>
        <member name="M:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1.#ctor(`0,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1"/> class.</summary>
            <param name="value">The value of this <see cref="T:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1"/>.</param>
            <param name="weight">The weighted chance for this <see cref="T:TehPers.FishingOverhaul.Api.Weighted.WeightedValue`1"/>.</param>
        </member>
    </members>
</doc>
