<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwitchLib.Client</name>
    </assembly>
    <members>
        <member name="T:TwitchLib.Client.Events.OnBannedEmailAliasArgs">
            <summary>
            Args representing a NOTICE telling the client that the user is banned to chat bcs of an already banned alias with the same Email.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnBannedEmailAliasArgs.Message">
            <summary>
            Property representing message send with the NOTICE
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnBannedEmailAliasArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnBeingHostedArgs">
            <summary>
            Args representing an event where another channel has started hosting the broadcaster's channel.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnBeingHostedArgs.BeingHostedNotification">
            <summary>
            Property representing the Host notification
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnChannelStateChangedArgs">
            <summary>
            Args representing on channel state changed event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnChannelStateChangedArgs.ChannelState">
            <summary>
            Property representing the current channel state.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnChannelStateChangedArgs.Channel">
            <summary>
            Property representing the channel received state from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnChatClearedArgs">
            <summary>
            Args representing a cleared chat event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnChatClearedArgs.Channel">
            <summary>
            Channel that had chat cleared event.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnChatColorChangedArgs">
            <summary>
            Args representing a successful chat color change request.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnChatColorChangedArgs.Channel">
            <summary>
            Property reprenting the channel the event was received in.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnChatCommandReceivedArgs">
            <summary>
            Args representing chat command received event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnChatCommandReceivedArgs.Command">
            <summary>
            The command
            </summary>
            Property representing received command.
        </member>
        <member name="T:TwitchLib.Client.Events.OnCommunitySubscriptionArgs">
            <summary>
            Args representing community subscription received event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnCommunitySubscriptionArgs.GiftedSubscription">
            <summary>
            Property representing the information of the community subscription.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnCommunitySubscriptionArgs.Channel">
            <summary>
            Property representing the Twitch channel this event fired from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnConnectedArgs">
            <summary>
            Args representing on connected event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnConnectedArgs.BotUsername">
            <summary>
            Property representing bot username.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnConnectedArgs.AutoJoinChannel">
            <summary>
            Property representing connected channel.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnConnectionErrorArgs">
            <summary>
            Args representing client connection error event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnConnectionErrorArgs.Error">
            <summary>
            The error
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnConnectionErrorArgs.BotUsername">
            <summary>
            Username of the bot that suffered connection error.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnContinuedGiftedSubscriptionArgs">
            <summary>
            Class OnContinuedGiftedSubscriptionArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwitchLib.Client.Events.OnContinuedGiftedSubscriptionArgs.ContinuedGiftedSubscription">
            <summary>
            Property representing the information of the subscription that was originally gifted, and is now continued by the user.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnContinuedGiftedSubscriptionArgs.Channel">
            <summary>
            Property representing the Twitch channel this event fired from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnDisconnectedArgs">
            <summary>
            Args representing client disconnect event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnDisconnectedArgs.BotUsername">
            <summary>
            Username of the bot that was disconnected.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnExistingUsersDetectedArgs">
            <summary>
            Args representing existing user(s) detected event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnExistingUsersDetectedArgs.Users">
            <summary>
            Property representing string list of existing users.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnExistingUsersDetectedArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnFailureToReceiveJoinConfirmationArgs">
            <summary>
            Class OnFailureToReceiveJoinConfirmationArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwitchLib.Client.Events.OnFailureToReceiveJoinConfirmationArgs.Exception">
            <summary>
            The exception
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnGiftedSubscriptionArgs">
            <summary>
            Class OnGiftedSubscriptionArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwitchLib.Client.Events.OnGiftedSubscriptionArgs.GiftedSubscription">
            <summary>
            Property representing the information of the gifted subscription.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnGiftedSubscriptionArgs.Channel">
            <summary>
            Property representing the Twitch channel this event fired from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnHostingStartedArgs">
            <summary>
            Args representing hosting started event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnHostingStartedArgs.HostingStarted">
            <summary>
            Property representing hosting channel.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnHostingStoppedArgs">
            <summary>
            Args representing hosting stopped event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnHostingStoppedArgs.HostingStopped">
            <summary>
            Property representing hosting channel.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnIncorrectLoginArgs">
            <summary>
            Args representing an incorrect login event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnIncorrectLoginArgs.Exception">
            <summary>
            Property representing exception object.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnJoinedChannelArgs">
            <summary>
            Args representing on channel joined event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnJoinedChannelArgs.BotUsername">
            <summary>
            Property representing bot username.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnJoinedChannelArgs.Channel">
            <summary>
            Property representing the channel that was joined.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnLeftChannelArgs">
            <summary>
            Args representing the client left a channel event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnLeftChannelArgs.BotUsername">
            <summary>
            The username of the bot that left the channel.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnLeftChannelArgs.Channel">
            <summary>
            Channel that bot just left (parted).
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnLogArgs">
            <summary>
            Class OnLogArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwitchLib.Client.Events.OnLogArgs.BotUsername">
            <summary>
            The bot username
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnLogArgs.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnLogArgs.DateTime">
            <summary>
            The date time
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnMessageClearedArgs">
            <summary>
            Args representing a cleared message event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnMessageClearedArgs.Channel">
            <summary>
            Channel that had message cleared event.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnMessageClearedArgs.Message">
            <summary>
            Message contents that received clear message
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnMessageClearedArgs.TargetMessageId">
            <summary>
            Message ID representing the message that was cleared
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnMessageClearedArgs.TmiSentTs">
            <summary>
            Timestamp of when message was sent
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnMessageReceivedArgs">
            <summary>
            Args representing message received event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnMessageReceivedArgs.ChatMessage">
            <summary>
            Property representing received chat message.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnMessageSentArgs">
            <summary>
            Args representing message sent event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnMessageSentArgs.SentMessage">
            <summary>
            Property representing a chat message that was just sent (check null on properties before using).
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnModeratorJoinedArgs">
            <summary>
            Args representing moderator joined event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnModeratorJoinedArgs.Username">
            <summary>
            Property representing username of joined moderator.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnModeratorJoinedArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnModeratorLeftArgs">
            <summary>
            Args representing moderator leave event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnModeratorLeftArgs.Username">
            <summary>
            Property representing username of moderator that left..
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnModeratorLeftArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnModeratorsReceivedArgs">
            <summary>
            Args representing a list of moderators received from chat.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnModeratorsReceivedArgs.Channel">
            <summary>
            Property representing the channel the moderator list came from.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnModeratorsReceivedArgs.Moderators">
            <summary>
            Property representing the list of moderators.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnNewSubscriberArgs">
            <summary>
            Args representing new subscriber event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnNewSubscriberArgs.Subscriber">
            <summary>
            Property representing subscriber object.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnNewSubscriberArgs.Channel">
            <summary>
            Property representing the Twitch channel this event fired from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnNowHostingArgs">
            <summary>
            Args representing the detected hosted channel.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnNowHostingArgs.Channel">
            <summary>
            Property the channel that received the event.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnNowHostingArgs.HostedChannel">
            <summary>
            Property representing channel that is being hosted.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnPrimePaidSubscriberArgs">
            <summary>
            Args representing prime gaming sub -> paid sub event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnPrimePaidSubscriberArgs.PrimePaidSubscriber">
            <summary>
            Property representing prime gaming -> paid subscriber object.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnPrimePaidSubscriberArgs.Channel">
            <summary>
            Property representing the Twitch channel this event fired from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnRaidNotificationArgs">
            <summary>
            Class OnRaidNotificationArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwitchLib.Client.Events.OnRaidNotificationArgs.RaidNotification">
            <summary>
            The raid notification
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnRaidNotificationArgs.Channel">
            <summary>
            The channel
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnRequiresVerifiedEmailArgs">
            <summary>
            Args representing a NOTICE telling the client that a verified email is required to chat.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnRequiresVerifiedEmailArgs.Message">
            <summary>
            Property representing message send with the NOTICE
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnRequiresVerifiedEmailArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnRequiresVerifiedPhoneNumberArgs">
            <summary>
            Args representing a NOTICE telling the client that a verified phone number is required to chat.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnRequiresVerifiedPhoneNumberArgs.Message">
            <summary>
            Property representing message send with the NOTICE
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnRequiresVerifiedPhoneNumberArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnReSubscriberArgs">
            <summary>
            Args representing resubscriber event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnReSubscriberArgs.ReSubscriber">
            <summary>
            Property representing resubscriber object.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnReSubscriberArgs.Channel">
            <summary>
            Property representing the Twitch channel this event fired from.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnRitualNewChatterArgs">
            <summary>
            Class OnRitualNewChatterArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:TwitchLib.Client.Events.OnRitualNewChatterArgs.RitualNewChatter">
            <summary>
            The ritual new chatter
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnSendReceiveDataArgs">
            <summary>
            Args representing on channel state changed event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnSendReceiveDataArgs.Direction">
            <summary>
            Property representing the direction of the data.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnSendReceiveDataArgs.Data">
            <summary>
            Property representing the data that was either sent or received.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnUnaccountedForArgs">
            <summary>
            Class OnUnaccountedForArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="P:TwitchLib.Client.Events.OnUnaccountedForArgs.RawIRC">
            <summary>
            Gets or sets the raw irc.
            </summary>
            <value>The raw irc.</value>
        </member>
        <member name="P:TwitchLib.Client.Events.OnUnaccountedForArgs.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:TwitchLib.Client.Events.OnUnaccountedForArgs.BotUsername">
            <summary>
            Gets or sets the bot username.
            </summary>
            <value>The bot username.</value>
        </member>
        <member name="P:TwitchLib.Client.Events.OnUnaccountedForArgs.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="T:TwitchLib.Client.Events.OnUserBannedArgs">
            <summary>
            Args representing a user was banned event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserBannedArgs.UserBan">
            <summary>
            The user ban
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnUserJoinedArgs">
            <summary>
            Args representing viewer joined event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserJoinedArgs.Username">
            <summary>
            Property representing username of joined viewer.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserJoinedArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnUserLeftArgs">
            <summary>
            Args representing viewer left event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserLeftArgs.Username">
            <summary>
            Property representing username of user that left.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserLeftArgs.Channel">
            <summary>
            Property representing channel bot is connected to.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnUserStateChangedArgs">
            <summary>
            Args representing on user state changed event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserStateChangedArgs.UserState">
            <summary>
            Property representing user state object.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnUserTimedoutArgs">
            <summary>
            Args representing a user was timed out event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnUserTimedoutArgs.UserTimeout">
            <summary>
            The user timeout
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnVIPsReceivedArgs">
            <summary>
            Args representing a list of VIPs received from chat.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnVIPsReceivedArgs.Channel">
            <summary>
            Property representing the channel the VIPs list came from.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnVIPsReceivedArgs.VIPs">
            <summary>
            Property representing the list of VIPs.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnWhisperCommandReceivedArgs">
            <summary>
            Args representing whisper command received event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnWhisperCommandReceivedArgs.Command">
            <summary>
            Property representing received command.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnWhisperReceivedArgs">
            <summary>
            Class OnWhisperReceivedArgs.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnWhisperReceivedArgs.WhisperMessage">
            <summary>
            The whisper message
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Events.OnWhisperSentArgs">
            <summary>
            Args representing whisper sent event.
            Implements the <see cref="T:System.EventArgs" />
            </summary>
            <seealso cref="T:System.EventArgs" />
            <inheritdoc />
        </member>
        <member name="F:TwitchLib.Client.Events.OnWhisperSentArgs.Username">
            <summary>
            Property representing username of bot.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnWhisperSentArgs.Receiver">
            <summary>
            Property representing receiver of the whisper.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Events.OnWhisperSentArgs.Message">
            <summary>
            Property representing sent message contents.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Exceptions.BadListenException">
            <summary>
            Exception thrown when an event is subscribed to when it shouldn't be.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="M:TwitchLib.Client.Exceptions.BadListenException.#ctor(System.String,System.String)">
            <summary>
            Exception constructor
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="additionalDetails">The additional details.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.BadStateException">
            <summary>
            Exception thrown when the state of the client cannot allow an operation to be run.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="M:TwitchLib.Client.Exceptions.BadStateException.#ctor(System.String)">
            <summary>
            Exception constructor
            </summary>
            <param name="details">The details.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.ClientNotConnectedException">
            <summary>
            Exception thrown when attempting to perform an actino that is only available when the client is connected.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="M:TwitchLib.Client.Exceptions.ClientNotConnectedException.#ctor(System.String)">
            <summary>
            Exception constructor
            </summary>
            <param name="description">The description.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.ClientNotInitializedException">
            <summary>
            Exception thrown when attempting to assign a variable with a different value that is not allowed.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="M:TwitchLib.Client.Exceptions.ClientNotInitializedException.#ctor(System.String)">
            <summary>
            Exception constructor
            </summary>
            <param name="description">The description.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.ErrorLoggingInException">
            <summary>
            Exception representing credentials provided for logging in were bad.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="P:TwitchLib.Client.Exceptions.ErrorLoggingInException.Username">
            <summary>
            Exception representing username associated with bad login.
            </summary>
            <value>The username.</value>
        </member>
        <member name="M:TwitchLib.Client.Exceptions.ErrorLoggingInException.#ctor(System.String,System.String)">
            <summary>
            Exception construtor.
            </summary>
            <param name="ircData">The irc data.</param>
            <param name="twitchUsername">The twitch username.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.EventNotHandled">
            <summary>
            Exception thrown when an event that is not handled is required to be handled.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="M:TwitchLib.Client.Exceptions.EventNotHandled.#ctor(System.String,System.String)">
            <summary>
            Exception constructor
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="additionalDetails">The additional details.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.FailureToReceiveJoinConfirmationException">
            <summary>
            Class FailureToReceiveJoinConfirmationException.
            </summary>
        </member>
        <member name="P:TwitchLib.Client.Exceptions.FailureToReceiveJoinConfirmationException.Channel">
            <summary>
            Exception representing failure of client to receive JOIN confirmation.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="P:TwitchLib.Client.Exceptions.FailureToReceiveJoinConfirmationException.Details">
            <summary>
            Extra details regarding this exception (not always set)
            </summary>
            <value>The details.</value>
        </member>
        <member name="M:TwitchLib.Client.Exceptions.FailureToReceiveJoinConfirmationException.#ctor(System.String,System.String)">
            <summary>
            Exception construtor.
            </summary>
            <param name="channel">The channel.</param>
            <param name="details">The details.</param>
        </member>
        <member name="T:TwitchLib.Client.Exceptions.IllegalAssignmentException">
            <summary>
            Exception thrown when attempting to assign a variable with a different value that is not allowed.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="M:TwitchLib.Client.Exceptions.IllegalAssignmentException.#ctor(System.String)">
            <summary>
            Exception constructor
            </summary>
            <param name="description">The description.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Exceptions.InvalidParameterException">
            <summary>
            Exception representing bad information being provided to function/method.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
            <inheritdoc />
        </member>
        <member name="P:TwitchLib.Client.Exceptions.InvalidParameterException.Username">
            <summary>
            Username that had the exception.
            </summary>
            <value>The username.</value>
        </member>
        <member name="M:TwitchLib.Client.Exceptions.InvalidParameterException.#ctor(System.String,System.String)">
            <summary>
            Exception construtor.
            </summary>
            <param name="reasoning">The reasoning.</param>
            <param name="twitchUsername">The twitch username.</param>
            <inheritdoc />
        </member>
        <member name="T:TwitchLib.Client.Extensions.BanUserExt">
            <summary>
            Extension implementing the ban functionality in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.BanUserExt.BanUser(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using JoinedChannel
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel object to send ban to</param>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.BanUserExt.BanUser(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Bans a user in chat using a string for the channel
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">Channel in string form to send ban to</param>
            <param name="viewer">Viewer name to ban</param>
            <param name="message">Message to accompany the ban and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.ChangeChatColorExt">
            <summary>
            Extension implementing the change chat color functionality in TwitchClient
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ChangeChatColorExt.ChangeChatColor(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,TwitchLib.Client.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel object representing which channel to send command to.</param>
            <param name="color">Enum representing available chat preset colors.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ChangeChatColorExt.ChangeChatColor(TwitchLib.Client.Interfaces.ITwitchClient,System.String,TwitchLib.Client.Enums.ChatColorPresets)">
            <summary>
            Sends request to change color of chat name in Twitch chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representing the channel to send the command to.</param>
            <param name="color">Enum representing available chat preset colors.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.ClearChatExt">
            <summary>
            Extension for implementing clear chat functionality in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ClearChatExt.ClearChat(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send clear chat command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ClearChatExt.ClearChat(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Sends request to clear chat (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send clear chat command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.CommercialExt">
            <summary>
            Extension for implementing Commercial functionality in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.CommercialExt.StartCommercial(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,TwitchLib.Client.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the ad to.</param>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">length - null</exception>
        </member>
        <member name="M:TwitchLib.Client.Extensions.CommercialExt.StartCommercial(TwitchLib.Client.Interfaces.ITwitchClient,System.String,TwitchLib.Client.Enums.CommercialLength)">
            <summary>
            Sends command to start a commercial of variable length.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the ad to.</param>
            <param name="length">Enum representing the length of advertisement should be.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">length - null</exception>
        </member>
        <member name="T:TwitchLib.Client.Extensions.DeleteMessageExt">
            <summary>
            Extension for implementing delete message functionality in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.DeleteMessageExt.DeleteMessage(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Sends request to deleete a specific chat message (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send delete message command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.DeleteMessageExt.DeleteMessage(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Sends request to delete a specific chat message (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to delete message command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.DeleteMessageExt.DeleteMessage(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,TwitchLib.Client.Models.ChatMessage)">
            <summary>
            Sends request to delete a specific chat message (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send delete message command to.</param>
            <param name="msg">ChatMessage object representing chat message that should be deleted.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.DeleteMessageExt.DeleteMessage(TwitchLib.Client.Interfaces.ITwitchClient,System.String,TwitchLib.Client.Models.ChatMessage)">
            <summary>
            Sends request to delete a specific chat message (may be ignored by plugins like BTTV)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to delete message command to.</param>
            <param name="msg">ChatMessage object representing chat message that should be deleted.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.EmoteOnlyExt">
            <summary>
            Extension for implementing emote only mode functionality in TwitchClient
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the enable emote only command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EmoteOnlyExt.EmoteOnlyOn(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Enables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the enable emote only command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the disable emote only command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EmoteOnlyExt.EmoteOnlyOff(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Disables emote only chat requirement.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the disable emote only command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.EventInvocationExt">
            <summary>
            Class EventInvocationExt.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeOnBeingHosted(TwitchLib.Client.TwitchClient,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Invokes the on being hosted.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="botUsername">The bot username.</param>
            <param name="hostedByChannel">The hosted by channel.</param>
            <param name="viewers">The viewers.</param>
            <param name="isAutoHosted">if set to <c>true</c> [is automatic hosted].</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeChannelStateChanged(TwitchLib.Client.TwitchClient,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.String,System.TimeSpan,System.Boolean,System.String)">
            <summary>
            Invokes the channel state changed.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="r9k">if set to <c>true</c> [R9K].</param>
            <param name="rituals">if set to <c>true</c> [rituals].</param>
            <param name="subOnly">if set to <c>true</c> [sub only].</param>
            <param name="slowMode">The slow mode.</param>
            <param name="emoteOnly">if set to <c>true</c> [emote only].</param>
            <param name="broadcasterLanguage">The broadcaster language.</param>
            <param name="followersOnly">The followers only.</param>
            <param name="mercury">if set to <c>true</c> [mercury].</param>
            <param name="roomId">The room identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeChatCleared(TwitchLib.Client.TwitchClient,System.String)">
            <summary>
            Invokes the chat cleared.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeChatCommandsReceived(TwitchLib.Client.TwitchClient,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,TwitchLib.Client.Models.EmoteSet,System.String,TwitchLib.Client.Enums.UserType,System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,TwitchLib.Client.Enums.Noisy,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},TwitchLib.Client.Models.CheerBadge,System.Int32,System.Double,System.String,System.String,System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Invokes the chat commands received.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
            <param name="userId">The user identifier.</param>
            <param name="userName">Name of the user.</param>
            <param name="displayName">The display name.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="color">The color.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="message">The message.</param>
            <param name="userType">Type of the user.</param>
            <param name="channel">The channel.</param>
            <param name="id">The identifier.</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="subscribedMonthCount">The subscribed month count.</param>
            <param name="roomId">The room identifier.</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="isMe">if set to <c>true</c> [is me].</param>
            <param name="isBroadcaster">if set to <c>true</c> [is broadcaster].</param>
            <param name="isVip">if set to <c>true</c> [is VIP].</param>
            <param name="isPartner">if set to <c>true</c> [is Partner].</param>
            <param name="isStaff">if set to <c>true</c> [is Staff].</param>
            <param name="noisy">The noisy.</param>
            <param name="rawIrcMessage">The raw irc message.</param>
            <param name="emoteReplacedMessage">The emote replaced message.</param>
            <param name="badges">The badges.</param>
            <param name="cheerBadge">The cheer badge.</param>
            <param name="bits">The bits.</param>
            <param name="bitsInDollars">The bits in dollars.</param>
            <param name="commandText">The command text.</param>
            <param name="argumentsAsString">The arguments as string.</param>
            <param name="argumentsAsList">The arguments as list.</param>
            <param name="commandIdentifier">The command identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeConnected(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the connected.
            </summary>
            <param name="client">The client.</param>
            <param name="autoJoinChannel">The automatic join channel.</param>
            <param name="botUsername">The bot username.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeConnectionError(TwitchLib.Client.TwitchClient,System.String,TwitchLib.Client.Models.ErrorEvent)">
            <summary>
            Invokes the connection error.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
            <param name="errorEvent">The error event.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeDisconnected(TwitchLib.Client.TwitchClient,System.String)">
            <summary>
            Invokes the disconnected.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeExistingUsersDetected(TwitchLib.Client.TwitchClient,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Invokes the existing users detected.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="users">The users.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeGiftedSubscription(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,TwitchLib.Client.Enums.SubscriptionPlan,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,TwitchLib.Client.Enums.UserType,System.String)">
            <summary>
            Invokes the gifted subscription.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="color">The color.</param>
            <param name="displayName">The display name.</param>
            <param name="emotes">The emotes.</param>
            <param name="id">The identifier.</param>
            <param name="login">The login.</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="msgId">The MSG identifier.</param>
            <param name="msgParamMonths">The MSG parameter months.</param>
            <param name="msgParamRecipientDisplayName">Display name of the MSG parameter recipient.</param>
            <param name="msgParamRecipientId">The MSG parameter recipient identifier.</param>
            <param name="msgParamRecipientUserName">Name of the MSG parameter recipient user.</param>
            <param name="msgParamSubPlanName">Name of the MSG parameter sub plan.</param>
            <param name="msgParamSubPlan">The MSG parameter sub plan.</param>
            <param name="roomId">The room identifier.</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="systemMsg">The system MSG.</param>
            <param name="systemMsgParsed">The system MSG parsed.</param>
            <param name="tmiSentTs">The tmi sent ts.</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="userType">Type of the user.</param>
            <param name="userId">Id of the user.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeOnHostingStarted(TwitchLib.Client.TwitchClient,System.String,System.String,System.Int32)">
            <summary>
            Invokes the on hosting started.
            </summary>
            <param name="client">The client.</param>
            <param name="hostingChannel">The hosting channel.</param>
            <param name="targetChannel">The target channel.</param>
            <param name="viewers">The viewers.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeOnHostingStopped(TwitchLib.Client.TwitchClient,System.String,System.Int32)">
            <summary>
            Invokes the on hosting stopped.
            </summary>
            <param name="client">The client.</param>
            <param name="hostingChannel">The hosting channel.</param>
            <param name="viewers">The viewers.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeHostLeft(TwitchLib.Client.TwitchClient)">
            <summary>
            Invokes the host left.
            </summary>
            <param name="client">The client.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeIncorrectLogin(TwitchLib.Client.TwitchClient,TwitchLib.Client.Exceptions.ErrorLoggingInException)">
            <summary>
            Invokes the incorrect login.
            </summary>
            <param name="client">The client.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeJoinedChannel(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the joined channel.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeLeftChannel(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the left channel.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeLog(TwitchLib.Client.TwitchClient,System.String,System.String,System.DateTime)">
            <summary>
            Invokes the log.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
            <param name="data">The data.</param>
            <param name="dateTime">The date time.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeMessageReceived(TwitchLib.Client.TwitchClient,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,TwitchLib.Client.Models.EmoteSet,System.String,TwitchLib.Client.Enums.UserType,System.String,System.String,System.Boolean,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,TwitchLib.Client.Enums.Noisy,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},TwitchLib.Client.Models.CheerBadge,System.Int32,System.Double)">
            <summary>
            Invokes the message received.
            </summary>
            <param name="client">The client.</param>
            <param name="botUsername">The bot username.</param>
            <param name="userId">The user identifier.</param>
            <param name="userName">Name of the user.</param>
            <param name="displayName">The display name.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="color">The color.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="message">The message.</param>
            <param name="userType">Type of the user.</param>
            <param name="channel">The channel.</param>
            <param name="id">The identifier.</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="subscribedMonthCount">The subscribed month count.</param>
            <param name="roomId">The room identifier.</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="isMe">if set to <c>true</c> [is me].</param>
            <param name="isBroadcaster">if set to <c>true</c> [is broadcaster].</param>
            <param name="noisy">The noisy.</param>
            <param name="rawIrcMessage">The raw irc message.</param>
            <param name="emoteReplacedMessage">The emote replaced message.</param>
            <param name="badges">The badges.</param>
            <param name="cheerBadge">The cheer badge.</param>
            <param name="bits">The bits.</param>
            <param name="bitsInDollars">The bits in dollars.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeMessageSent(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,TwitchLib.Client.Enums.UserType,System.String)">
            <summary>
            Invokes the message sent.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="channel">The channel.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="displayName">The display name.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="userType">Type of the user.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeModeratorJoined(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the moderator joined.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeModeratorLeft(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the moderator left.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeModeratorsReceived(TwitchLib.Client.TwitchClient,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Invokes the moderators received.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="moderators">The moderators.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeNewSubscriber(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Drawing.Color,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,TwitchLib.Client.Enums.SubscriptionPlan,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,TwitchLib.Client.Enums.UserType,System.String,System.String)">
            <summary>
            Invokes the new subscriber.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="color">The color.</param>
            <param name="displayName">The display name.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="id">The identifier.</param>
            <param name="login">The login.</param>
            <param name="systemMessage">The system message.</param>
            <param name="systemMessageParsed">The system message parsed.</param>
            <param name="resubMessage">The resub message.</param>
            <param name="subscriptionPlan">The subscription plan.</param>
            <param name="subscriptionPlanName">Name of the subscription plan.</param>
            <param name="roomId">The room identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="isPartner">if set to <c>true</c> [is partner].</param>
            <param name="tmiSentTs">The tmi sent ts.</param>
            <param name="userType">Type of the user.</param>
            <param name="rawIrc">The raw irc.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeNowHosting(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the now hosting.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="hostedChannel">The hosted channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeRaidNotification(TwitchLib.Client.TwitchClient,System.String,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,TwitchLib.Client.Enums.UserType,System.String)">
            <summary>
            Invokes the raid notification.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="badges">The badges.</param>
            <param name="color">The color.</param>
            <param name="displayName">The display name.</param>
            <param name="emotes">The emotes.</param>
            <param name="id">The identifier.</param>
            <param name="login">The login.</param>
            <param name="moderator">if set to <c>true</c> [moderator].</param>
            <param name="msgId">The MSG identifier.</param>
            <param name="msgParamDisplayName">Display name of the MSG parameter.</param>
            <param name="msgParamLogin">The MSG parameter login.</param>
            <param name="msgParamViewerCount">The MSG parameter viewer count.</param>
            <param name="roomId">The room identifier.</param>
            <param name="subscriber">if set to <c>true</c> [subscriber].</param>
            <param name="systemMsg">The system MSG.</param>
            <param name="systemMsgParsed">The system MSG parsed.</param>
            <param name="tmiSentTs">The tmi sent ts.</param>
            <param name="turbo">if set to <c>true</c> [turbo].</param>
            <param name="userType">Type of the user.</param>
            <param name="userType">Id of user.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeReSubscriber(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Drawing.Color,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,TwitchLib.Client.Enums.SubscriptionPlan,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,TwitchLib.Client.Enums.UserType,System.String,System.String)">
            <summary>
            Invokes the re subscriber.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="color">The color.</param>
            <param name="displayName">The display name.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="id">The identifier.</param>
            <param name="login">The login.</param>
            <param name="systemMessage">The system message.</param>
            <param name="systemMessageParsed">The system message parsed.</param>
            <param name="resubMessage">The resub message.</param>
            <param name="subscriptionPlan">The subscription plan.</param>
            <param name="subscriptionPlanName">Name of the subscription plan.</param>
            <param name="roomId">The room identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="isPartner">if set to <c>true</c> [is partner].</param>
            <param name="tmiSentTs">The tmi sent ts.</param>
            <param name="userType">Type of the user.</param>
            <param name="rawIrc">The raw irc.</param>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeSendReceiveData(TwitchLib.Client.TwitchClient,System.String,TwitchLib.Client.Enums.SendReceiveDirection)">
            <summary>
            Invokes the send receive data.
            </summary>
            <param name="client">The client.</param>
            <param name="data">The data.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeUserBanned(TwitchLib.Client.TwitchClient,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Invokes the user banned.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="username">The username.</param>
            <param name="banReason">The ban reason.</param>
            <param name="roomId">The channel id.</param>
            <param name="targetUserId">The user id.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeUserJoined(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the user joined.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeUserLeft(TwitchLib.Client.TwitchClient,System.String,System.String)">
            <summary>
            Invokes the user left.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="username">The username.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeUserStateChanged(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,TwitchLib.Client.Enums.UserType)">
            <summary>
            Invokes the user state changed.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="displayName">The display name.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="channel">The channel.</param>
            <param name="isSubscriber">if set to <c>true</c> [is subscriber].</param>
            <param name="isModerator">if set to <c>true</c> [is moderator].</param>
            <param name="userType">Type of the user.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeUserTimedout(TwitchLib.Client.TwitchClient,System.String,System.String,System.Int32,System.String)">
            <summary>
            Invokes the user timedout.
            </summary>
            <param name="client">The client.</param>
            <param name="channel">The channel.</param>
            <param name="username">The username.</param>
            <param name="timeoutDuration">Duration of the timeout.</param>
            <param name="timeoutReason">The timeout reason.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeWhisperCommandReceived(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Drawing.Color,System.String,System.String,TwitchLib.Client.Models.EmoteSet,System.String,System.String,System.String,System.Boolean,System.String,System.String,TwitchLib.Client.Enums.UserType,System.String,System.String,System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Invokes the whisper command received.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="color">The color.</param>
            <param name="username">The username.</param>
            <param name="displayName">The display name.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="threadId">The thread identifier.</param>
            <param name="messageId">The message identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="botUsername">The bot username.</param>
            <param name="message">The message.</param>
            <param name="userType">Type of the user.</param>
            <param name="commandText">The command text.</param>
            <param name="argumentsAsString">The arguments as string.</param>
            <param name="argumentsAsList">The arguments as list.</param>
            <param name="commandIdentifier">The command identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeWhisperReceived(TwitchLib.Client.TwitchClient,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String,System.Drawing.Color,System.String,System.String,TwitchLib.Client.Models.EmoteSet,System.String,System.String,System.String,System.Boolean,System.String,System.String,TwitchLib.Client.Enums.UserType)">
            <summary>
            Invokes the whisper received.
            </summary>
            <param name="client">The client.</param>
            <param name="badges">The badges.</param>
            <param name="colorHex">The color hexadecimal.</param>
            <param name="color">The color.</param>
            <param name="username">The username.</param>
            <param name="displayName">The display name.</param>
            <param name="emoteSet">The emote set.</param>
            <param name="threadId">The thread identifier.</param>
            <param name="messageId">The message identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="isTurbo">if set to <c>true</c> [is turbo].</param>
            <param name="botUsername">The bot username.</param>
            <param name="message">The message.</param>
            <param name="userType">Type of the user.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.EventInvocationExt.InvokeWhisperSent(TwitchLib.Client.TwitchClient,System.String,System.String,System.String)">
            <summary>
            Invokes the whisper sent.
            </summary>
            <param name="client">The client.</param>
            <param name="username">The username.</param>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.FollowersOnlyExt">
            <summary>
            Extension for implementing followers online mode functionality in TwitchClient
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Extensions.FollowersOnlyExt.MaximumDurationAllowedDays">
            <summary>
            The maximum duration allowed days
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.FollowersOnlyExt.FollowersOnlyOn(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel object representing which channel to send command to.</param>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <exception cref="T:TwitchLib.Client.Exceptions.InvalidParameterException">The amount of time required to chat exceeded the maximum allowed by Twitch, which is 3 months.</exception>
        </member>
        <member name="M:TwitchLib.Client.Extensions.FollowersOnlyExt.FollowersOnlyOn(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.TimeSpan)">
            <summary>
            Enables follower only chat, requires a TimeSpan object to indicate how long a viewer must have been following to chat. Maximum time is 90 days (3 months).
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representing the channel to send the command to.</param>
            <param name="requiredFollowTime">Amount of time required to pass before a viewer can chat. Maximum is 3 months (90 days).</param>
            <exception cref="T:TwitchLib.Client.Exceptions.InvalidParameterException">The amount of time required to chat exceeded the maximum allowed by Twitch, which is 3 months.</exception>
        </member>
        <member name="M:TwitchLib.Client.Extensions.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of channel to send command to</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.FollowersOnlyExt.FollowersOnlyOff(TwitchLib.Client.TwitchClient,System.String)">
            <summary>
            Disables follower only chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send the command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.GetChannelModeratorsExt">
            <summary>
            Extension for implementing Commercial functionality in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.GetChannelModeratorsExt.GetChannelModerators(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Sends command to get list of moderators from Twitch.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the command to get moderators to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.GetChannelModeratorsExt.GetChannelModerators(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Sends command to get list of moderators from Twitch.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the command to get moderators to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.HostExt">
            <summary>
            Extension for implementing host functionality in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.HostExt.Host(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Sends command to host a given channel.r
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send the host command to.</param>
            <param name="userToHost">The channel to be hosted.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.HostExt.Host(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Sends command to host a given channel.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send the host command to.</param>
            <param name="userToHost">The channel to be hosted.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.HostExt.Unhost(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the unhost command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.HostExt.Unhost(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Sends command to unhost if a stream is being hosted.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the unhost command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.MarkerExt">
            <summary>
            Extension for implementing marker functionality
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.MarkerExt.Marker(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Sends command to create a marker using a JoinedChannel object.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the marker command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.MarkerExt.Marker(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Sends command to create a marker using a string.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the marker command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.ModExt">
            <summary>
            Extension implementing the ability to mod a viewer in TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ModExt.Mod(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ModExt.Mod(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Sends a command to make a specific viewer a moderator.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="viewerToMod">Username of the viewer to make a moderator.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ModExt.Unmod(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ModExt.Unmod(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Sends a command to remove moderator status from a specific viewer
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="viewerToUnmod">Username of the viewer to remove moderator status from.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.RaidExt">
            <summary>
            Extension implementing the ability to start raids via TwitchClient.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.RaidExt.Raid(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Sends command to start raid.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send the command to.</param>
            <param name="channelToRaid">Channel to begin raid on.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.RaidExt.Raid(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Sends command to start raid.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send the command to.</param>
            <param name="channelToRaid">Channel to begin raid on.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.ReplyWhisperExt">
            <summary>
            Extension implementing reply to previous whisper functionality.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.ReplyWhisperExt.ReplyToLastWhisper(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.Boolean)">
            <summary>
            SendWhisper wrapper method that will send a whisper back to the user who most recently sent a whisper to this bot.
            </summary>
            <param name="client">The client.</param>
            <param name="message">The message.</param>
            <param name="dryRun">if set to <c>true</c> [dry run].</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.SlowModeExt">
            <summary>
            Extension to implement slowmode functionality in TwitchClient
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SlowModeExt.SlowModeOn(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send the slow command to.</param>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <exception cref="T:TwitchLib.Client.Exceptions.InvalidParameterException">The message cooldown time supplied exceeded the maximum allowed by Twitch, which is 1 day.</exception>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SlowModeExt.SlowModeOn(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.TimeSpan)">
            <summary>
            Enables slow mode. messageCooldown must be less than 1 day.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send the slow command to.</param>
            <param name="messageCooldown">TimeSpan object representing how long message cooldowns should be. May not exceed 1 day total.</param>
            <exception cref="T:TwitchLib.Client.Exceptions.InvalidParameterException">The message cooldown time supplied exceeded the maximum allowed by Twitch, which is 1 day.</exception>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SlowModeExt.SlowModeOff(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send slowoff command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SlowModeExt.SlowModeOff(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Disables slow mode.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send slowoff command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.SubscribersOnly">
            <summary>
            Extension implementing subscriber only functionality in TwitchClient
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SubscribersOnly.SubscribersOnlyOn(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send subscriber only command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SubscribersOnly.SubscribersOnlyOn(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send subscriber only command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SubscribersOnly.SubscribersOnlyOff(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Enables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of which channel to send subscriber only off command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.SubscribersOnly.SubscribersOnlyOff(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Disables subscriber only mode in chat.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of which channel to send subscriber only off command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.TimeoutUserExt">
            <summary>
            Extension implementing timeout functionality in TwitchClient
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.TimeoutUserExt.TimeoutUser(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            TImesout a user in chat using a JoinedChannel object.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">Channel object to send timeout to</param>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.TimeoutUserExt.TimeoutUser(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String,System.TimeSpan,System.String,System.Boolean)">
            <summary>
            Timesout a user in chat using a string for the channel.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">Channel in string form to send timeout to</param>
            <param name="viewer">Viewer name to timeout</param>
            <param name="duration">Duration of the timeout via TimeSpan object</param>
            <param name="message">Message to accompany the timeout and show the user.</param>
            <param name="dryRun">Indicates a dryrun (will not sened if true)</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.UnbanUserExt">
            <summary>
            Extension to implement unban functionality.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.UnbanUserExt.UnbanUser(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using JoinedChannel
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel object to send unban to</param>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.UnbanUserExt.UnbanUser(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String,System.Boolean)">
            <summary>
            Unbans a user in chat using a string for the channel
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">Channel in string form to send unban to</param>
            <param name="viewer">Viewer name to unban</param>
            <param name="dryRun">Indicates a dryrun (will not send if true)</param>
        </member>
        <member name="T:TwitchLib.Client.Extensions.VIPExt">
            <summary>
            Extension for using VIP related commands in TwitchClient
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Extensions.VIPExt.VIP(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Creates new VIP user (REQUIRES SCOPE: channel:moderate)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the VIP command to.</param>
            <param name="viewerToVIP">The viewer to vip.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.VIPExt.VIP(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Creates new VIP user (REQUIRES SCOPE: channel:moderate)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the VIP command to.</param>
            <param name="viewerToVIP">The viewer to vip.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.VIPExt.UnVIP(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel,System.String)">
            <summary>
            Removes VIP status from user (REQUIRES SCOPE: channel:moderate)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the unvip command to.</param>
            <param name="viewerToUnVIP">The viewer to un vip.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.VIPExt.UnVIP(TwitchLib.Client.Interfaces.ITwitchClient,System.String,System.String)">
            <summary>
            Removes VIP status from user (REQUIRES SCOPE: channel:moderate)
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the unvip command to.</param>
            <param name="viewerToUnVIP">The viewer to un vip.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.VIPExt.GetVIPs(TwitchLib.Client.Interfaces.ITwitchClient,TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Asks Twitch for a list of VIPs in the channel. Listen to OnVIPsReceived event for the response.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">JoinedChannel representation of the channel to send the vips command to.</param>
        </member>
        <member name="M:TwitchLib.Client.Extensions.VIPExt.GetVIPs(TwitchLib.Client.Interfaces.ITwitchClient,System.String)">
            <summary>
            Asks Twitch for a list of VIPs in the channel. Listen to OnVIPsReceived event for the response.
            </summary>
            <param name="client">Client reference used to identify extension.</param>
            <param name="channel">String representation of the channel to send the vips command to.</param>
        </member>
        <member name="T:TwitchLib.Client.Interfaces.ITwitchClient">
            <summary>
            Interface ITwitchClient
            </summary>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.AutoReListenOnException">
            <summary>
            Gets or sets a value indicating whether [automatic re listen on exception].
            </summary>
            <value><c>true</c> if [automatic re listen on exception]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.ChannelEmotes">
            <summary>
            Gets the channel emotes.
            </summary>
            <value>The channel emotes.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.ConnectionCredentials">
            <summary>
            Gets the connection credentials.
            </summary>
            <value>The connection credentials.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.DisableAutoPong">
            <summary>
            Gets or sets a value indicating whether [disable automatic pong].
            </summary>
            <value><c>true</c> if [disable automatic pong]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.IsInitialized">
            <summary>
            Gets a value indicating whether this instance is initialized.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.JoinedChannels">
            <summary>
            Gets the joined channels.
            </summary>
            <value>The joined channels.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.OverrideBeingHostedCheck">
            <summary>
            Gets or sets a value indicating whether [override being hosted check].
            </summary>
            <value><c>true</c> if [override being hosted check]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.PreviousWhisper">
            <summary>
            Gets the previous whisper.
            </summary>
            <value>The previous whisper.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.TwitchUsername">
            <summary>
            Gets the twitch username.
            </summary>
            <value>The twitch username.</value>
        </member>
        <member name="P:TwitchLib.Client.Interfaces.ITwitchClient.WillReplaceEmotes">
            <summary>
            Gets or sets a value indicating whether [will replace emotes].
            </summary>
            <value><c>true</c> if [will replace emotes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnBeingHosted">
            <summary>
            Occurs when [on being hosted].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnChannelStateChanged">
            <summary>
            Occurs when [on channel state changed].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnChatCleared">
            <summary>
            Occurs when [on chat cleared].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnChatColorChanged">
            <summary>
            Occurs when [on chat color changed].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnChatCommandReceived">
            <summary>
            Occurs when [on chat command received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnConnected">
            <summary>
            Occurs when [on connected].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnConnectionError">
            <summary>
            Occurs when [on connection error].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnDisconnected">
            <summary>
            Occurs when [on disconnected].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnExistingUsersDetected">
            <summary>
            Occurs when [on existing users detected].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnGiftedSubscription">
            <summary>
            Occurs when [on gifted subscription].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnHostingStarted">
            <summary>
            Occurs when [on hosting started].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnHostingStopped">
            <summary>
            Occurs when [on hosting stopped].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnHostLeft">
            <summary>
            Occurs when [on host left].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnIncorrectLogin">
            <summary>
            Occurs when [on incorrect login].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnJoinedChannel">
            <summary>
            Occurs when [on joined channel].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnLeftChannel">
            <summary>
            Occurs when [on left channel].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnLog">
            <summary>
            Occurs when [on log].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnMessageReceived">
            <summary>
            Occurs when [on message received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnMessageSent">
            <summary>
            Occurs when [on message sent].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnModeratorJoined">
            <summary>
            Occurs when [on moderator joined].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnModeratorLeft">
            <summary>
            Occurs when [on moderator left].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnModeratorsReceived">
            <summary>
            Occurs when [on moderators received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnNewSubscriber">
            <summary>
            Occurs when [on new subscriber].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnNowHosting">
            <summary>
            Occurs when [on now hosting].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnRaidNotification">
            <summary>
            Occurs when [on raid notification].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnReSubscriber">
            <summary>
            Occurs when [on re subscriber].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnSendReceiveData">
            <summary>
            Occurs when [on send receive data].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnUserBanned">
            <summary>
            Occurs when [on user banned].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnUserJoined">
            <summary>
            Occurs when [on user joined].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnUserLeft">
            <summary>
            Occurs when [on user left].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnUserStateChanged">
            <summary>
            Occurs when [on user state changed].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnUserTimedout">
            <summary>
            Occurs when [on user timedout].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnWhisperCommandReceived">
            <summary>
            Occurs when [on whisper command received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnWhisperReceived">
            <summary>
            Occurs when [on whisper received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnWhisperSent">
            <summary>
            Occurs when [on whisper sent].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnMessageThrottled">
            <summary>
            Occurs when [on message throttled].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnWhisperThrottled">
            <summary>
            Occurs when [on whisper throttled].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnError">
            <summary>
            Occurs when [on error].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnReconnected">
            <summary>
            Occurs when [on reconnected].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnVIPsReceived">
            <summary>
            Occurs when [on vip received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnCommunitySubscription">
            <summary>
            Occurs when [on community subscription announcement received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnMessageCleared">
            <summary>
            Occurs when [on message deleted].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnRitualNewChatter">
            <summary>
            Occurs when [on ritual for new chatter received].
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnRequiresVerifiedEmail">
            <summary>
            Occurs when chatting in a channel that requires a verified email without a verified email attached to the account.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnRequiresVerifiedPhoneNumber">
            <summary>
            Occurs when chatting in a channel that requires a verified phone number without a verified phone number attached to the account.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.Interfaces.ITwitchClient.OnBannedEmailAlias">
            <summary>
            Occurs when chatting in a channel that the user is banned in bcs of an already banned alias with the same Email
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.Initialize(TwitchLib.Client.Models.ConnectionCredentials,System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes the specified credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="channel">The channel.</param>
            <param name="chatCommandIdentifier">The chat command identifier.</param>
            <param name="whisperCommandIdentifier">The whisper command identifier.</param>
            <param name="autoReListenOnExceptions">if set to <c>true</c> [automatic re listen on exceptions].</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.Initialize(TwitchLib.Client.Models.ConnectionCredentials,System.Collections.Generic.List{System.String},System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes the specified credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <param name="channels">The channels to join once connected.</param>
            <param name="chatCommandIdentifier">The chat command identifier.</param>
            <param name="whisperCommandIdentifier">The whisper command identifier.</param>
            <param name="autoReListenOnExceptions">if set to <c>true</c> [automatic re listen on exceptions].</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SetConnectionCredentials(TwitchLib.Client.Models.ConnectionCredentials)">
            <summary>
            Sets the connection credentials.
            </summary>
            <param name="credentials">The credentials.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.AddChatCommandIdentifier(System.Char)">
            <summary>
            Adds the chat command identifier.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.AddWhisperCommandIdentifier(System.Char)">
            <summary>
            Adds the whisper command identifier.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.RemoveChatCommandIdentifier(System.Char)">
            <summary>
            Removes the chat command identifier.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.RemoveWhisperCommandIdentifier(System.Char)">
            <summary>
            Removes the whisper command identifier.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.Connect">
            <summary>
            Connects this instance.
            </summary>
            <returns>bool representing Connect() result</returns>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.Disconnect">
            <summary>
            Disconnects this instance.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.Reconnect">
            <summary>
            Reconnects this instance.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.GetJoinedChannel(System.String)">
            <summary>
            Gets the joined channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>JoinedChannel.</returns>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.JoinChannel(System.String,System.Boolean)">
            <summary>
            Joins the channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="overrideCheck">if set to <c>true</c> [override check].</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.LeaveChannel(TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Leaves the channel.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.LeaveChannel(System.String)">
            <summary>
            Leaves the channel.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.OnReadLineTest(System.String)">
            <summary>
            Called when [read line test].
            </summary>
            <param name="rawIrc">The raw irc.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendMessage(TwitchLib.Client.Models.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Sends the message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="dryRun">if set to <c>true</c> [dry run].</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendMessage(System.String,System.String,System.Boolean)">
            <summary>
            Sends the message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="dryRun">if set to <c>true</c> [dry run].</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendReply(TwitchLib.Client.Models.JoinedChannel,System.String,System.String,System.Boolean)">
            <summary>
            Sends a formatted Twitch chat message reply.
            </summary>
            <param name="channel">Channel to send Twitch chat reply to</param>
            <param name="replyToId">The message id that is being replied to</param>
            <param name="message">Reply contents</param>
            <param name="dryRun">if set to <c>true</c> [dry run]</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendReply(System.String,System.String,System.String,System.Boolean)">
            <summary>
            SendReply wrapper that accepts channel in string form.
            </summary>
            <param name="channel">Channel to send Twitch chat reply to</param>
            <param name="replyToId">The message id that is being replied to</param>
            <param name="message">Reply contents</param>
            <param name="dryRun">if set to <c>true</c> [dry run]</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendQueuedItem(System.String)">
            <summary>
            Sends the queued item.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendRaw(System.String)">
            <summary>
            Sends the raw.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwitchLib.Client.Interfaces.ITwitchClient.SendWhisper(System.String,System.String,System.Boolean)">
            <summary>
            Sends the whisper.
            </summary>
            <param name="receiver">The receiver.</param>
            <param name="message">The message.</param>
            <param name="dryRun">if set to <c>true</c> [dry run].</param>
        </member>
        <member name="T:TwitchLib.Client.Internal.Parsing.IrcParser">
            <summary>
            Class IrcParser.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Internal.Parsing.IrcParser.ParseIrcMessage(System.String)">
            <summary>
            Builds an IrcMessage from a raw string
            </summary>
            <param name="raw">Raw IRC message</param>
            <returns>IrcMessage object</returns>
        </member>
        <member name="T:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState">
            <summary>
            Enum ParserState
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState.STATE_NONE">
            <summary>
            The state none
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState.STATE_V3">
            <summary>
            The state v3
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState.STATE_PREFIX">
            <summary>
            The state prefix
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState.STATE_COMMAND">
            <summary>
            The state command
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState.STATE_PARAM">
            <summary>
            The state parameter
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Parsing.IrcParser.ParserState.STATE_TRAILING">
            <summary>
            The state trailing
            </summary>
        </member>
        <member name="T:TwitchLib.Client.Internal.Rfc2812">
            <summary>
            Class detailing Rfc2812 specifications
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Internal.Rfc2812.NicknameRegex">
            <summary>
            The nickname regex
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TwitchLib.Client.Internal.Rfc2812" /> class from being created.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.IsValidNickname(System.String)">
            <summary>
            Checks if the passed nickname is valid according to the RFC
            Use with caution, many IRC servers are not conform with this!
            </summary>
            <param name="nickname">The nickname.</param>
            <returns><c>true</c> if [is valid nickname] [the specified nickname]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Pass(System.String)">
            <summary>
            Pass message.
            </summary>
            <param name="password">The password.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Nick(System.String)">
            <summary>
            Nick message.
            </summary>
            <param name="nickname">The nickname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.User(System.String,System.Int32,System.String)">
            <summary>
            User message.
            </summary>
            <param name="username">The username.</param>
            <param name="usermode">The usermode.</param>
            <param name="realname">The realname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Oper(System.String,System.String)">
            <summary>
            Oper message.
            </summary>
            <param name="name">The name.</param>
            <param name="password">The password.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Privmsg(System.String,System.String)">
            <summary>
            Privmsg message.
            </summary>
            <param name="destination">The destination.</param>
            <param name="message">The message.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Notice(System.String,System.String)">
            <summary>
            Notice message.
            </summary>
            <param name="destination">The destination.</param>
            <param name="message">The message.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Join(System.String)">
            <summary>
            Join message.
            </summary>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Join(System.String[])">
            <summary>
            Join message.
            </summary>
            <param name="channels">The channels.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Join(System.String,System.String)">
            <summary>
            Join message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Join(System.String[],System.String[])">
            <summary>
            Join message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="keys">The keys.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Part(System.String)">
            <summary>
            Part message.
            </summary>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Part(System.String[])">
            <summary>
            Part message.
            </summary>
            <param name="channels">The channels.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Part(System.String,System.String)">
            <summary>
            Part message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="partmessage">The partmessage.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Part(System.String[],System.String)">
            <summary>
            Part message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="partmessage">The partmessage.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String,System.String)">
            <summary>
            Kick message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="nickname">The nickname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String,System.String,System.String)">
            <summary>
            Kick message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="nickname">The nickname.</param>
            <param name="comment">The comment.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String[],System.String)">
            <summary>
            Kick message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="nickname">The nickname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String[],System.String,System.String)">
            <summary>
            Kick message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="nickname">The nickname.</param>
            <param name="comment">The comment.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String,System.String[])">
            <summary>
            Kick message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="nicknames">The nicknames.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String,System.String[],System.String)">
            <summary>
            Kick message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="nicknames">The nicknames.</param>
            <param name="comment">The comment.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String[],System.String[])">
            <summary>
            Kick message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="nicknames">The nicknames.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kick(System.String[],System.String[],System.String)">
            <summary>
            Kick message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="nicknames">The nicknames.</param>
            <param name="comment">The comment.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Motd">
            <summary>
            Motd message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Motd(System.String)">
            <summary>
            Motd message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Lusers">
            <summary>
            Luser message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Lusers(System.String)">
            <summary>
            Luser message.
            </summary>
            <param name="mask">The mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Lusers(System.String,System.String)">
            <summary>
            Lusers
            </summary>
            <param name="mask">The mask.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Version">
            <summary>
            Version message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Version(System.String)">
            <summary>
            Version message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Stats">
            <summary>
            Stats message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Stats(System.String)">
            <summary>
            Stats message.
            </summary>
            <param name="query">The query.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Stats(System.String,System.String)">
            <summary>
            Stats message.
            </summary>
            <param name="query">The query.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Links">
            <summary>
            Links message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Links(System.String)">
            <summary>
            Links message.
            </summary>
            <param name="servermask">The servermask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Links(System.String,System.String)">
            <summary>
            Links message.
            </summary>
            <param name="remoteserver">The remoteserver.</param>
            <param name="servermask">The servermask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Time">
            <summary>
            Time message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Time(System.String)">
            <summary>
            Time message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Connect(System.String,System.String)">
            <summary>
            Connect message.
            </summary>
            <param name="targetserver">The targetserver.</param>
            <param name="port">The port.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Connect(System.String,System.String,System.String)">
            <summary>
            Connect message.
            </summary>
            <param name="targetserver">The targetserver.</param>
            <param name="port">The port.</param>
            <param name="remoteserver">The remoteserver.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Trace">
            <summary>
            Trace message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Trace(System.String)">
            <summary>
            Trace message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Admin">
            <summary>
            Admin message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Admin(System.String)">
            <summary>
            Admin message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Info">
            <summary>
            Info message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Info(System.String)">
            <summary>
            Info message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Servlist">
            <summary>
            Servlist message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Servlist(System.String)">
            <summary>
            Servlist message.
            </summary>
            <param name="mask">The mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Servlist(System.String,System.String)">
            <summary>
            Servlist message.
            </summary>
            <param name="mask">The mask.</param>
            <param name="type">The type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Squery(System.String,System.String)">
            <summary>
            Squery message.
            </summary>
            <param name="servicename">The servicename.</param>
            <param name="servicetext">The servicetext.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.List">
            <summary>
            List message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.List(System.String)">
            <summary>
            List message.
            </summary>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.List(System.String[])">
            <summary>
            List message.
            </summary>
            <param name="channels">The channels.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.List(System.String,System.String)">
            <summary>
            List message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.List(System.String[],System.String)">
            <summary>
            List message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Names">
            <summary>
            Names message
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Names(System.String)">
            <summary>
            Names message.
            </summary>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Names(System.String[])">
            <summary>
            Names message.
            </summary>
            <param name="channels">The channels.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Names(System.String,System.String)">
            <summary>
            Names message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Names(System.String[],System.String)">
            <summary>
            Names message.
            </summary>
            <param name="channels">The channels.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Topic(System.String)">
            <summary>
            Topic message.
            </summary>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Topic(System.String,System.String)">
            <summary>
            Topic message.
            </summary>
            <param name="channel">The channel.</param>
            <param name="newtopic">The newtopic.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Mode(System.String)">
            <summary>
            Mode message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Mode(System.String,System.String)">
            <summary>
            Mode message.
            </summary>
            <param name="target">The target.</param>
            <param name="newmode">The newmode.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Mode(System.String,System.String[],System.String[])">
            <summary>
            Mode message.
            </summary>
            <param name="target">The target.</param>
            <param name="newModes">The new modes.</param>
            <param name="newModeParameters">The new mode parameters.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">newModes
            or
            newModeParameters</exception>
            <exception cref="T:System.ArgumentException">newModes and newModeParameters must have the same size.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Length - Mode change list is too large (&gt; {maxModeChanges}</exception>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Service(System.String,System.String,System.String)">
            <summary>
            Service message.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="distribution">The distribution.</param>
            <param name="info">The information.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Invite(System.String,System.String)">
            <summary>
            Invite message.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Who">
            <summary>
            Who message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Who(System.String)">
            <summary>
            Who message.
            </summary>
            <param name="mask">The mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Who(System.String,System.Boolean)">
            <summary>
            Who message.
            </summary>
            <param name="mask">The mask.</param>
            <param name="ircop">if set to <c>true</c> [ircop].</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whois(System.String)">
            <summary>
            Whois message.
            </summary>
            <param name="mask">The mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whois(System.String[])">
            <summary>
            Whois message.
            </summary>
            <param name="masks">The masks.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whois(System.String,System.String)">
            <summary>
            Whois message.
            </summary>
            <param name="target">The target.</param>
            <param name="mask">The mask.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whois(System.String,System.String[])">
            <summary>
            Whois message.
            </summary>
            <param name="target">The target.</param>
            <param name="masks">The masks.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whowas(System.String)">
            <summary>
            Whowas message.
            </summary>
            <param name="nickname">The nickname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whowas(System.String[])">
            <summary>
            Whowas message.
            </summary>
            <param name="nicknames">The nicknames.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whowas(System.String,System.String)">
            <summary>
            Whowas message.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="count">The count.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whowas(System.String[],System.String)">
            <summary>
            Whowas message.
            </summary>
            <param name="nicknames">The nicknames.</param>
            <param name="count">The count.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whowas(System.String,System.String,System.String)">
            <summary>
            Whowas message.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="count">The count.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Whowas(System.String[],System.String,System.String)">
            <summary>
            Whowas message.
            </summary>
            <param name="nicknames">The nicknames.</param>
            <param name="count">The count.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Kill(System.String,System.String)">
            <summary>
            Kill message.
            </summary>
            <param name="nickname">The nickname.</param>
            <param name="comment">The comment.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Ping(System.String)">
            <summary>
            Ping message.
            </summary>
            <param name="server">The server.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Ping(System.String,System.String)">
            <summary>
            Ping message.
            </summary>
            <param name="server">The server.</param>
            <param name="server2">The server2.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Pong(System.String)">
            <summary>
            Pong message.
            </summary>
            <param name="server">The server.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Pong(System.String,System.String)">
            <summary>
            Pong message.
            </summary>
            <param name="server">The server.</param>
            <param name="server2">The server2.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Error(System.String)">
            <summary>
            Error message.
            </summary>
            <param name="errormessage">The errormessage.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Away">
            <summary>
            Away message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Away(System.String)">
            <summary>
            Away message.
            </summary>
            <param name="awaytext">The awaytext.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Rehash">
            <summary>
            Rehash message
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Die">
            <summary>
            Die message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Restart">
            <summary>
            Restart message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Summon(System.String)">
            <summary>
            Summon message.
            </summary>
            <param name="user">The user.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Summon(System.String,System.String)">
            <summary>
            Summon message.
            </summary>
            <param name="user">The user.</param>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Summon(System.String,System.String,System.String)">
            <summary>
            Summon message.
            </summary>
            <param name="user">The user.</param>
            <param name="target">The target.</param>
            <param name="channel">The channel.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Users">
            <summary>
            Users message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Users(System.String)">
            <summary>
            Users message.
            </summary>
            <param name="target">The target.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Wallops(System.String)">
            <summary>
            Wallops message.
            </summary>
            <param name="wallopstext">The wallopstext.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Userhost(System.String)">
            <summary>
            Userhost message.
            </summary>
            <param name="nickname">The nickname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Userhost(System.String[])">
            <summary>
            Userhost message.
            </summary>
            <param name="nicknames">The nicknames.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Ison(System.String)">
            <summary>
            Ison message.
            </summary>
            <param name="nickname">The nickname.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Ison(System.String[])">
            <summary>
            Ison message.
            </summary>
            <param name="nicknames">The nicknames.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Quit">
            <summary>
            Quit message.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Quit(System.String)">
            <summary>
            Quit message.
            </summary>
            <param name="quitmessage">The quitmessage.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:TwitchLib.Client.Internal.Rfc2812.Squit(System.String,System.String)">
            <summary>
            Squit message.
            </summary>
            <param name="server">The server.</param>
            <param name="comment">The comment.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:TwitchLib.Client.Manager.JoinedChannelManager">
            <summary>
            Class JoinedChannelManager.
            </summary>
        </member>
        <member name="F:TwitchLib.Client.Manager.JoinedChannelManager._joinedChannels">
            <summary>
            The joined channels
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Manager.JoinedChannelManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwitchLib.Client.Manager.JoinedChannelManager" /> class.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.Manager.JoinedChannelManager.AddJoinedChannel(TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Adds the joined channel.
            </summary>
            <param name="joinedChannel">The joined channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Manager.JoinedChannelManager.GetJoinedChannel(System.String)">
            <summary>
            Gets the joined channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>JoinedChannel.</returns>
        </member>
        <member name="M:TwitchLib.Client.Manager.JoinedChannelManager.GetJoinedChannels">
            <summary>
            Gets the joined channels.
            </summary>
            <returns>IReadOnlyList&lt;JoinedChannel&gt;.</returns>
        </member>
        <member name="M:TwitchLib.Client.Manager.JoinedChannelManager.RemoveJoinedChannel(System.String)">
            <summary>
            Removes the joined channel.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.Manager.JoinedChannelManager.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:TwitchLib.Client.TwitchClient">
            <summary>
            Represents a client connected to a Twitch channel.
            Implements the <see cref="T:TwitchLib.Client.Interfaces.ITwitchClient" />
            </summary>
            <seealso cref="T:TwitchLib.Client.Interfaces.ITwitchClient" />
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._client">
            <summary>
            The client
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._channelEmotes">
            <summary>
            The channel emotes
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._chatCommandIdentifiers">
            <summary>
            The chat command identifiers
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._whisperCommandIdentifiers">
            <summary>
            The whisper command identifiers
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._joinChannelQueue">
            <summary>
            The join channel queue
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._protocol">
            <summary>
            The protocol
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._currentlyJoiningChannels">
            <summary>
            The currently joining channels
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._joinTimer">
            <summary>
            The join timer
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._awaitingJoins">
            <summary>
            The awaiting joins
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._ircParser">
            <summary>
            The irc parser
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._joinedChannelManager">
            <summary>
            The joined channel manager
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._hasSeenJoinedChannels">
            <summary>
            The has seen joined channels
            </summary>
        </member>
        <member name="F:TwitchLib.Client.TwitchClient._lastMessageSent">
            <summary>
            The last message sent
            </summary>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.Version">
            <summary>
            Assembly version of TwitchLib.Client.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.IsInitialized">
            <summary>
            Checks if underlying client has been initialized.
            </summary>
            <value><c>true</c> if this instance is initialized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.JoinedChannels">
            <summary>
            A list of all channels the client is currently in.
            </summary>
            <value>The joined channels.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.TwitchUsername">
            <summary>
            Username of the user connected via this library.
            </summary>
            <value>The twitch username.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.PreviousWhisper">
            <summary>
            The most recent whisper received.
            </summary>
            <value>The previous whisper.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.IsConnected">
            <summary>
            The current connection status of the client.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.ChannelEmotes">
            <summary>
            The emotes this channel replaces.
            </summary>
            <value>The channel emotes.</value>
            <remarks>Twitch-handled emotes are automatically added to this collection (which also accounts for
            managing user emote permissions such as sub-only emotes). Third-party emotes will have to be manually
            added according to the availability rules defined by the third-party.</remarks>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.DisableAutoPong">
            <summary>
            Will disable the client from sending automatic PONG responses to PING
            </summary>
            <value><c>true</c> if [disable automatic pong]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.WillReplaceEmotes">
            <summary>
            Determines whether Emotes will be replaced in messages.
            </summary>
            <value><c>true</c> if [will replace emotes]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.OverrideBeingHostedCheck">
            <summary>
            If set to true, the library will not check upon channel join that if BeingHosted event is subscribed, that the bot is connected as broadcaster. Only override if the broadcaster is joining multiple channels, including the broadcaster's.
            </summary>
            <value><c>true</c> if [override being hosted check]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.ConnectionCredentials">
            <summary>
            Provides access to connection credentials object.
            </summary>
            <value>The connection credentials.</value>
        </member>
        <member name="P:TwitchLib.Client.TwitchClient.AutoReListenOnException">
            <summary>
            Provides access to autorelistiononexception on off boolean.
            </summary>
            <value><c>true</c> if [automatic re listen on exception]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnVIPsReceived">
            <summary>
            Fires when VIPs are received from chat
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnLog">
            <summary>
            Fires whenever a log write happens.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnConnected">
            <summary>
            Fires when client connects to Twitch.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnJoinedChannel">
            <summary>
            Fires when client joins a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnIncorrectLogin">
            <summary>
            Fires on logging in with incorrect details, returns ErrorLoggingInException.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnChannelStateChanged">
            <summary>
            Fires when connecting and channel state is changed, returns ChannelState.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnUserStateChanged">
            <summary>
            Fires when a user state is received, returns UserState.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnMessageReceived">
            <summary>
            Fires when a new chat message arrives, returns ChatMessage.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnWhisperReceived">
            <summary>
            Fires when a new whisper arrives, returns WhisperMessage.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnMessageSent">
            <summary>
            Fires when a chat message is sent, returns username, channel and message.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnWhisperSent">
            <summary>
            Fires when a whisper message is sent, returns username and message.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnChatCommandReceived">
            <summary>
            Fires when command (uses custom chat command identifier) is received, returns channel, command, ChatMessage, arguments as string, arguments as list.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnWhisperCommandReceived">
            <summary>
            Fires when command (uses custom whisper command identifier) is received, returns command, Whispermessage.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnUserJoined">
            <summary>
            Fires when a new viewer/chatter joined the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnModeratorJoined">
            <summary>
            Fires when a moderator joined the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnModeratorLeft">
            <summary>
            Fires when a moderator joins the channel's chat room, returns username and channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnMessageCleared">
            <summary>
            Fires when a message gets deleted in chat.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnNewSubscriber">
            <summary>
            Fires when new subscriber is announced in chat, returns Subscriber.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnReSubscriber">
            <summary>
            Fires when current subscriber renews subscription, returns ReSubscriber.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnPrimePaidSubscriber">
            <summary>
            Fires when a current Prime gaming subscriber converts to a paid subscription.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnHostLeft">
            <summary>
            Fires when a hosted streamer goes offline and hosting is killed.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnExistingUsersDetected">
            <summary>
            Fires when Twitch notifies client of existing users in chat.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnUserLeft">
            <summary>
            Fires when a PART message is received from Twitch regarding a particular viewer
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnHostingStarted">
            <summary>
            Fires when the joined channel begins hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnHostingStopped">
            <summary>
            Fires when the joined channel quits hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnDisconnected">
            <summary>
            Fires when bot has disconnected.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnConnectionError">
            <summary>
            Forces when bot suffers connection error.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnChatCleared">
            <summary>
            Fires when a channel's chat is cleared.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnUserTimedout">
            <summary>
            Fires when a viewer gets timedout by any moderator.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnLeftChannel">
            <summary>
            Fires when client successfully leaves a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnUserBanned">
            <summary>
            Fires when a viewer gets banned by any moderator.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnModeratorsReceived">
            <summary>
            Fires when a list of moderators is received.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnChatColorChanged">
            <summary>
            Fires when confirmation of a chat color change request was received.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnSendReceiveData">
            <summary>
            Fires when data is either received or sent.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnNowHosting">
            <summary>
            Fires when client receives notice that a joined channel is hosting another channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnBeingHosted">
            <summary>
            Fires when the library detects another channel has started hosting the broadcaster's stream. MUST BE CONNECTED AS BROADCASTER.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnRaidNotification">
            <summary>
            Fires when a raid notification is detected in chat
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnGiftedSubscription">
            <summary>
            Fires when a subscription is gifted and announced in chat
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnCommunitySubscription">
            <summary>
            Fires when a community subscription is announced in chat
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnContinuedGiftedSubscription">
            <summary>
            
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnMessageThrottled">
            <summary>
            Fires when a Message has been throttled.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnWhisperThrottled">
            <summary>
            Fires when a Whisper has been throttled.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnError">
            <summary>
            Occurs when an Error is thrown in the protocol client
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnReconnected">
            <summary>
            Occurs when a reconnection occurs.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnRitualNewChatter">
            <summary>
            Fires when a ritual for a new chatter is received.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnRequiresVerifiedEmail">
            <summary>
            Occurs when chatting in a channel that requires a verified email without a verified email attached to the account.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnRequiresVerifiedPhoneNumber">
            <summary>
            Occurs when chatting in a channel that requires a verified phone number without a verified phone number attached to the account.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnBannedEmailAlias">
            <summary>
            Occurs when chatting in a channel that the user is banned in bcs of an already banned alias with the same Email
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnSelfRaidError">
            <summary>
            Fires when TwitchClient attempts to host a channel it is in.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnNoPermissionError">
            <summary>
            Fires when TwitchClient receives generic no permission error from Twitch.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnRaidedChannelIsMatureAudience">
            <summary>
            Fires when newly raided channel is mature audience only.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnFailureToReceiveJoinConfirmation">
            <summary>
            Fires when the client was unable to join a channel.
            </summary>
        </member>
        <member name="E:TwitchLib.Client.TwitchClient.OnUnaccountedFor">
            <summary>
            Fires when data is received from Twitch that is not able to be parsed.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.#ctor(TwitchLib.Communication.Interfaces.IClient,TwitchLib.Client.Enums.ClientProtocol,Microsoft.Extensions.Logging.ILogger{TwitchLib.Client.TwitchClient})">
            <summary>
            Initializes the TwitchChatClient class.
            </summary>
            <param name="client">Protocol Client to use for connection from TwitchLib.Communication. Possible Options Are the TcpClient client or WebSocket client.</param>
            <param name="protocol">The protocol.</param>
            <param name="logger">Optional ILogger instance to enable logging</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Initialize(TwitchLib.Client.Models.ConnectionCredentials,System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes the TwitchChatClient class.
            </summary>
            <param name="credentials">The credentials to use to log in.</param>
            <param name="channel">The channel to connect to.</param>
            <param name="chatCommandIdentifier">The identifier to be used for reading and writing commands from chat.</param>
            <param name="whisperCommandIdentifier">The identifier to be used for reading and writing commands from whispers.</param>
            <param name="autoReListenOnExceptions">By default, TwitchClient will silence exceptions and auto-relisten for overall stability. For debugging, you may wish to have the exception bubble up, set this to false.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Initialize(TwitchLib.Client.Models.ConnectionCredentials,System.Collections.Generic.List{System.String},System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes the TwitchChatClient class (with multiple channels).
            </summary>
            <param name="credentials">The credentials to use to log in.</param>
            <param name="channels">List of channels to join when connected</param>
            <param name="chatCommandIdentifier">The identifier to be used for reading and writing commands from chat.</param>
            <param name="whisperCommandIdentifier">The identifier to be used for reading and writing commands from whispers.</param>
            <param name="autoReListenOnExceptions">By default, TwitchClient will silence exceptions and auto-relisten for overall stability. For debugging, you may wish to have the exception bubble up, set this to false.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.initializeHelper(TwitchLib.Client.Models.ConnectionCredentials,System.Collections.Generic.List{System.String},System.Char,System.Char,System.Boolean)">
            <summary>
            Runs initialization logic that is shared by the overriden Initialize methods.
            </summary>
            <param name="credentials">The credentials to use to log in.</param>
            <param name="channels">List of channels to join when connected</param>
            <param name="chatCommandIdentifier">The identifier to be used for reading and writing commands from chat.</param>
            <param name="whisperCommandIdentifier">The identifier to be used for reading and writing commands from whispers.</param>
            <param name="autoReListenOnExceptions">By default, TwitchClient will silence exceptions and auto-relisten for overall stability. For debugging, you may wish to have the exception bubble up, set this to false.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.InitializeClient">
            <summary>
            Initializes the client.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.RaiseEvent(System.String,System.Object)">
            <summary>
            Raises the event.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendRaw(System.String)">
            <summary>
            Sends a RAW IRC message.
            </summary>
            <param name="message">The RAW message to be sent.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendMessage(TwitchLib.Client.Models.JoinedChannel,System.String,System.Boolean)">
            <summary>
            Sends a formatted Twitch channel chat message.
            </summary>
            <param name="channel">Channel to send message to.</param>
            <param name="message">The message to be sent.</param>
            <param name="dryRun">If set to true, the message will not actually be sent for testing purposes.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendMessage(System.String,System.String,System.Boolean)">
            <summary>
            SendMessage wrapper that accepts channel in string form.
            </summary>
            <param name="channel">The channel.</param>
            <param name="message">The message.</param>
            <param name="dryRun">if set to <c>true</c> [dry run].</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendReply(TwitchLib.Client.Models.JoinedChannel,System.String,System.String,System.Boolean)">
            <summary>
            Sends a formatted Twitch chat message reply.
            </summary>
            <param name="channel">Channel to send Twitch chat reply to</param>
            <param name="replyToId">The message id that is being replied to</param>
            <param name="message">Reply contents</param>
            <param name="dryRun">if set to <c>true</c> [dry run]</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendReply(System.String,System.String,System.String,System.Boolean)">
            <summary>
            SendReply wrapper that accepts channel in string form.
            </summary>
            <param name="channel">Channel to send Twitch chat reply to</param>
            <param name="replyToId">The message id that is being replied to</param>
            <param name="message">Reply contents</param>
            <param name="dryRun">if set to <c>true</c> [dry run]</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendWhisper(System.String,System.String,System.Boolean)">
            <summary>
            Sends a formatted whisper message to someone.
            </summary>
            <param name="receiver">The receiver of the whisper.</param>
            <param name="message">The message to be sent.</param>
            <param name="dryRun">If set to true, the message will not actually be sent for testing purposes.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Connect">
            <summary>
            Start connecting to the Twitch IRC chat.
            </summary>
            <returns>bool representing Connect() result</returns>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Disconnect">
            <summary>
            Start disconnecting from the Twitch IRC chat.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Reconnect">
            <summary>
            Start reconnecting to the Twitch IRC chat.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.AddChatCommandIdentifier(System.Char)">
            <summary>
            Adds a character to a list of characters that if found at the start of a message, fires command received event.
            </summary>
            <param name="identifier">Character, that if found at start of message, fires command received event.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.RemoveChatCommandIdentifier(System.Char)">
            <summary>
            Removes a character from a list of characters that if found at the start of a message, fires command received event.
            </summary>
            <param name="identifier">Command identifier to removed from identifier list.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.AddWhisperCommandIdentifier(System.Char)">
            <summary>
            Adds a character to a list of characters that if found at the start of a whisper, fires command received event.
            </summary>
            <param name="identifier">Character, that if found at start of message, fires command received event.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.RemoveWhisperCommandIdentifier(System.Char)">
            <summary>
            Removes a character to a list of characters that if found at the start of a whisper, fires command received event.
            </summary>
            <param name="identifier">Command identifier to removed from identifier list.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SetConnectionCredentials(TwitchLib.Client.Models.ConnectionCredentials)">
            <summary>
            Sets the connection credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <exception cref="T:TwitchLib.Client.Exceptions.IllegalAssignmentException">While the client is connected, you are unable to change the connection credentials. Please disconnect first and then change them.</exception>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.JoinChannel(System.String,System.Boolean)">
            <summary>
            Join the Twitch IRC chat of <paramref name="channel" />.
            </summary>
            <param name="channel">The channel to join.</param>
            <param name="overrideCheck">Override a join check.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.GetJoinedChannel(System.String)">
            <summary>
            Returns a JoinedChannel object using a passed string/&gt;.
            </summary>
            <param name="channel">String channel to search for.</param>
            <returns>JoinedChannel.</returns>
            <exception cref="T:TwitchLib.Client.Exceptions.BadStateException">Must be connected to at least one channel.</exception>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.LeaveChannel(System.String)">
            <summary>
            Leaves (PART) the Twitch IRC chat of <paramref name="channel" />.
            </summary>
            <param name="channel">The channel to leave.</param>
            <returns>True is returned if the passed channel was found, false if channel not found.</returns>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.LeaveChannel(TwitchLib.Client.Models.JoinedChannel)">
            <summary>
            Leaves (PART) the Twitch IRC chat of <paramref name="channel" />.
            </summary>
            <param name="channel">The JoinedChannel object to leave.</param>
            <returns>True is returned if the passed channel was found, false if channel not found.</returns>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.OnReadLineTest(System.String)">
            <summary>
            This method allows firing the message parser with a custom irc string allowing for easy testing
            </summary>
            <param name="rawIrc">This should be a raw IRC message resembling one received from Twitch IRC.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnWhisperThrottled(System.Object,TwitchLib.Communication.Events.OnWhisperThrottledEventArgs)">
            <summary>
            Handles the OnWhisperThrottled event of the _client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwitchLib.Communication.Events.OnWhisperThrottledEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnMessageThrottled(System.Object,TwitchLib.Communication.Events.OnMessageThrottledEventArgs)">
            <summary>
            Handles the OnMessageThrottled event of the _client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwitchLib.Communication.Events.OnMessageThrottledEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnFatality(System.Object,TwitchLib.Communication.Events.OnFatalErrorEventArgs)">
            <summary>
            Handles the OnFatality event of the _client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwitchLib.Communication.Events.OnFatalErrorEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnDisconnected(System.Object,TwitchLib.Communication.Events.OnDisconnectedEventArgs)">
            <summary>
            Handles the OnDisconnected event of the _client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwitchLib.Communication.Events.OnDisconnectedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnReconnected(System.Object,TwitchLib.Communication.Events.OnReconnectedEventArgs)">
            <summary>
            Handles the OnReconnected event of the _client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwitchLib.Communication.Events.OnReconnectedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnMessage(System.Object,TwitchLib.Communication.Events.OnMessageEventArgs)">
            <summary>
            Handles the OnMessage event of the _client control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:TwitchLib.Communication.Events.OnMessageEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient._client_OnConnected(System.Object,System.Object)">
            <summary>
            Clients the on connected.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.QueueingJoinCheck">
            <summary>
            Queueings the join check.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.StartJoinedChannelTimer(System.String)">
            <summary>
            Starts the joined channel timer.
            </summary>
            <param name="channel">The channel.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.JoinChannelTimeout(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Joins the channel timeout.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Timers.ElapsedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleIrcMessage(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the irc message.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandlePrivMsg(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the priv MSG.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleNotice(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the notice.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleJoin(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the join.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandlePart(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the part.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleHostTarget(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the host target.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleClearChat(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the clear chat.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleClearMsg(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the clear MSG.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleUserState(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the state of the user.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Handle004">
            <summary>
            Handle004s this instance.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Handle353(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handle353s the specified irc message.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Handle366">
            <summary>
            Handle366s this instance.
            </summary>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleWhisper(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the whisper.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleRoomState(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the state of the room.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleUserNotice(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the user notice.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleMode(TwitchLib.Client.Models.Internal.IrcMessage)">
            <summary>
            Handles the mode.
            </summary>
            <param name="ircMessage">The irc message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.Log(System.String,System.Boolean,System.Boolean)">
            <summary>
            Logs the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="includeDate">if set to <c>true</c> [include date].</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.LogError(System.String,System.Boolean,System.Boolean)">
            <summary>
            Logs the error.
            </summary>
            <param name="message">The message.</param>
            <param name="includeDate">if set to <c>true</c> [include date].</param>
            <param name="includeTime">if set to <c>true</c> [include time].</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.SendQueuedItem(System.String)">
            <summary>
            Sends the queued item.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleNotInitialized">
            <summary>
            Handles the not initialized.
            </summary>
            <exception cref="T:TwitchLib.Client.Exceptions.ClientNotInitializedException">The twitch client has not been initialized and cannot be used. Please call Initialize();</exception>
        </member>
        <member name="M:TwitchLib.Client.TwitchClient.HandleNotConnected">
            <summary>
            Handles the not connected.
            </summary>
            <exception cref="T:TwitchLib.Client.Exceptions.ClientNotConnectedException">In order to perform this action, the client must be connected to Twitch. To confirm connection, try performing this action in or after the OnConnected event has been fired.</exception>
        </member>
    </members>
</doc>
